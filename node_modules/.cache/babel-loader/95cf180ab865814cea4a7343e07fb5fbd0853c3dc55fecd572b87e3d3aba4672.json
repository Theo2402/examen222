{"ast":null,"code":"/**\n * @remix-run/router v1.16.1\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */function _extends(){_extends=Object.assign?Object.assign.bind():function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Actions represent the type of change to a location value.\n */var Action;(function(Action){/**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */Action[\"Pop\"]=\"POP\";/**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */Action[\"Push\"]=\"PUSH\";/**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */Action[\"Replace\"]=\"REPLACE\";})(Action||(Action={}));const PopStateEventType=\"popstate\";/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */function createMemoryHistory(options){if(options===void 0){options={};}let{initialEntries=[\"/\"],initialIndex,v5Compat=false}=options;let entries;// Declare so we can access from createMemoryLocation\nentries=initialEntries.map((entry,index)=>createMemoryLocation(entry,typeof entry===\"string\"?null:entry.state,index===0?\"default\":undefined));let index=clampIndex(initialIndex==null?entries.length-1:initialIndex);let action=Action.Pop;let listener=null;function clampIndex(n){return Math.min(Math.max(n,0),entries.length-1);}function getCurrentLocation(){return entries[index];}function createMemoryLocation(to,state,key){if(state===void 0){state=null;}let location=createLocation(entries?getCurrentLocation().pathname:\"/\",to,state,key);warning(location.pathname.charAt(0)===\"/\",\"relative pathnames are not supported in memory history: \"+JSON.stringify(to));return location;}function createHref(to){return typeof to===\"string\"?to:createPath(to);}let history={get index(){return index;},get action(){return action;},get location(){return getCurrentLocation();},createHref,createURL(to){return new URL(createHref(to),\"http://localhost\");},encodeLocation(to){let path=typeof to===\"string\"?parsePath(to):to;return{pathname:path.pathname||\"\",search:path.search||\"\",hash:path.hash||\"\"};},push(to,state){action=Action.Push;let nextLocation=createMemoryLocation(to,state);index+=1;entries.splice(index,entries.length,nextLocation);if(v5Compat&&listener){listener({action,location:nextLocation,delta:1});}},replace(to,state){action=Action.Replace;let nextLocation=createMemoryLocation(to,state);entries[index]=nextLocation;if(v5Compat&&listener){listener({action,location:nextLocation,delta:0});}},go(delta){action=Action.Pop;let nextIndex=clampIndex(index+delta);let nextLocation=entries[nextIndex];index=nextIndex;if(listener){listener({action,location:nextLocation,delta});}},listen(fn){listener=fn;return()=>{listener=null;};}};return history;}/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */function createBrowserHistory(options){if(options===void 0){options={};}function createBrowserLocation(window,globalHistory){let{pathname,search,hash}=window.location;return createLocation(\"\",{pathname,search,hash},// state defaults to `null` because `window.history.state` does\nglobalHistory.state&&globalHistory.state.usr||null,globalHistory.state&&globalHistory.state.key||\"default\");}function createBrowserHref(window,to){return typeof to===\"string\"?to:createPath(to);}return getUrlBasedHistory(createBrowserLocation,createBrowserHref,null,options);}/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */function createHashHistory(options){if(options===void 0){options={};}function createHashLocation(window,globalHistory){let{pathname=\"/\",search=\"\",hash=\"\"}=parsePath(window.location.hash.substr(1));// Hash URL should always have a leading / just like window.location.pathname\n// does, so if an app ends up at a route like /#something then we add a\n// leading slash so all of our path-matching behaves the same as if it would\n// in a browser router.  This is particularly important when there exists a\n// root splat route (<Route path=\"*\">) since that matches internally against\n// \"/*\" and we'd expect /#something to 404 in a hash router app.\nif(!pathname.startsWith(\"/\")&&!pathname.startsWith(\".\")){pathname=\"/\"+pathname;}return createLocation(\"\",{pathname,search,hash},// state defaults to `null` because `window.history.state` does\nglobalHistory.state&&globalHistory.state.usr||null,globalHistory.state&&globalHistory.state.key||\"default\");}function createHashHref(window,to){let base=window.document.querySelector(\"base\");let href=\"\";if(base&&base.getAttribute(\"href\")){let url=window.location.href;let hashIndex=url.indexOf(\"#\");href=hashIndex===-1?url:url.slice(0,hashIndex);}return href+\"#\"+(typeof to===\"string\"?to:createPath(to));}function validateHashLocation(location,to){warning(location.pathname.charAt(0)===\"/\",\"relative pathnames are not supported in hash history.push(\"+JSON.stringify(to)+\")\");}return getUrlBasedHistory(createHashLocation,createHashHref,validateHashLocation,options);}function invariant(value,message){if(value===false||value===null||typeof value===\"undefined\"){throw new Error(message);}}function warning(cond,message){if(!cond){// eslint-disable-next-line no-console\nif(typeof console!==\"undefined\")console.warn(message);try{// Welcome to debugging history!\n//\n// This error is thrown as a convenience, so you can more easily\n// find the source for a warning that appears in the console by\n// enabling \"pause on exceptions\" in your JavaScript debugger.\nthrow new Error(message);// eslint-disable-next-line no-empty\n}catch(e){}}}function createKey(){return Math.random().toString(36).substr(2,8);}/**\n * For browser-based histories, we combine the state and key into an object\n */function getHistoryState(location,index){return{usr:location.state,key:location.key,idx:index};}/**\n * Creates a Location object with a unique key from the given Path\n */function createLocation(current,to,state,key){if(state===void 0){state=null;}let location=_extends({pathname:typeof current===\"string\"?current:current.pathname,search:\"\",hash:\"\"},typeof to===\"string\"?parsePath(to):to,{state,// TODO: This could be cleaned up.  push/replace should probably just take\n// full Locations now and avoid the need to run through this flow at all\n// But that's a pretty big refactor to the current test suite so going to\n// keep as is for the time being and just let any incoming keys take precedence\nkey:to&&to.key||key||createKey()});return location;}/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */function createPath(_ref){let{pathname=\"/\",search=\"\",hash=\"\"}=_ref;if(search&&search!==\"?\")pathname+=search.charAt(0)===\"?\"?search:\"?\"+search;if(hash&&hash!==\"#\")pathname+=hash.charAt(0)===\"#\"?hash:\"#\"+hash;return pathname;}/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */function parsePath(path){let parsedPath={};if(path){let hashIndex=path.indexOf(\"#\");if(hashIndex>=0){parsedPath.hash=path.substr(hashIndex);path=path.substr(0,hashIndex);}let searchIndex=path.indexOf(\"?\");if(searchIndex>=0){parsedPath.search=path.substr(searchIndex);path=path.substr(0,searchIndex);}if(path){parsedPath.pathname=path;}}return parsedPath;}function getUrlBasedHistory(getLocation,createHref,validateLocation,options){if(options===void 0){options={};}let{window=document.defaultView,v5Compat=false}=options;let globalHistory=window.history;let action=Action.Pop;let listener=null;let index=getIndex();// Index should only be null when we initialize. If not, it's because the\n// user called history.pushState or history.replaceState directly, in which\n// case we should log a warning as it will result in bugs.\nif(index==null){index=0;globalHistory.replaceState(_extends({},globalHistory.state,{idx:index}),\"\");}function getIndex(){let state=globalHistory.state||{idx:null};return state.idx;}function handlePop(){action=Action.Pop;let nextIndex=getIndex();let delta=nextIndex==null?null:nextIndex-index;index=nextIndex;if(listener){listener({action,location:history.location,delta});}}function push(to,state){action=Action.Push;let location=createLocation(history.location,to,state);if(validateLocation)validateLocation(location,to);index=getIndex()+1;let historyState=getHistoryState(location,index);let url=history.createHref(location);// try...catch because iOS limits us to 100 pushState calls :/\ntry{globalHistory.pushState(historyState,\"\",url);}catch(error){// If the exception is because `state` can't be serialized, let that throw\n// outwards just like a replace call would so the dev knows the cause\n// https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n// https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\nif(error instanceof DOMException&&error.name===\"DataCloneError\"){throw error;}// They are going to lose state here, but there is no real\n// way to warn them about it since the page will refresh...\nwindow.location.assign(url);}if(v5Compat&&listener){listener({action,location:history.location,delta:1});}}function replace(to,state){action=Action.Replace;let location=createLocation(history.location,to,state);if(validateLocation)validateLocation(location,to);index=getIndex();let historyState=getHistoryState(location,index);let url=history.createHref(location);globalHistory.replaceState(historyState,\"\",url);if(v5Compat&&listener){listener({action,location:history.location,delta:0});}}function createURL(to){// window.location.origin is \"null\" (the literal string value) in Firefox\n// under certain conditions, notably when serving from a local HTML file\n// See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\nlet base=window.location.origin!==\"null\"?window.location.origin:window.location.href;let href=typeof to===\"string\"?to:createPath(to);// Treating this as a full URL will strip any trailing spaces so we need to\n// pre-encode them since they might be part of a matching splat param from\n// an ancestor route\nhref=href.replace(/ $/,\"%20\");invariant(base,\"No window.location.(origin|href) available to create URL for href: \"+href);return new URL(href,base);}let history={get action(){return action;},get location(){return getLocation(window,globalHistory);},listen(fn){if(listener){throw new Error(\"A history only accepts one active listener\");}window.addEventListener(PopStateEventType,handlePop);listener=fn;return()=>{window.removeEventListener(PopStateEventType,handlePop);listener=null;};},createHref(to){return createHref(window,to);},createURL,encodeLocation(to){// Encode a Location the same way window.location would\nlet url=createURL(to);return{pathname:url.pathname,search:url.search,hash:url.hash};},push,replace,go(n){return globalHistory.go(n);}};return history;}//#endregion\nvar ResultType;(function(ResultType){ResultType[\"data\"]=\"data\";ResultType[\"deferred\"]=\"deferred\";ResultType[\"redirect\"]=\"redirect\";ResultType[\"error\"]=\"error\";})(ResultType||(ResultType={}));const immutableRouteKeys=new Set([\"lazy\",\"caseSensitive\",\"path\",\"id\",\"index\",\"children\"]);function isIndexRoute(route){return route.index===true;}// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nfunction convertRoutesToDataRoutes(routes,mapRouteProperties,parentPath,manifest){if(parentPath===void 0){parentPath=[];}if(manifest===void 0){manifest={};}return routes.map((route,index)=>{let treePath=[...parentPath,index];let id=typeof route.id===\"string\"?route.id:treePath.join(\"-\");invariant(route.index!==true||!route.children,\"Cannot specify children on an index route\");invariant(!manifest[id],\"Found a route id collision on id \\\"\"+id+\"\\\".  Route \"+\"id's must be globally unique within Data Router usages\");if(isIndexRoute(route)){let indexRoute=_extends({},route,mapRouteProperties(route),{id});manifest[id]=indexRoute;return indexRoute;}else{let pathOrLayoutRoute=_extends({},route,mapRouteProperties(route),{id,children:undefined});manifest[id]=pathOrLayoutRoute;if(route.children){pathOrLayoutRoute.children=convertRoutesToDataRoutes(route.children,mapRouteProperties,treePath,manifest);}return pathOrLayoutRoute;}});}/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */function matchRoutes(routes,locationArg,basename){if(basename===void 0){basename=\"/\";}let location=typeof locationArg===\"string\"?parsePath(locationArg):locationArg;let pathname=stripBasename(location.pathname||\"/\",basename);if(pathname==null){return null;}let branches=flattenRoutes(routes);rankRouteBranches(branches);let matches=null;for(let i=0;matches==null&&i<branches.length;++i){// Incoming pathnames are generally encoded from either window.location\n// or from router.navigate, but we want to match against the unencoded\n// paths in the route definitions.  Memory router locations won't be\n// encoded here but there also shouldn't be anything to decode so this\n// should be a safe operation.  This avoids needing matchRoutes to be\n// history-aware.\nlet decoded=decodePath(pathname);matches=matchRouteBranch(branches[i],decoded);}return matches;}function convertRouteMatchToUiMatch(match,loaderData){let{route,pathname,params}=match;return{id:route.id,pathname,params,data:loaderData[route.id],handle:route.handle};}function flattenRoutes(routes,branches,parentsMeta,parentPath){if(branches===void 0){branches=[];}if(parentsMeta===void 0){parentsMeta=[];}if(parentPath===void 0){parentPath=\"\";}let flattenRoute=(route,index,relativePath)=>{let meta={relativePath:relativePath===undefined?route.path||\"\":relativePath,caseSensitive:route.caseSensitive===true,childrenIndex:index,route};if(meta.relativePath.startsWith(\"/\")){invariant(meta.relativePath.startsWith(parentPath),\"Absolute route path \\\"\"+meta.relativePath+\"\\\" nested under path \"+(\"\\\"\"+parentPath+\"\\\" is not valid. An absolute child route path \")+\"must start with the combined path of all its parent routes.\");meta.relativePath=meta.relativePath.slice(parentPath.length);}let path=joinPaths([parentPath,meta.relativePath]);let routesMeta=parentsMeta.concat(meta);// Add the children before adding this route to the array, so we traverse the\n// route tree depth-first and child routes appear before their parents in\n// the \"flattened\" version.\nif(route.children&&route.children.length>0){invariant(// Our types know better, but runtime JS may not!\n// @ts-expect-error\nroute.index!==true,\"Index routes must not have child routes. Please remove \"+(\"all child routes from route path \\\"\"+path+\"\\\".\"));flattenRoutes(route.children,branches,routesMeta,path);}// Routes without a path shouldn't ever match by themselves unless they are\n// index routes, so don't add them to the list of possible branches.\nif(route.path==null&&!route.index){return;}branches.push({path,score:computeScore(path,route.index),routesMeta});};routes.forEach((route,index)=>{var _route$path;// coarse-grain check for optional params\nif(route.path===\"\"||!((_route$path=route.path)!=null&&_route$path.includes(\"?\"))){flattenRoute(route,index);}else{for(let exploded of explodeOptionalSegments(route.path)){flattenRoute(route,index,exploded);}}});return branches;}/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */function explodeOptionalSegments(path){let segments=path.split(\"/\");if(segments.length===0)return[];let[first,...rest]=segments;// Optional path segments are denoted by a trailing `?`\nlet isOptional=first.endsWith(\"?\");// Compute the corresponding required segment: `foo?` -> `foo`\nlet required=first.replace(/\\?$/,\"\");if(rest.length===0){// Intepret empty string as omitting an optional segment\n// `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\nreturn isOptional?[required,\"\"]:[required];}let restExploded=explodeOptionalSegments(rest.join(\"/\"));let result=[];// All child paths with the prefix.  Do this for all children before the\n// optional version for all children, so we get consistent ordering where the\n// parent optional aspect is preferred as required.  Otherwise, we can get\n// child sections interspersed where deeper optional segments are higher than\n// parent optional segments, where for example, /:two would explode _earlier_\n// then /:one.  By always including the parent as required _for all children_\n// first, we avoid this issue\nresult.push(...restExploded.map(subpath=>subpath===\"\"?required:[required,subpath].join(\"/\")));// Then, if this is an optional value, add all child versions without\nif(isOptional){result.push(...restExploded);}// for absolute paths, ensure `/` instead of empty segment\nreturn result.map(exploded=>path.startsWith(\"/\")&&exploded===\"\"?\"/\":exploded);}function rankRouteBranches(branches){branches.sort((a,b)=>a.score!==b.score?b.score-a.score// Higher score first\n:compareIndexes(a.routesMeta.map(meta=>meta.childrenIndex),b.routesMeta.map(meta=>meta.childrenIndex)));}const paramRe=/^:[\\w-]+$/;const dynamicSegmentValue=3;const indexRouteValue=2;const emptySegmentValue=1;const staticSegmentValue=10;const splatPenalty=-2;const isSplat=s=>s===\"*\";function computeScore(path,index){let segments=path.split(\"/\");let initialScore=segments.length;if(segments.some(isSplat)){initialScore+=splatPenalty;}if(index){initialScore+=indexRouteValue;}return segments.filter(s=>!isSplat(s)).reduce((score,segment)=>score+(paramRe.test(segment)?dynamicSegmentValue:segment===\"\"?emptySegmentValue:staticSegmentValue),initialScore);}function compareIndexes(a,b){let siblings=a.length===b.length&&a.slice(0,-1).every((n,i)=>n===b[i]);return siblings?// If two routes are siblings, we should try to match the earlier sibling\n// first. This allows people to have fine-grained control over the matching\n// behavior by simply putting routes with identical paths in the order they\n// want them tried.\na[a.length-1]-b[b.length-1]:// Otherwise, it doesn't really make sense to rank non-siblings by index,\n// so they sort equally.\n0;}function matchRouteBranch(branch,pathname){let{routesMeta}=branch;let matchedParams={};let matchedPathname=\"/\";let matches=[];for(let i=0;i<routesMeta.length;++i){let meta=routesMeta[i];let end=i===routesMeta.length-1;let remainingPathname=matchedPathname===\"/\"?pathname:pathname.slice(matchedPathname.length)||\"/\";let match=matchPath({path:meta.relativePath,caseSensitive:meta.caseSensitive,end},remainingPathname);if(!match)return null;Object.assign(matchedParams,match.params);let route=meta.route;matches.push({// TODO: Can this as be avoided?\nparams:matchedParams,pathname:joinPaths([matchedPathname,match.pathname]),pathnameBase:normalizePathname(joinPaths([matchedPathname,match.pathnameBase])),route});if(match.pathnameBase!==\"/\"){matchedPathname=joinPaths([matchedPathname,match.pathnameBase]);}}return matches;}/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */function generatePath(originalPath,params){if(params===void 0){params={};}let path=originalPath;if(path.endsWith(\"*\")&&path!==\"*\"&&!path.endsWith(\"/*\")){warning(false,\"Route path \\\"\"+path+\"\\\" will be treated as if it were \"+(\"\\\"\"+path.replace(/\\*$/,\"/*\")+\"\\\" because the `*` character must \")+\"always follow a `/` in the pattern. To get rid of this warning, \"+(\"please change the route path to \\\"\"+path.replace(/\\*$/,\"/*\")+\"\\\".\"));path=path.replace(/\\*$/,\"/*\");}// ensure `/` is added at the beginning if the path is absolute\nconst prefix=path.startsWith(\"/\")?\"/\":\"\";const stringify=p=>p==null?\"\":typeof p===\"string\"?p:String(p);const segments=path.split(/\\/+/).map((segment,index,array)=>{const isLastSegment=index===array.length-1;// only apply the splat if it's the last segment\nif(isLastSegment&&segment===\"*\"){const star=\"*\";// Apply the splat\nreturn stringify(params[star]);}const keyMatch=segment.match(/^:([\\w-]+)(\\??)$/);if(keyMatch){const[,key,optional]=keyMatch;let param=params[key];invariant(optional===\"?\"||param!=null,\"Missing \\\":\"+key+\"\\\" param\");return stringify(param);}// Remove any optional markers from optional static segments\nreturn segment.replace(/\\?$/g,\"\");})// Remove empty segments\n.filter(segment=>!!segment);return prefix+segments.join(\"/\");}/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */function matchPath(pattern,pathname){if(typeof pattern===\"string\"){pattern={path:pattern,caseSensitive:false,end:true};}let[matcher,compiledParams]=compilePath(pattern.path,pattern.caseSensitive,pattern.end);let match=pathname.match(matcher);if(!match)return null;let matchedPathname=match[0];let pathnameBase=matchedPathname.replace(/(.)\\/+$/,\"$1\");let captureGroups=match.slice(1);let params=compiledParams.reduce((memo,_ref,index)=>{let{paramName,isOptional}=_ref;// We need to compute the pathnameBase here using the raw splat value\n// instead of using params[\"*\"] later because it will be decoded then\nif(paramName===\"*\"){let splatValue=captureGroups[index]||\"\";pathnameBase=matchedPathname.slice(0,matchedPathname.length-splatValue.length).replace(/(.)\\/+$/,\"$1\");}const value=captureGroups[index];if(isOptional&&!value){memo[paramName]=undefined;}else{memo[paramName]=(value||\"\").replace(/%2F/g,\"/\");}return memo;},{});return{params,pathname:matchedPathname,pathnameBase,pattern};}function compilePath(path,caseSensitive,end){if(caseSensitive===void 0){caseSensitive=false;}if(end===void 0){end=true;}warning(path===\"*\"||!path.endsWith(\"*\")||path.endsWith(\"/*\"),\"Route path \\\"\"+path+\"\\\" will be treated as if it were \"+(\"\\\"\"+path.replace(/\\*$/,\"/*\")+\"\\\" because the `*` character must \")+\"always follow a `/` in the pattern. To get rid of this warning, \"+(\"please change the route path to \\\"\"+path.replace(/\\*$/,\"/*\")+\"\\\".\"));let params=[];let regexpSource=\"^\"+path.replace(/\\/*\\*?$/,\"\")// Ignore trailing / and /*, we'll handle it below\n.replace(/^\\/*/,\"/\")// Make sure it has a leading /\n.replace(/[\\\\.*+^${}|()[\\]]/g,\"\\\\$&\")// Escape special regex chars\n.replace(/\\/:([\\w-]+)(\\?)?/g,(_,paramName,isOptional)=>{params.push({paramName,isOptional:isOptional!=null});return isOptional?\"/?([^\\\\/]+)?\":\"/([^\\\\/]+)\";});if(path.endsWith(\"*\")){params.push({paramName:\"*\"});regexpSource+=path===\"*\"||path===\"/*\"?\"(.*)$\"// Already matched the initial /, just match the rest\n:\"(?:\\\\/(.+)|\\\\/*)$\";// Don't include the / in params[\"*\"]\n}else if(end){// When matching to the end, ignore trailing slashes\nregexpSource+=\"\\\\/*$\";}else if(path!==\"\"&&path!==\"/\"){// If our path is non-empty and contains anything beyond an initial slash,\n// then we have _some_ form of path in our regex, so we should expect to\n// match only if we find the end of this path segment.  Look for an optional\n// non-captured trailing slash (to match a portion of the URL) or the end\n// of the path (if we've matched to the end).  We used to do this with a\n// word boundary but that gives false positives on routes like\n// /user-preferences since `-` counts as a word boundary.\nregexpSource+=\"(?:(?=\\\\/|$))\";}else;let matcher=new RegExp(regexpSource,caseSensitive?undefined:\"i\");return[matcher,params];}function decodePath(value){try{return value.split(\"/\").map(v=>decodeURIComponent(v).replace(/\\//g,\"%2F\")).join(\"/\");}catch(error){warning(false,\"The URL path \\\"\"+value+\"\\\" could not be decoded because it is is a \"+\"malformed URL segment. This is probably due to a bad percent \"+(\"encoding (\"+error+\").\"));return value;}}/**\n * @private\n */function stripBasename(pathname,basename){if(basename===\"/\")return pathname;if(!pathname.toLowerCase().startsWith(basename.toLowerCase())){return null;}// We want to leave trailing slash behavior in the user's control, so if they\n// specify a basename with a trailing slash, we should support it\nlet startIndex=basename.endsWith(\"/\")?basename.length-1:basename.length;let nextChar=pathname.charAt(startIndex);if(nextChar&&nextChar!==\"/\"){// pathname does not start with basename/\nreturn null;}return pathname.slice(startIndex)||\"/\";}/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */function resolvePath(to,fromPathname){if(fromPathname===void 0){fromPathname=\"/\";}let{pathname:toPathname,search=\"\",hash=\"\"}=typeof to===\"string\"?parsePath(to):to;let pathname=toPathname?toPathname.startsWith(\"/\")?toPathname:resolvePathname(toPathname,fromPathname):fromPathname;return{pathname,search:normalizeSearch(search),hash:normalizeHash(hash)};}function resolvePathname(relativePath,fromPathname){let segments=fromPathname.replace(/\\/+$/,\"\").split(\"/\");let relativeSegments=relativePath.split(\"/\");relativeSegments.forEach(segment=>{if(segment===\"..\"){// Keep the root \"\" segment so the pathname starts at /\nif(segments.length>1)segments.pop();}else if(segment!==\".\"){segments.push(segment);}});return segments.length>1?segments.join(\"/\"):\"/\";}function getInvalidPathError(char,field,dest,path){return\"Cannot include a '\"+char+\"' character in a manually specified \"+(\"`to.\"+field+\"` field [\"+JSON.stringify(path)+\"].  Please separate it out to the \")+(\"`to.\"+dest+\"` field. Alternatively you may provide the full path as \")+\"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";}/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */function getPathContributingMatches(matches){return matches.filter((match,index)=>index===0||match.route.path&&match.route.path.length>0);}// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nfunction getResolveToMatches(matches,v7_relativeSplatPath){let pathMatches=getPathContributingMatches(matches);// When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n// match so we include splat values for \".\" links.  See:\n// https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\nif(v7_relativeSplatPath){return pathMatches.map((match,idx)=>idx===matches.length-1?match.pathname:match.pathnameBase);}return pathMatches.map(match=>match.pathnameBase);}/**\n * @private\n */function resolveTo(toArg,routePathnames,locationPathname,isPathRelative){if(isPathRelative===void 0){isPathRelative=false;}let to;if(typeof toArg===\"string\"){to=parsePath(toArg);}else{to=_extends({},toArg);invariant(!to.pathname||!to.pathname.includes(\"?\"),getInvalidPathError(\"?\",\"pathname\",\"search\",to));invariant(!to.pathname||!to.pathname.includes(\"#\"),getInvalidPathError(\"#\",\"pathname\",\"hash\",to));invariant(!to.search||!to.search.includes(\"#\"),getInvalidPathError(\"#\",\"search\",\"hash\",to));}let isEmptyPath=toArg===\"\"||to.pathname===\"\";let toPathname=isEmptyPath?\"/\":to.pathname;let from;// Routing is relative to the current pathname if explicitly requested.\n//\n// If a pathname is explicitly provided in `to`, it should be relative to the\n// route context. This is explained in `Note on `<Link to>` values` in our\n// migration guide from v5 as a means of disambiguation between `to` values\n// that begin with `/` and those that do not. However, this is problematic for\n// `to` values that do not provide a pathname. `to` can simply be a search or\n// hash string, in which case we should assume that the navigation is relative\n// to the current location's pathname and *not* the route pathname.\nif(toPathname==null){from=locationPathname;}else{let routePathnameIndex=routePathnames.length-1;// With relative=\"route\" (the default), each leading .. segment means\n// \"go up one route\" instead of \"go up one URL segment\".  This is a key\n// difference from how <a href> works and a major reason we call this a\n// \"to\" value instead of a \"href\".\nif(!isPathRelative&&toPathname.startsWith(\"..\")){let toSegments=toPathname.split(\"/\");while(toSegments[0]===\"..\"){toSegments.shift();routePathnameIndex-=1;}to.pathname=toSegments.join(\"/\");}from=routePathnameIndex>=0?routePathnames[routePathnameIndex]:\"/\";}let path=resolvePath(to,from);// Ensure the pathname has a trailing slash if the original \"to\" had one\nlet hasExplicitTrailingSlash=toPathname&&toPathname!==\"/\"&&toPathname.endsWith(\"/\");// Or if this was a link to the current path which has a trailing slash\nlet hasCurrentTrailingSlash=(isEmptyPath||toPathname===\".\")&&locationPathname.endsWith(\"/\");if(!path.pathname.endsWith(\"/\")&&(hasExplicitTrailingSlash||hasCurrentTrailingSlash)){path.pathname+=\"/\";}return path;}/**\n * @private\n */function getToPathname(to){// Empty strings should be treated the same as / paths\nreturn to===\"\"||to.pathname===\"\"?\"/\":typeof to===\"string\"?parsePath(to).pathname:to.pathname;}/**\n * @private\n */const joinPaths=paths=>paths.join(\"/\").replace(/\\/\\/+/g,\"/\");/**\n * @private\n */const normalizePathname=pathname=>pathname.replace(/\\/+$/,\"\").replace(/^\\/*/,\"/\");/**\n * @private\n */const normalizeSearch=search=>!search||search===\"?\"?\"\":search.startsWith(\"?\")?search:\"?\"+search;/**\n * @private\n */const normalizeHash=hash=>!hash||hash===\"#\"?\"\":hash.startsWith(\"#\")?hash:\"#\"+hash;/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */const json=function json(data,init){if(init===void 0){init={};}let responseInit=typeof init===\"number\"?{status:init}:init;let headers=new Headers(responseInit.headers);if(!headers.has(\"Content-Type\")){headers.set(\"Content-Type\",\"application/json; charset=utf-8\");}return new Response(JSON.stringify(data),_extends({},responseInit,{headers}));};class AbortedDeferredError extends Error{}class DeferredData{constructor(data,responseInit){this.pendingKeysSet=new Set();this.subscribers=new Set();this.deferredKeys=[];invariant(data&&typeof data===\"object\"&&!Array.isArray(data),\"defer() only accepts plain objects\");// Set up an AbortController + Promise we can race against to exit early\n// cancellation\nlet reject;this.abortPromise=new Promise((_,r)=>reject=r);this.controller=new AbortController();let onAbort=()=>reject(new AbortedDeferredError(\"Deferred data aborted\"));this.unlistenAbortSignal=()=>this.controller.signal.removeEventListener(\"abort\",onAbort);this.controller.signal.addEventListener(\"abort\",onAbort);this.data=Object.entries(data).reduce((acc,_ref2)=>{let[key,value]=_ref2;return Object.assign(acc,{[key]:this.trackPromise(key,value)});},{});if(this.done){// All incoming values were resolved\nthis.unlistenAbortSignal();}this.init=responseInit;}trackPromise(key,value){if(!(value instanceof Promise)){return value;}this.deferredKeys.push(key);this.pendingKeysSet.add(key);// We store a little wrapper promise that will be extended with\n// _data/_error props upon resolve/reject\nlet promise=Promise.race([value,this.abortPromise]).then(data=>this.onSettle(promise,key,undefined,data),error=>this.onSettle(promise,key,error));// Register rejection listeners to avoid uncaught promise rejections on\n// errors or aborted deferred values\npromise.catch(()=>{});Object.defineProperty(promise,\"_tracked\",{get:()=>true});return promise;}onSettle(promise,key,error,data){if(this.controller.signal.aborted&&error instanceof AbortedDeferredError){this.unlistenAbortSignal();Object.defineProperty(promise,\"_error\",{get:()=>error});return Promise.reject(error);}this.pendingKeysSet.delete(key);if(this.done){// Nothing left to abort!\nthis.unlistenAbortSignal();}// If the promise was resolved/rejected with undefined, we'll throw an error as you\n// should always resolve with a value or null\nif(error===undefined&&data===undefined){let undefinedError=new Error(\"Deferred data for key \\\"\"+key+\"\\\" resolved/rejected with `undefined`, \"+\"you must resolve/reject with a value or `null`.\");Object.defineProperty(promise,\"_error\",{get:()=>undefinedError});this.emit(false,key);return Promise.reject(undefinedError);}if(data===undefined){Object.defineProperty(promise,\"_error\",{get:()=>error});this.emit(false,key);return Promise.reject(error);}Object.defineProperty(promise,\"_data\",{get:()=>data});this.emit(false,key);return data;}emit(aborted,settledKey){this.subscribers.forEach(subscriber=>subscriber(aborted,settledKey));}subscribe(fn){this.subscribers.add(fn);return()=>this.subscribers.delete(fn);}cancel(){this.controller.abort();this.pendingKeysSet.forEach((v,k)=>this.pendingKeysSet.delete(k));this.emit(true);}async resolveData(signal){let aborted=false;if(!this.done){let onAbort=()=>this.cancel();signal.addEventListener(\"abort\",onAbort);aborted=await new Promise(resolve=>{this.subscribe(aborted=>{signal.removeEventListener(\"abort\",onAbort);if(aborted||this.done){resolve(aborted);}});});}return aborted;}get done(){return this.pendingKeysSet.size===0;}get unwrappedData(){invariant(this.data!==null&&this.done,\"Can only unwrap data on initialized and settled deferreds\");return Object.entries(this.data).reduce((acc,_ref3)=>{let[key,value]=_ref3;return Object.assign(acc,{[key]:unwrapTrackedPromise(value)});},{});}get pendingKeys(){return Array.from(this.pendingKeysSet);}}function isTrackedPromise(value){return value instanceof Promise&&value._tracked===true;}function unwrapTrackedPromise(value){if(!isTrackedPromise(value)){return value;}if(value._error){throw value._error;}return value._data;}const defer=function defer(data,init){if(init===void 0){init={};}let responseInit=typeof init===\"number\"?{status:init}:init;return new DeferredData(data,responseInit);};/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */const redirect=function redirect(url,init){if(init===void 0){init=302;}let responseInit=init;if(typeof responseInit===\"number\"){responseInit={status:responseInit};}else if(typeof responseInit.status===\"undefined\"){responseInit.status=302;}let headers=new Headers(responseInit.headers);headers.set(\"Location\",url);return new Response(null,_extends({},responseInit,{headers}));};/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */const redirectDocument=(url,init)=>{let response=redirect(url,init);response.headers.set(\"X-Remix-Reload-Document\",\"true\");return response;};/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */class ErrorResponseImpl{constructor(status,statusText,data,internal){if(internal===void 0){internal=false;}this.status=status;this.statusText=statusText||\"\";this.internal=internal;if(data instanceof Error){this.data=data.toString();this.error=data;}else{this.data=data;}}}/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */function isRouteErrorResponse(error){return error!=null&&typeof error.status===\"number\"&&typeof error.statusText===\"string\"&&typeof error.internal===\"boolean\"&&\"data\"in error;}const validMutationMethodsArr=[\"post\",\"put\",\"patch\",\"delete\"];const validMutationMethods=new Set(validMutationMethodsArr);const validRequestMethodsArr=[\"get\",...validMutationMethodsArr];const validRequestMethods=new Set(validRequestMethodsArr);const redirectStatusCodes=new Set([301,302,303,307,308]);const redirectPreserveMethodStatusCodes=new Set([307,308]);const IDLE_NAVIGATION={state:\"idle\",location:undefined,formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined,json:undefined,text:undefined};const IDLE_FETCHER={state:\"idle\",data:undefined,formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined,json:undefined,text:undefined};const IDLE_BLOCKER={state:\"unblocked\",proceed:undefined,reset:undefined,location:undefined};const ABSOLUTE_URL_REGEX=/^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;const defaultMapRouteProperties=route=>({hasErrorBoundary:Boolean(route.hasErrorBoundary)});const TRANSITIONS_STORAGE_KEY=\"remix-router-transitions\";//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a router and listen to history POP navigations\n */function createRouter(init){const routerWindow=init.window?init.window:typeof window!==\"undefined\"?window:undefined;const isBrowser=typeof routerWindow!==\"undefined\"&&typeof routerWindow.document!==\"undefined\"&&typeof routerWindow.document.createElement!==\"undefined\";const isServer=!isBrowser;invariant(init.routes.length>0,\"You must provide a non-empty routes array to createRouter\");let mapRouteProperties;if(init.mapRouteProperties){mapRouteProperties=init.mapRouteProperties;}else if(init.detectErrorBoundary){// If they are still using the deprecated version, wrap it with the new API\nlet detectErrorBoundary=init.detectErrorBoundary;mapRouteProperties=route=>({hasErrorBoundary:detectErrorBoundary(route)});}else{mapRouteProperties=defaultMapRouteProperties;}// Routes keyed by ID\nlet manifest={};// Routes in tree format for matching\nlet dataRoutes=convertRoutesToDataRoutes(init.routes,mapRouteProperties,undefined,manifest);let inFlightDataRoutes;let basename=init.basename||\"/\";let dataStrategyImpl=init.unstable_dataStrategy||defaultDataStrategy;// Config driven behavior flags\nlet future=_extends({v7_fetcherPersist:false,v7_normalizeFormMethod:false,v7_partialHydration:false,v7_prependBasename:false,v7_relativeSplatPath:false,unstable_skipActionErrorRevalidation:false},init.future);// Cleanup function for history\nlet unlistenHistory=null;// Externally-provided functions to call on all state changes\nlet subscribers=new Set();// Externally-provided object to hold scroll restoration locations during routing\nlet savedScrollPositions=null;// Externally-provided function to get scroll restoration keys\nlet getScrollRestorationKey=null;// Externally-provided function to get current scroll position\nlet getScrollPosition=null;// One-time flag to control the initial hydration scroll restoration.  Because\n// we don't get the saved positions from <ScrollRestoration /> until _after_\n// the initial render, we need to manually trigger a separate updateState to\n// send along the restoreScrollPosition\n// Set to true if we have `hydrationData` since we assume we were SSR'd and that\n// SSR did the initial scroll restoration.\nlet initialScrollRestored=init.hydrationData!=null;let initialMatches=matchRoutes(dataRoutes,init.history.location,basename);let initialErrors=null;if(initialMatches==null){// If we do not match a user-provided-route, fall back to the root\n// to allow the error boundary to take over\nlet error=getInternalRouterError(404,{pathname:init.history.location.pathname});let{matches,route}=getShortCircuitMatches(dataRoutes);initialMatches=matches;initialErrors={[route.id]:error};}let initialized;let hasLazyRoutes=initialMatches.some(m=>m.route.lazy);let hasLoaders=initialMatches.some(m=>m.route.loader);if(hasLazyRoutes){// All initialMatches need to be loaded before we're ready.  If we have lazy\n// functions around still then we'll need to run them in initialize()\ninitialized=false;}else if(!hasLoaders){// If we've got no loaders to run, then we're good to go\ninitialized=true;}else if(future.v7_partialHydration){// If partial hydration is enabled, we're initialized so long as we were\n// provided with hydrationData for every route with a loader, and no loaders\n// were marked for explicit hydration\nlet loaderData=init.hydrationData?init.hydrationData.loaderData:null;let errors=init.hydrationData?init.hydrationData.errors:null;let isRouteInitialized=m=>{// No loader, nothing to initialize\nif(!m.route.loader){return true;}// Explicitly opting-in to running on hydration\nif(typeof m.route.loader===\"function\"&&m.route.loader.hydrate===true){return false;}// Otherwise, initialized if hydrated with data or an error\nreturn loaderData&&loaderData[m.route.id]!==undefined||errors&&errors[m.route.id]!==undefined;};// If errors exist, don't consider routes below the boundary\nif(errors){let idx=initialMatches.findIndex(m=>errors[m.route.id]!==undefined);initialized=initialMatches.slice(0,idx+1).every(isRouteInitialized);}else{initialized=initialMatches.every(isRouteInitialized);}}else{// Without partial hydration - we're initialized if we were provided any\n// hydrationData - which is expected to be complete\ninitialized=init.hydrationData!=null;}let router;let state={historyAction:init.history.action,location:init.history.location,matches:initialMatches,initialized,navigation:IDLE_NAVIGATION,// Don't restore on initial updateState() if we were SSR'd\nrestoreScrollPosition:init.hydrationData!=null?false:null,preventScrollReset:false,revalidation:\"idle\",loaderData:init.hydrationData&&init.hydrationData.loaderData||{},actionData:init.hydrationData&&init.hydrationData.actionData||null,errors:init.hydrationData&&init.hydrationData.errors||initialErrors,fetchers:new Map(),blockers:new Map()};// -- Stateful internal variables to manage navigations --\n// Current navigation in progress (to be committed in completeNavigation)\nlet pendingAction=Action.Pop;// Should the current navigation prevent the scroll reset if scroll cannot\n// be restored?\nlet pendingPreventScrollReset=false;// AbortController for the active navigation\nlet pendingNavigationController;// Should the current navigation enable document.startViewTransition?\nlet pendingViewTransitionEnabled=false;// Store applied view transitions so we can apply them on POP\nlet appliedViewTransitions=new Map();// Cleanup function for persisting applied transitions to sessionStorage\nlet removePageHideEventListener=null;// We use this to avoid touching history in completeNavigation if a\n// revalidation is entirely uninterrupted\nlet isUninterruptedRevalidation=false;// Use this internal flag to force revalidation of all loaders:\n//  - submissions (completed or interrupted)\n//  - useRevalidator()\n//  - X-Remix-Revalidate (from redirect)\nlet isRevalidationRequired=false;// Use this internal array to capture routes that require revalidation due\n// to a cancelled deferred on action submission\nlet cancelledDeferredRoutes=[];// Use this internal array to capture fetcher loads that were cancelled by an\n// action navigation and require revalidation\nlet cancelledFetcherLoads=[];// AbortControllers for any in-flight fetchers\nlet fetchControllers=new Map();// Track loads based on the order in which they started\nlet incrementingLoadId=0;// Track the outstanding pending navigation data load to be compared against\n// the globally incrementing load when a fetcher load lands after a completed\n// navigation\nlet pendingNavigationLoadId=-1;// Fetchers that triggered data reloads as a result of their actions\nlet fetchReloadIds=new Map();// Fetchers that triggered redirect navigations\nlet fetchRedirectIds=new Set();// Most recent href/match for fetcher.load calls for fetchers\nlet fetchLoadMatches=new Map();// Ref-count mounted fetchers so we know when it's ok to clean them up\nlet activeFetchers=new Map();// Fetchers that have requested a delete when using v7_fetcherPersist,\n// they'll be officially removed after they return to idle\nlet deletedFetchers=new Set();// Store DeferredData instances for active route matches.  When a\n// route loader returns defer() we stick one in here.  Then, when a nested\n// promise resolves we update loaderData.  If a new navigation starts we\n// cancel active deferreds for eliminated routes.\nlet activeDeferreds=new Map();// Store blocker functions in a separate Map outside of router state since\n// we don't need to update UI state if they change\nlet blockerFunctions=new Map();// Flag to ignore the next history update, so we can revert the URL change on\n// a POP navigation that was blocked by the user without touching router state\nlet ignoreNextHistoryUpdate=false;// Initialize the router, all side effects should be kicked off from here.\n// Implemented as a Fluent API for ease of:\n//   let router = createRouter(init).initialize();\nfunction initialize(){// If history informs us of a POP navigation, start the navigation but do not update\n// state.  We'll update our own state once the navigation completes\nunlistenHistory=init.history.listen(_ref=>{let{action:historyAction,location,delta}=_ref;// Ignore this event if it was just us resetting the URL from a\n// blocked POP navigation\nif(ignoreNextHistoryUpdate){ignoreNextHistoryUpdate=false;return;}warning(blockerFunctions.size===0||delta!=null,\"You are trying to use a blocker on a POP navigation to a location \"+\"that was not created by @remix-run/router. This will fail silently in \"+\"production. This can happen if you are navigating outside the router \"+\"via `window.history.pushState`/`window.location.hash` instead of using \"+\"router navigation APIs.  This can also happen if you are using \"+\"createHashRouter and the user manually changes the URL.\");let blockerKey=shouldBlockNavigation({currentLocation:state.location,nextLocation:location,historyAction});if(blockerKey&&delta!=null){// Restore the URL to match the current UI, but don't update router state\nignoreNextHistoryUpdate=true;init.history.go(delta*-1);// Put the blocker into a blocked state\nupdateBlocker(blockerKey,{state:\"blocked\",location,proceed(){updateBlocker(blockerKey,{state:\"proceeding\",proceed:undefined,reset:undefined,location});// Re-do the same POP navigation we just blocked\ninit.history.go(delta);},reset(){let blockers=new Map(state.blockers);blockers.set(blockerKey,IDLE_BLOCKER);updateState({blockers});}});return;}return startNavigation(historyAction,location);});if(isBrowser){// FIXME: This feels gross.  How can we cleanup the lines between\n// scrollRestoration/appliedTransitions persistance?\nrestoreAppliedTransitions(routerWindow,appliedViewTransitions);let _saveAppliedTransitions=()=>persistAppliedTransitions(routerWindow,appliedViewTransitions);routerWindow.addEventListener(\"pagehide\",_saveAppliedTransitions);removePageHideEventListener=()=>routerWindow.removeEventListener(\"pagehide\",_saveAppliedTransitions);}// Kick off initial data load if needed.  Use Pop to avoid modifying history\n// Note we don't do any handling of lazy here.  For SPA's it'll get handled\n// in the normal navigation flow.  For SSR it's expected that lazy modules are\n// resolved prior to router creation since we can't go into a fallbackElement\n// UI for SSR'd apps\nif(!state.initialized){startNavigation(Action.Pop,state.location,{initialHydration:true});}return router;}// Clean up a router and it's side effects\nfunction dispose(){if(unlistenHistory){unlistenHistory();}if(removePageHideEventListener){removePageHideEventListener();}subscribers.clear();pendingNavigationController&&pendingNavigationController.abort();state.fetchers.forEach((_,key)=>deleteFetcher(key));state.blockers.forEach((_,key)=>deleteBlocker(key));}// Subscribe to state updates for the router\nfunction subscribe(fn){subscribers.add(fn);return()=>subscribers.delete(fn);}// Update our state and notify the calling context of the change\nfunction updateState(newState,opts){if(opts===void 0){opts={};}state=_extends({},state,newState);// Prep fetcher cleanup so we can tell the UI which fetcher data entries\n// can be removed\nlet completedFetchers=[];let deletedFetchersKeys=[];if(future.v7_fetcherPersist){state.fetchers.forEach((fetcher,key)=>{if(fetcher.state===\"idle\"){if(deletedFetchers.has(key)){// Unmounted from the UI and can be totally removed\ndeletedFetchersKeys.push(key);}else{// Returned to idle but still mounted in the UI, so semi-remains for\n// revalidations and such\ncompletedFetchers.push(key);}}});}// Iterate over a local copy so that if flushSync is used and we end up\n// removing and adding a new subscriber due to the useCallback dependencies,\n// we don't get ourselves into a loop calling the new subscriber immediately\n[...subscribers].forEach(subscriber=>subscriber(state,{deletedFetchers:deletedFetchersKeys,unstable_viewTransitionOpts:opts.viewTransitionOpts,unstable_flushSync:opts.flushSync===true}));// Remove idle fetchers from state since we only care about in-flight fetchers.\nif(future.v7_fetcherPersist){completedFetchers.forEach(key=>state.fetchers.delete(key));deletedFetchersKeys.forEach(key=>deleteFetcher(key));}}// Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n// and setting state.[historyAction/location/matches] to the new route.\n// - Location is a required param\n// - Navigation will always be set to IDLE_NAVIGATION\n// - Can pass any other state in newState\nfunction completeNavigation(location,newState,_temp){var _location$state,_location$state2;let{flushSync}=_temp===void 0?{}:_temp;// Deduce if we're in a loading/actionReload state:\n// - We have committed actionData in the store\n// - The current navigation was a mutation submission\n// - We're past the submitting state and into the loading state\n// - The location being loaded is not the result of a redirect\nlet isActionReload=state.actionData!=null&&state.navigation.formMethod!=null&&isMutationMethod(state.navigation.formMethod)&&state.navigation.state===\"loading\"&&((_location$state=location.state)==null?void 0:_location$state._isRedirect)!==true;let actionData;if(newState.actionData){if(Object.keys(newState.actionData).length>0){actionData=newState.actionData;}else{// Empty actionData -> clear prior actionData due to an action error\nactionData=null;}}else if(isActionReload){// Keep the current data if we're wrapping up the action reload\nactionData=state.actionData;}else{// Clear actionData on any other completed navigations\nactionData=null;}// Always preserve any existing loaderData from re-used routes\nlet loaderData=newState.loaderData?mergeLoaderData(state.loaderData,newState.loaderData,newState.matches||[],newState.errors):state.loaderData;// On a successful navigation we can assume we got through all blockers\n// so we can start fresh\nlet blockers=state.blockers;if(blockers.size>0){blockers=new Map(blockers);blockers.forEach((_,k)=>blockers.set(k,IDLE_BLOCKER));}// Always respect the user flag.  Otherwise don't reset on mutation\n// submission navigations unless they redirect\nlet preventScrollReset=pendingPreventScrollReset===true||state.navigation.formMethod!=null&&isMutationMethod(state.navigation.formMethod)&&((_location$state2=location.state)==null?void 0:_location$state2._isRedirect)!==true;if(inFlightDataRoutes){dataRoutes=inFlightDataRoutes;inFlightDataRoutes=undefined;}if(isUninterruptedRevalidation);else if(pendingAction===Action.Pop);else if(pendingAction===Action.Push){init.history.push(location,location.state);}else if(pendingAction===Action.Replace){init.history.replace(location,location.state);}let viewTransitionOpts;// On POP, enable transitions if they were enabled on the original navigation\nif(pendingAction===Action.Pop){// Forward takes precedence so they behave like the original navigation\nlet priorPaths=appliedViewTransitions.get(state.location.pathname);if(priorPaths&&priorPaths.has(location.pathname)){viewTransitionOpts={currentLocation:state.location,nextLocation:location};}else if(appliedViewTransitions.has(location.pathname)){// If we don't have a previous forward nav, assume we're popping back to\n// the new location and enable if that location previously enabled\nviewTransitionOpts={currentLocation:location,nextLocation:state.location};}}else if(pendingViewTransitionEnabled){// Store the applied transition on PUSH/REPLACE\nlet toPaths=appliedViewTransitions.get(state.location.pathname);if(toPaths){toPaths.add(location.pathname);}else{toPaths=new Set([location.pathname]);appliedViewTransitions.set(state.location.pathname,toPaths);}viewTransitionOpts={currentLocation:state.location,nextLocation:location};}updateState(_extends({},newState,{actionData,loaderData,historyAction:pendingAction,location,initialized:true,navigation:IDLE_NAVIGATION,revalidation:\"idle\",restoreScrollPosition:getSavedScrollPosition(location,newState.matches||state.matches),preventScrollReset,blockers}),{viewTransitionOpts,flushSync:flushSync===true});// Reset stateful navigation vars\npendingAction=Action.Pop;pendingPreventScrollReset=false;pendingViewTransitionEnabled=false;isUninterruptedRevalidation=false;isRevalidationRequired=false;cancelledDeferredRoutes=[];cancelledFetcherLoads=[];}// Trigger a navigation event, which can either be a numerical POP or a PUSH\n// replace with an optional submission\nasync function navigate(to,opts){if(typeof to===\"number\"){init.history.go(to);return;}let normalizedPath=normalizeTo(state.location,state.matches,basename,future.v7_prependBasename,to,future.v7_relativeSplatPath,opts==null?void 0:opts.fromRouteId,opts==null?void 0:opts.relative);let{path,submission,error}=normalizeNavigateOptions(future.v7_normalizeFormMethod,false,normalizedPath,opts);let currentLocation=state.location;let nextLocation=createLocation(state.location,path,opts&&opts.state);// When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n// URL from window.location, so we need to encode it here so the behavior\n// remains the same as POP and non-data-router usages.  new URL() does all\n// the same encoding we'd get from a history.pushState/window.location read\n// without having to touch history\nnextLocation=_extends({},nextLocation,init.history.encodeLocation(nextLocation));let userReplace=opts&&opts.replace!=null?opts.replace:undefined;let historyAction=Action.Push;if(userReplace===true){historyAction=Action.Replace;}else if(userReplace===false);else if(submission!=null&&isMutationMethod(submission.formMethod)&&submission.formAction===state.location.pathname+state.location.search){// By default on submissions to the current location we REPLACE so that\n// users don't have to double-click the back button to get to the prior\n// location.  If the user redirects to a different location from the\n// action/loader this will be ignored and the redirect will be a PUSH\nhistoryAction=Action.Replace;}let preventScrollReset=opts&&\"preventScrollReset\"in opts?opts.preventScrollReset===true:undefined;let flushSync=(opts&&opts.unstable_flushSync)===true;let blockerKey=shouldBlockNavigation({currentLocation,nextLocation,historyAction});if(blockerKey){// Put the blocker into a blocked state\nupdateBlocker(blockerKey,{state:\"blocked\",location:nextLocation,proceed(){updateBlocker(blockerKey,{state:\"proceeding\",proceed:undefined,reset:undefined,location:nextLocation});// Send the same navigation through\nnavigate(to,opts);},reset(){let blockers=new Map(state.blockers);blockers.set(blockerKey,IDLE_BLOCKER);updateState({blockers});}});return;}return await startNavigation(historyAction,nextLocation,{submission,// Send through the formData serialization error if we have one so we can\n// render at the right error boundary after we match routes\npendingError:error,preventScrollReset,replace:opts&&opts.replace,enableViewTransition:opts&&opts.unstable_viewTransition,flushSync});}// Revalidate all current loaders.  If a navigation is in progress or if this\n// is interrupted by a navigation, allow this to \"succeed\" by calling all\n// loaders during the next loader round\nfunction revalidate(){interruptActiveLoads();updateState({revalidation:\"loading\"});// If we're currently submitting an action, we don't need to start a new\n// navigation, we'll just let the follow up loader execution call all loaders\nif(state.navigation.state===\"submitting\"){return;}// If we're currently in an idle state, start a new navigation for the current\n// action/location and mark it as uninterrupted, which will skip the history\n// update in completeNavigation\nif(state.navigation.state===\"idle\"){startNavigation(state.historyAction,state.location,{startUninterruptedRevalidation:true});return;}// Otherwise, if we're currently in a loading state, just start a new\n// navigation to the navigation.location but do not trigger an uninterrupted\n// revalidation so that history correctly updates once the navigation completes\nstartNavigation(pendingAction||state.historyAction,state.navigation.location,{overrideNavigation:state.navigation});}// Start a navigation to the given action/location.  Can optionally provide a\n// overrideNavigation which will override the normalLoad in the case of a redirect\n// navigation\nasync function startNavigation(historyAction,location,opts){// Abort any in-progress navigations and start a new one. Unset any ongoing\n// uninterrupted revalidations unless told otherwise, since we want this\n// new navigation to update history normally\npendingNavigationController&&pendingNavigationController.abort();pendingNavigationController=null;pendingAction=historyAction;isUninterruptedRevalidation=(opts&&opts.startUninterruptedRevalidation)===true;// Save the current scroll position every time we start a new navigation,\n// and track whether we should reset scroll on completion\nsaveScrollPosition(state.location,state.matches);pendingPreventScrollReset=(opts&&opts.preventScrollReset)===true;pendingViewTransitionEnabled=(opts&&opts.enableViewTransition)===true;let routesToUse=inFlightDataRoutes||dataRoutes;let loadingNavigation=opts&&opts.overrideNavigation;let matches=matchRoutes(routesToUse,location,basename);let flushSync=(opts&&opts.flushSync)===true;// Short circuit with a 404 on the root error boundary if we match nothing\nif(!matches){let error=getInternalRouterError(404,{pathname:location.pathname});let{matches:notFoundMatches,route}=getShortCircuitMatches(routesToUse);// Cancel all pending deferred on 404s since we don't keep any routes\ncancelActiveDeferreds();completeNavigation(location,{matches:notFoundMatches,loaderData:{},errors:{[route.id]:error}},{flushSync});return;}// Short circuit if it's only a hash change and not a revalidation or\n// mutation submission.\n//\n// Ignore on initial page loads because since the initial load will always\n// be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n// which will default to a navigation to /page\nif(state.initialized&&!isRevalidationRequired&&isHashChangeOnly(state.location,location)&&!(opts&&opts.submission&&isMutationMethod(opts.submission.formMethod))){completeNavigation(location,{matches},{flushSync});return;}// Create a controller/Request for this navigation\npendingNavigationController=new AbortController();let request=createClientSideRequest(init.history,location,pendingNavigationController.signal,opts&&opts.submission);let pendingActionResult;if(opts&&opts.pendingError){// If we have a pendingError, it means the user attempted a GET submission\n// with binary FormData so assign here and skip to handleLoaders.  That\n// way we handle calling loaders above the boundary etc.  It's not really\n// different from an actionError in that sense.\npendingActionResult=[findNearestBoundary(matches).route.id,{type:ResultType.error,error:opts.pendingError}];}else if(opts&&opts.submission&&isMutationMethod(opts.submission.formMethod)){// Call action if we received an action submission\nlet actionResult=await handleAction(request,location,opts.submission,matches,{replace:opts.replace,flushSync});if(actionResult.shortCircuited){return;}pendingActionResult=actionResult.pendingActionResult;loadingNavigation=getLoadingNavigation(location,opts.submission);flushSync=false;// Create a GET request for the loaders\nrequest=createClientSideRequest(init.history,request.url,request.signal);}// Call loaders\nlet{shortCircuited,loaderData,errors}=await handleLoaders(request,location,matches,loadingNavigation,opts&&opts.submission,opts&&opts.fetcherSubmission,opts&&opts.replace,opts&&opts.initialHydration===true,flushSync,pendingActionResult);if(shortCircuited){return;}// Clean up now that the action/loaders have completed.  Don't clean up if\n// we short circuited because pendingNavigationController will have already\n// been assigned to a new controller for the next navigation\npendingNavigationController=null;completeNavigation(location,_extends({matches},getActionDataForCommit(pendingActionResult),{loaderData,errors}));}// Call the action matched by the leaf route for this navigation and handle\n// redirects/errors\nasync function handleAction(request,location,submission,matches,opts){if(opts===void 0){opts={};}interruptActiveLoads();// Put us in a submitting state\nlet navigation=getSubmittingNavigation(location,submission);updateState({navigation},{flushSync:opts.flushSync===true});// Call our action and get the result\nlet result;let actionMatch=getTargetMatch(matches,location);if(!actionMatch.route.action&&!actionMatch.route.lazy){result={type:ResultType.error,error:getInternalRouterError(405,{method:request.method,pathname:location.pathname,routeId:actionMatch.route.id})};}else{let results=await callDataStrategy(\"action\",request,[actionMatch],matches);result=results[0];if(request.signal.aborted){return{shortCircuited:true};}}if(isRedirectResult(result)){let replace;if(opts&&opts.replace!=null){replace=opts.replace;}else{// If the user didn't explicity indicate replace behavior, replace if\n// we redirected to the exact same location we're currently at to avoid\n// double back-buttons\nlet location=normalizeRedirectLocation(result.response.headers.get(\"Location\"),new URL(request.url),basename);replace=location===state.location.pathname+state.location.search;}await startRedirectNavigation(request,result,{submission,replace});return{shortCircuited:true};}if(isDeferredResult(result)){throw getInternalRouterError(400,{type:\"defer-action\"});}if(isErrorResult(result)){// Store off the pending error - we use it to determine which loaders\n// to call and will commit it when we complete the navigation\nlet boundaryMatch=findNearestBoundary(matches,actionMatch.route.id);// By default, all submissions are REPLACE navigations, but if the\n// action threw an error that'll be rendered in an errorElement, we fall\n// back to PUSH so that the user can use the back button to get back to\n// the pre-submission form location to try again\nif((opts&&opts.replace)!==true){pendingAction=Action.Push;}return{pendingActionResult:[boundaryMatch.route.id,result]};}return{pendingActionResult:[actionMatch.route.id,result]};}// Call all applicable loaders for the given matches, handling redirects,\n// errors, etc.\nasync function handleLoaders(request,location,matches,overrideNavigation,submission,fetcherSubmission,replace,initialHydration,flushSync,pendingActionResult){// Figure out the right navigation we want to use for data loading\nlet loadingNavigation=overrideNavigation||getLoadingNavigation(location,submission);// If this was a redirect from an action we don't have a \"submission\" but\n// we have it on the loading navigation so use that if available\nlet activeSubmission=submission||fetcherSubmission||getSubmissionFromNavigation(loadingNavigation);let routesToUse=inFlightDataRoutes||dataRoutes;let[matchesToLoad,revalidatingFetchers]=getMatchesToLoad(init.history,state,matches,activeSubmission,location,future.v7_partialHydration&&initialHydration===true,future.unstable_skipActionErrorRevalidation,isRevalidationRequired,cancelledDeferredRoutes,cancelledFetcherLoads,deletedFetchers,fetchLoadMatches,fetchRedirectIds,routesToUse,basename,pendingActionResult);// Cancel pending deferreds for no-longer-matched routes or routes we're\n// about to reload.  Note that if this is an action reload we would have\n// already cancelled all pending deferreds so this would be a no-op\ncancelActiveDeferreds(routeId=>!(matches&&matches.some(m=>m.route.id===routeId))||matchesToLoad&&matchesToLoad.some(m=>m.route.id===routeId));pendingNavigationLoadId=++incrementingLoadId;// Short circuit if we have no loaders to run\nif(matchesToLoad.length===0&&revalidatingFetchers.length===0){let updatedFetchers=markFetchRedirectsDone();completeNavigation(location,_extends({matches,loaderData:{},// Commit pending error if we're short circuiting\nerrors:pendingActionResult&&isErrorResult(pendingActionResult[1])?{[pendingActionResult[0]]:pendingActionResult[1].error}:null},getActionDataForCommit(pendingActionResult),updatedFetchers?{fetchers:new Map(state.fetchers)}:{}),{flushSync});return{shortCircuited:true};}// If this is an uninterrupted revalidation, we remain in our current idle\n// state.  If not, we need to switch to our loading state and load data,\n// preserving any new action data or existing action data (in the case of\n// a revalidation interrupting an actionReload)\n// If we have partialHydration enabled, then don't update the state for the\n// initial data load since it's not a \"navigation\"\nif(!isUninterruptedRevalidation&&(!future.v7_partialHydration||!initialHydration)){revalidatingFetchers.forEach(rf=>{let fetcher=state.fetchers.get(rf.key);let revalidatingFetcher=getLoadingFetcher(undefined,fetcher?fetcher.data:undefined);state.fetchers.set(rf.key,revalidatingFetcher);});let actionData;if(pendingActionResult&&!isErrorResult(pendingActionResult[1])){// This is cast to `any` currently because `RouteData`uses any and it\n// would be a breaking change to use any.\n// TODO: v7 - change `RouteData` to use `unknown` instead of `any`\nactionData={[pendingActionResult[0]]:pendingActionResult[1].data};}else if(state.actionData){if(Object.keys(state.actionData).length===0){actionData=null;}else{actionData=state.actionData;}}updateState(_extends({navigation:loadingNavigation},actionData!==undefined?{actionData}:{},revalidatingFetchers.length>0?{fetchers:new Map(state.fetchers)}:{}),{flushSync});}revalidatingFetchers.forEach(rf=>{if(fetchControllers.has(rf.key)){abortFetcher(rf.key);}if(rf.controller){// Fetchers use an independent AbortController so that aborting a fetcher\n// (via deleteFetcher) does not abort the triggering navigation that\n// triggered the revalidation\nfetchControllers.set(rf.key,rf.controller);}});// Proxy navigation abort through to revalidation fetchers\nlet abortPendingFetchRevalidations=()=>revalidatingFetchers.forEach(f=>abortFetcher(f.key));if(pendingNavigationController){pendingNavigationController.signal.addEventListener(\"abort\",abortPendingFetchRevalidations);}let{loaderResults,fetcherResults}=await callLoadersAndMaybeResolveData(state.matches,matches,matchesToLoad,revalidatingFetchers,request);if(request.signal.aborted){return{shortCircuited:true};}// Clean up _after_ loaders have completed.  Don't clean up if we short\n// circuited because fetchControllers would have been aborted and\n// reassigned to new controllers for the next navigation\nif(pendingNavigationController){pendingNavigationController.signal.removeEventListener(\"abort\",abortPendingFetchRevalidations);}revalidatingFetchers.forEach(rf=>fetchControllers.delete(rf.key));// If any loaders returned a redirect Response, start a new REPLACE navigation\nlet redirect=findRedirect([...loaderResults,...fetcherResults]);if(redirect){if(redirect.idx>=matchesToLoad.length){// If this redirect came from a fetcher make sure we mark it in\n// fetchRedirectIds so it doesn't get revalidated on the next set of\n// loader executions\nlet fetcherKey=revalidatingFetchers[redirect.idx-matchesToLoad.length].key;fetchRedirectIds.add(fetcherKey);}await startRedirectNavigation(request,redirect.result,{replace});return{shortCircuited:true};}// Process and commit output from loaders\nlet{loaderData,errors}=processLoaderData(state,matches,matchesToLoad,loaderResults,pendingActionResult,revalidatingFetchers,fetcherResults,activeDeferreds);// Wire up subscribers to update loaderData as promises settle\nactiveDeferreds.forEach((deferredData,routeId)=>{deferredData.subscribe(aborted=>{// Note: No need to updateState here since the TrackedPromise on\n// loaderData is stable across resolve/reject\n// Remove this instance if we were aborted or if promises have settled\nif(aborted||deferredData.done){activeDeferreds.delete(routeId);}});});// During partial hydration, preserve SSR errors for routes that don't re-run\nif(future.v7_partialHydration&&initialHydration&&state.errors){Object.entries(state.errors).filter(_ref2=>{let[id]=_ref2;return!matchesToLoad.some(m=>m.route.id===id);}).forEach(_ref3=>{let[routeId,error]=_ref3;errors=Object.assign(errors||{},{[routeId]:error});});}let updatedFetchers=markFetchRedirectsDone();let didAbortFetchLoads=abortStaleFetchLoads(pendingNavigationLoadId);let shouldUpdateFetchers=updatedFetchers||didAbortFetchLoads||revalidatingFetchers.length>0;return _extends({loaderData,errors},shouldUpdateFetchers?{fetchers:new Map(state.fetchers)}:{});}// Trigger a fetcher load/submit for the given fetcher key\nfunction fetch(key,routeId,href,opts){if(isServer){throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \"+\"You are likely calling a useFetcher() method in the body of your component. \"+\"Try moving it to a useEffect or a callback.\");}if(fetchControllers.has(key))abortFetcher(key);let flushSync=(opts&&opts.unstable_flushSync)===true;let routesToUse=inFlightDataRoutes||dataRoutes;let normalizedPath=normalizeTo(state.location,state.matches,basename,future.v7_prependBasename,href,future.v7_relativeSplatPath,routeId,opts==null?void 0:opts.relative);let matches=matchRoutes(routesToUse,normalizedPath,basename);if(!matches){setFetcherError(key,routeId,getInternalRouterError(404,{pathname:normalizedPath}),{flushSync});return;}let{path,submission,error}=normalizeNavigateOptions(future.v7_normalizeFormMethod,true,normalizedPath,opts);if(error){setFetcherError(key,routeId,error,{flushSync});return;}let match=getTargetMatch(matches,path);pendingPreventScrollReset=(opts&&opts.preventScrollReset)===true;if(submission&&isMutationMethod(submission.formMethod)){handleFetcherAction(key,routeId,path,match,matches,flushSync,submission);return;}// Store off the match so we can call it's shouldRevalidate on subsequent\n// revalidations\nfetchLoadMatches.set(key,{routeId,path});handleFetcherLoader(key,routeId,path,match,matches,flushSync,submission);}// Call the action for the matched fetcher.submit(), and then handle redirects,\n// errors, and revalidation\nasync function handleFetcherAction(key,routeId,path,match,requestMatches,flushSync,submission){interruptActiveLoads();fetchLoadMatches.delete(key);if(!match.route.action&&!match.route.lazy){let error=getInternalRouterError(405,{method:submission.formMethod,pathname:path,routeId:routeId});setFetcherError(key,routeId,error,{flushSync});return;}// Put this fetcher into it's submitting state\nlet existingFetcher=state.fetchers.get(key);updateFetcherState(key,getSubmittingFetcher(submission,existingFetcher),{flushSync});// Call the action for the fetcher\nlet abortController=new AbortController();let fetchRequest=createClientSideRequest(init.history,path,abortController.signal,submission);fetchControllers.set(key,abortController);let originatingLoadId=incrementingLoadId;let actionResults=await callDataStrategy(\"action\",fetchRequest,[match],requestMatches);let actionResult=actionResults[0];if(fetchRequest.signal.aborted){// We can delete this so long as we weren't aborted by our own fetcher\n// re-submit which would have put _new_ controller is in fetchControllers\nif(fetchControllers.get(key)===abortController){fetchControllers.delete(key);}return;}// When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n// or redirects processed for unmounted fetchers so we just revert them to\n// idle\nif(future.v7_fetcherPersist&&deletedFetchers.has(key)){if(isRedirectResult(actionResult)||isErrorResult(actionResult)){updateFetcherState(key,getDoneFetcher(undefined));return;}// Let SuccessResult's fall through for revalidation\n}else{if(isRedirectResult(actionResult)){fetchControllers.delete(key);if(pendingNavigationLoadId>originatingLoadId){// A new navigation was kicked off after our action started, so that\n// should take precedence over this redirect navigation.  We already\n// set isRevalidationRequired so all loaders for the new route should\n// fire unless opted out via shouldRevalidate\nupdateFetcherState(key,getDoneFetcher(undefined));return;}else{fetchRedirectIds.add(key);updateFetcherState(key,getLoadingFetcher(submission));return startRedirectNavigation(fetchRequest,actionResult,{fetcherSubmission:submission});}}// Process any non-redirect errors thrown\nif(isErrorResult(actionResult)){setFetcherError(key,routeId,actionResult.error);return;}}if(isDeferredResult(actionResult)){throw getInternalRouterError(400,{type:\"defer-action\"});}// Start the data load for current matches, or the next location if we're\n// in the middle of a navigation\nlet nextLocation=state.navigation.location||state.location;let revalidationRequest=createClientSideRequest(init.history,nextLocation,abortController.signal);let routesToUse=inFlightDataRoutes||dataRoutes;let matches=state.navigation.state!==\"idle\"?matchRoutes(routesToUse,state.navigation.location,basename):state.matches;invariant(matches,\"Didn't find any matches after fetcher action\");let loadId=++incrementingLoadId;fetchReloadIds.set(key,loadId);let loadFetcher=getLoadingFetcher(submission,actionResult.data);state.fetchers.set(key,loadFetcher);let[matchesToLoad,revalidatingFetchers]=getMatchesToLoad(init.history,state,matches,submission,nextLocation,false,future.unstable_skipActionErrorRevalidation,isRevalidationRequired,cancelledDeferredRoutes,cancelledFetcherLoads,deletedFetchers,fetchLoadMatches,fetchRedirectIds,routesToUse,basename,[match.route.id,actionResult]);// Put all revalidating fetchers into the loading state, except for the\n// current fetcher which we want to keep in it's current loading state which\n// contains it's action submission info + action data\nrevalidatingFetchers.filter(rf=>rf.key!==key).forEach(rf=>{let staleKey=rf.key;let existingFetcher=state.fetchers.get(staleKey);let revalidatingFetcher=getLoadingFetcher(undefined,existingFetcher?existingFetcher.data:undefined);state.fetchers.set(staleKey,revalidatingFetcher);if(fetchControllers.has(staleKey)){abortFetcher(staleKey);}if(rf.controller){fetchControllers.set(staleKey,rf.controller);}});updateState({fetchers:new Map(state.fetchers)});let abortPendingFetchRevalidations=()=>revalidatingFetchers.forEach(rf=>abortFetcher(rf.key));abortController.signal.addEventListener(\"abort\",abortPendingFetchRevalidations);let{loaderResults,fetcherResults}=await callLoadersAndMaybeResolveData(state.matches,matches,matchesToLoad,revalidatingFetchers,revalidationRequest);if(abortController.signal.aborted){return;}abortController.signal.removeEventListener(\"abort\",abortPendingFetchRevalidations);fetchReloadIds.delete(key);fetchControllers.delete(key);revalidatingFetchers.forEach(r=>fetchControllers.delete(r.key));let redirect=findRedirect([...loaderResults,...fetcherResults]);if(redirect){if(redirect.idx>=matchesToLoad.length){// If this redirect came from a fetcher make sure we mark it in\n// fetchRedirectIds so it doesn't get revalidated on the next set of\n// loader executions\nlet fetcherKey=revalidatingFetchers[redirect.idx-matchesToLoad.length].key;fetchRedirectIds.add(fetcherKey);}return startRedirectNavigation(revalidationRequest,redirect.result);}// Process and commit output from loaders\nlet{loaderData,errors}=processLoaderData(state,state.matches,matchesToLoad,loaderResults,undefined,revalidatingFetchers,fetcherResults,activeDeferreds);// Since we let revalidations complete even if the submitting fetcher was\n// deleted, only put it back to idle if it hasn't been deleted\nif(state.fetchers.has(key)){let doneFetcher=getDoneFetcher(actionResult.data);state.fetchers.set(key,doneFetcher);}abortStaleFetchLoads(loadId);// If we are currently in a navigation loading state and this fetcher is\n// more recent than the navigation, we want the newer data so abort the\n// navigation and complete it with the fetcher data\nif(state.navigation.state===\"loading\"&&loadId>pendingNavigationLoadId){invariant(pendingAction,\"Expected pending action\");pendingNavigationController&&pendingNavigationController.abort();completeNavigation(state.navigation.location,{matches,loaderData,errors,fetchers:new Map(state.fetchers)});}else{// otherwise just update with the fetcher data, preserving any existing\n// loaderData for loaders that did not need to reload.  We have to\n// manually merge here since we aren't going through completeNavigation\nupdateState({errors,loaderData:mergeLoaderData(state.loaderData,loaderData,matches,errors),fetchers:new Map(state.fetchers)});isRevalidationRequired=false;}}// Call the matched loader for fetcher.load(), handling redirects, errors, etc.\nasync function handleFetcherLoader(key,routeId,path,match,matches,flushSync,submission){let existingFetcher=state.fetchers.get(key);updateFetcherState(key,getLoadingFetcher(submission,existingFetcher?existingFetcher.data:undefined),{flushSync});// Call the loader for this fetcher route match\nlet abortController=new AbortController();let fetchRequest=createClientSideRequest(init.history,path,abortController.signal);fetchControllers.set(key,abortController);let originatingLoadId=incrementingLoadId;let results=await callDataStrategy(\"loader\",fetchRequest,[match],matches);let result=results[0];// Deferred isn't supported for fetcher loads, await everything and treat it\n// as a normal load.  resolveDeferredData will return undefined if this\n// fetcher gets aborted, so we just leave result untouched and short circuit\n// below if that happens\nif(isDeferredResult(result)){result=(await resolveDeferredData(result,fetchRequest.signal,true))||result;}// We can delete this so long as we weren't aborted by our our own fetcher\n// re-load which would have put _new_ controller is in fetchControllers\nif(fetchControllers.get(key)===abortController){fetchControllers.delete(key);}if(fetchRequest.signal.aborted){return;}// We don't want errors bubbling up or redirects followed for unmounted\n// fetchers, so short circuit here if it was removed from the UI\nif(deletedFetchers.has(key)){updateFetcherState(key,getDoneFetcher(undefined));return;}// If the loader threw a redirect Response, start a new REPLACE navigation\nif(isRedirectResult(result)){if(pendingNavigationLoadId>originatingLoadId){// A new navigation was kicked off after our loader started, so that\n// should take precedence over this redirect navigation\nupdateFetcherState(key,getDoneFetcher(undefined));return;}else{fetchRedirectIds.add(key);await startRedirectNavigation(fetchRequest,result);return;}}// Process any non-redirect errors thrown\nif(isErrorResult(result)){setFetcherError(key,routeId,result.error);return;}invariant(!isDeferredResult(result),\"Unhandled fetcher deferred data\");// Put the fetcher back into an idle state\nupdateFetcherState(key,getDoneFetcher(result.data));}/**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */async function startRedirectNavigation(request,redirect,_temp2){let{submission,fetcherSubmission,replace}=_temp2===void 0?{}:_temp2;if(redirect.response.headers.has(\"X-Remix-Revalidate\")){isRevalidationRequired=true;}let location=redirect.response.headers.get(\"Location\");invariant(location,\"Expected a Location header on the redirect Response\");location=normalizeRedirectLocation(location,new URL(request.url),basename);let redirectLocation=createLocation(state.location,location,{_isRedirect:true});if(isBrowser){let isDocumentReload=false;if(redirect.response.headers.has(\"X-Remix-Reload-Document\")){// Hard reload if the response contained X-Remix-Reload-Document\nisDocumentReload=true;}else if(ABSOLUTE_URL_REGEX.test(location)){const url=init.history.createURL(location);isDocumentReload=// Hard reload if it's an absolute URL to a new origin\nurl.origin!==routerWindow.location.origin||// Hard reload if it's an absolute URL that does not match our basename\nstripBasename(url.pathname,basename)==null;}if(isDocumentReload){if(replace){routerWindow.location.replace(location);}else{routerWindow.location.assign(location);}return;}}// There's no need to abort on redirects, since we don't detect the\n// redirect until the action/loaders have settled\npendingNavigationController=null;let redirectHistoryAction=replace===true?Action.Replace:Action.Push;// Use the incoming submission if provided, fallback on the active one in\n// state.navigation\nlet{formMethod,formAction,formEncType}=state.navigation;if(!submission&&!fetcherSubmission&&formMethod&&formAction&&formEncType){submission=getSubmissionFromNavigation(state.navigation);}// If this was a 307/308 submission we want to preserve the HTTP method and\n// re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n// redirected location\nlet activeSubmission=submission||fetcherSubmission;if(redirectPreserveMethodStatusCodes.has(redirect.response.status)&&activeSubmission&&isMutationMethod(activeSubmission.formMethod)){await startNavigation(redirectHistoryAction,redirectLocation,{submission:_extends({},activeSubmission,{formAction:location}),// Preserve this flag across redirects\npreventScrollReset:pendingPreventScrollReset});}else{// If we have a navigation submission, we will preserve it through the\n// redirect navigation\nlet overrideNavigation=getLoadingNavigation(redirectLocation,submission);await startNavigation(redirectHistoryAction,redirectLocation,{overrideNavigation,// Send fetcher submissions through for shouldRevalidate\nfetcherSubmission,// Preserve this flag across redirects\npreventScrollReset:pendingPreventScrollReset});}}// Utility wrapper for calling dataStrategy client-side without having to\n// pass around the manifest, mapRouteProperties, etc.\nasync function callDataStrategy(type,request,matchesToLoad,matches){try{let results=await callDataStrategyImpl(dataStrategyImpl,type,request,matchesToLoad,matches,manifest,mapRouteProperties);return await Promise.all(results.map((result,i)=>{if(isRedirectHandlerResult(result)){let response=result.result;return{type:ResultType.redirect,response:normalizeRelativeRoutingRedirectResponse(response,request,matchesToLoad[i].route.id,matches,basename,future.v7_relativeSplatPath)};}return convertHandlerResultToDataResult(result);}));}catch(e){// If the outer dataStrategy method throws, just return the error for all\n// matches - and it'll naturally bubble to the root\nreturn matchesToLoad.map(()=>({type:ResultType.error,error:e}));}}async function callLoadersAndMaybeResolveData(currentMatches,matches,matchesToLoad,fetchersToLoad,request){let[loaderResults,...fetcherResults]=await Promise.all([matchesToLoad.length?callDataStrategy(\"loader\",request,matchesToLoad,matches):[],...fetchersToLoad.map(f=>{if(f.matches&&f.match&&f.controller){let fetcherRequest=createClientSideRequest(init.history,f.path,f.controller.signal);return callDataStrategy(\"loader\",fetcherRequest,[f.match],f.matches).then(r=>r[0]);}else{return Promise.resolve({type:ResultType.error,error:getInternalRouterError(404,{pathname:f.path})});}})]);await Promise.all([resolveDeferredResults(currentMatches,matchesToLoad,loaderResults,loaderResults.map(()=>request.signal),false,state.loaderData),resolveDeferredResults(currentMatches,fetchersToLoad.map(f=>f.match),fetcherResults,fetchersToLoad.map(f=>f.controller?f.controller.signal:null),true)]);return{loaderResults,fetcherResults};}function interruptActiveLoads(){// Every interruption triggers a revalidation\nisRevalidationRequired=true;// Cancel pending route-level deferreds and mark cancelled routes for\n// revalidation\ncancelledDeferredRoutes.push(...cancelActiveDeferreds());// Abort in-flight fetcher loads\nfetchLoadMatches.forEach((_,key)=>{if(fetchControllers.has(key)){cancelledFetcherLoads.push(key);abortFetcher(key);}});}function updateFetcherState(key,fetcher,opts){if(opts===void 0){opts={};}state.fetchers.set(key,fetcher);updateState({fetchers:new Map(state.fetchers)},{flushSync:(opts&&opts.flushSync)===true});}function setFetcherError(key,routeId,error,opts){if(opts===void 0){opts={};}let boundaryMatch=findNearestBoundary(state.matches,routeId);deleteFetcher(key);updateState({errors:{[boundaryMatch.route.id]:error},fetchers:new Map(state.fetchers)},{flushSync:(opts&&opts.flushSync)===true});}function getFetcher(key){if(future.v7_fetcherPersist){activeFetchers.set(key,(activeFetchers.get(key)||0)+1);// If this fetcher was previously marked for deletion, unmark it since we\n// have a new instance\nif(deletedFetchers.has(key)){deletedFetchers.delete(key);}}return state.fetchers.get(key)||IDLE_FETCHER;}function deleteFetcher(key){let fetcher=state.fetchers.get(key);// Don't abort the controller if this is a deletion of a fetcher.submit()\n// in it's loading phase since - we don't want to abort the corresponding\n// revalidation and want them to complete and land\nif(fetchControllers.has(key)&&!(fetcher&&fetcher.state===\"loading\"&&fetchReloadIds.has(key))){abortFetcher(key);}fetchLoadMatches.delete(key);fetchReloadIds.delete(key);fetchRedirectIds.delete(key);deletedFetchers.delete(key);state.fetchers.delete(key);}function deleteFetcherAndUpdateState(key){if(future.v7_fetcherPersist){let count=(activeFetchers.get(key)||0)-1;if(count<=0){activeFetchers.delete(key);deletedFetchers.add(key);}else{activeFetchers.set(key,count);}}else{deleteFetcher(key);}updateState({fetchers:new Map(state.fetchers)});}function abortFetcher(key){let controller=fetchControllers.get(key);invariant(controller,\"Expected fetch controller: \"+key);controller.abort();fetchControllers.delete(key);}function markFetchersDone(keys){for(let key of keys){let fetcher=getFetcher(key);let doneFetcher=getDoneFetcher(fetcher.data);state.fetchers.set(key,doneFetcher);}}function markFetchRedirectsDone(){let doneKeys=[];let updatedFetchers=false;for(let key of fetchRedirectIds){let fetcher=state.fetchers.get(key);invariant(fetcher,\"Expected fetcher: \"+key);if(fetcher.state===\"loading\"){fetchRedirectIds.delete(key);doneKeys.push(key);updatedFetchers=true;}}markFetchersDone(doneKeys);return updatedFetchers;}function abortStaleFetchLoads(landedId){let yeetedKeys=[];for(let[key,id]of fetchReloadIds){if(id<landedId){let fetcher=state.fetchers.get(key);invariant(fetcher,\"Expected fetcher: \"+key);if(fetcher.state===\"loading\"){abortFetcher(key);fetchReloadIds.delete(key);yeetedKeys.push(key);}}}markFetchersDone(yeetedKeys);return yeetedKeys.length>0;}function getBlocker(key,fn){let blocker=state.blockers.get(key)||IDLE_BLOCKER;if(blockerFunctions.get(key)!==fn){blockerFunctions.set(key,fn);}return blocker;}function deleteBlocker(key){state.blockers.delete(key);blockerFunctions.delete(key);}// Utility function to update blockers, ensuring valid state transitions\nfunction updateBlocker(key,newBlocker){let blocker=state.blockers.get(key)||IDLE_BLOCKER;// Poor mans state machine :)\n// https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\ninvariant(blocker.state===\"unblocked\"&&newBlocker.state===\"blocked\"||blocker.state===\"blocked\"&&newBlocker.state===\"blocked\"||blocker.state===\"blocked\"&&newBlocker.state===\"proceeding\"||blocker.state===\"blocked\"&&newBlocker.state===\"unblocked\"||blocker.state===\"proceeding\"&&newBlocker.state===\"unblocked\",\"Invalid blocker state transition: \"+blocker.state+\" -> \"+newBlocker.state);let blockers=new Map(state.blockers);blockers.set(key,newBlocker);updateState({blockers});}function shouldBlockNavigation(_ref4){let{currentLocation,nextLocation,historyAction}=_ref4;if(blockerFunctions.size===0){return;}// We ony support a single active blocker at the moment since we don't have\n// any compelling use cases for multi-blocker yet\nif(blockerFunctions.size>1){warning(false,\"A router only supports one blocker at a time\");}let entries=Array.from(blockerFunctions.entries());let[blockerKey,blockerFunction]=entries[entries.length-1];let blocker=state.blockers.get(blockerKey);if(blocker&&blocker.state===\"proceeding\"){// If the blocker is currently proceeding, we don't need to re-check\n// it and can let this navigation continue\nreturn;}// At this point, we know we're unblocked/blocked so we need to check the\n// user-provided blocker function\nif(blockerFunction({currentLocation,nextLocation,historyAction})){return blockerKey;}}function cancelActiveDeferreds(predicate){let cancelledRouteIds=[];activeDeferreds.forEach((dfd,routeId)=>{if(!predicate||predicate(routeId)){// Cancel the deferred - but do not remove from activeDeferreds here -\n// we rely on the subscribers to do that so our tests can assert proper\n// cleanup via _internalActiveDeferreds\ndfd.cancel();cancelledRouteIds.push(routeId);activeDeferreds.delete(routeId);}});return cancelledRouteIds;}// Opt in to capturing and reporting scroll positions during navigations,\n// used by the <ScrollRestoration> component\nfunction enableScrollRestoration(positions,getPosition,getKey){savedScrollPositions=positions;getScrollPosition=getPosition;getScrollRestorationKey=getKey||null;// Perform initial hydration scroll restoration, since we miss the boat on\n// the initial updateState() because we've not yet rendered <ScrollRestoration/>\n// and therefore have no savedScrollPositions available\nif(!initialScrollRestored&&state.navigation===IDLE_NAVIGATION){initialScrollRestored=true;let y=getSavedScrollPosition(state.location,state.matches);if(y!=null){updateState({restoreScrollPosition:y});}}return()=>{savedScrollPositions=null;getScrollPosition=null;getScrollRestorationKey=null;};}function getScrollKey(location,matches){if(getScrollRestorationKey){let key=getScrollRestorationKey(location,matches.map(m=>convertRouteMatchToUiMatch(m,state.loaderData)));return key||location.key;}return location.key;}function saveScrollPosition(location,matches){if(savedScrollPositions&&getScrollPosition){let key=getScrollKey(location,matches);savedScrollPositions[key]=getScrollPosition();}}function getSavedScrollPosition(location,matches){if(savedScrollPositions){let key=getScrollKey(location,matches);let y=savedScrollPositions[key];if(typeof y===\"number\"){return y;}}return null;}function _internalSetRoutes(newRoutes){manifest={};inFlightDataRoutes=convertRoutesToDataRoutes(newRoutes,mapRouteProperties,undefined,manifest);}router={get basename(){return basename;},get future(){return future;},get state(){return state;},get routes(){return dataRoutes;},get window(){return routerWindow;},initialize,subscribe,enableScrollRestoration,navigate,fetch,revalidate,// Passthrough to history-aware createHref used by useHref so we get proper\n// hash-aware URLs in DOM paths\ncreateHref:to=>init.history.createHref(to),encodeLocation:to=>init.history.encodeLocation(to),getFetcher,deleteFetcher:deleteFetcherAndUpdateState,dispose,getBlocker,deleteBlocker,_internalFetchControllers:fetchControllers,_internalActiveDeferreds:activeDeferreds,// TODO: Remove setRoutes, it's temporary to avoid dealing with\n// updating the tree while validating the update algorithm.\n_internalSetRoutes};return router;}//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\nconst UNSAFE_DEFERRED_SYMBOL=Symbol(\"deferred\");function createStaticHandler(routes,opts){invariant(routes.length>0,\"You must provide a non-empty routes array to createStaticHandler\");let manifest={};let basename=(opts?opts.basename:null)||\"/\";let mapRouteProperties;if(opts!=null&&opts.mapRouteProperties){mapRouteProperties=opts.mapRouteProperties;}else if(opts!=null&&opts.detectErrorBoundary){// If they are still using the deprecated version, wrap it with the new API\nlet detectErrorBoundary=opts.detectErrorBoundary;mapRouteProperties=route=>({hasErrorBoundary:detectErrorBoundary(route)});}else{mapRouteProperties=defaultMapRouteProperties;}// Config driven behavior flags\nlet future=_extends({v7_relativeSplatPath:false,v7_throwAbortReason:false},opts?opts.future:null);let dataRoutes=convertRoutesToDataRoutes(routes,mapRouteProperties,undefined,manifest);/**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */async function query(request,_temp3){let{requestContext,skipLoaderErrorBubbling,unstable_dataStrategy}=_temp3===void 0?{}:_temp3;let url=new URL(request.url);let method=request.method;let location=createLocation(\"\",createPath(url),null,\"default\");let matches=matchRoutes(dataRoutes,location,basename);// SSR supports HEAD requests while SPA doesn't\nif(!isValidMethod(method)&&method!==\"HEAD\"){let error=getInternalRouterError(405,{method});let{matches:methodNotAllowedMatches,route}=getShortCircuitMatches(dataRoutes);return{basename,location,matches:methodNotAllowedMatches,loaderData:{},actionData:null,errors:{[route.id]:error},statusCode:error.status,loaderHeaders:{},actionHeaders:{},activeDeferreds:null};}else if(!matches){let error=getInternalRouterError(404,{pathname:location.pathname});let{matches:notFoundMatches,route}=getShortCircuitMatches(dataRoutes);return{basename,location,matches:notFoundMatches,loaderData:{},actionData:null,errors:{[route.id]:error},statusCode:error.status,loaderHeaders:{},actionHeaders:{},activeDeferreds:null};}let result=await queryImpl(request,location,matches,requestContext,unstable_dataStrategy||null,skipLoaderErrorBubbling===true,null);if(isResponse(result)){return result;}// When returning StaticHandlerContext, we patch back in the location here\n// since we need it for React Context.  But this helps keep our submit and\n// loadRouteData operating on a Request instead of a Location\nreturn _extends({location,basename},result);}/**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */async function queryRoute(request,_temp4){let{routeId,requestContext,unstable_dataStrategy}=_temp4===void 0?{}:_temp4;let url=new URL(request.url);let method=request.method;let location=createLocation(\"\",createPath(url),null,\"default\");let matches=matchRoutes(dataRoutes,location,basename);// SSR supports HEAD requests while SPA doesn't\nif(!isValidMethod(method)&&method!==\"HEAD\"&&method!==\"OPTIONS\"){throw getInternalRouterError(405,{method});}else if(!matches){throw getInternalRouterError(404,{pathname:location.pathname});}let match=routeId?matches.find(m=>m.route.id===routeId):getTargetMatch(matches,location);if(routeId&&!match){throw getInternalRouterError(403,{pathname:location.pathname,routeId});}else if(!match){// This should never hit I don't think?\nthrow getInternalRouterError(404,{pathname:location.pathname});}let result=await queryImpl(request,location,matches,requestContext,unstable_dataStrategy||null,false,match);if(isResponse(result)){return result;}let error=result.errors?Object.values(result.errors)[0]:undefined;if(error!==undefined){// If we got back result.errors, that means the loader/action threw\n// _something_ that wasn't a Response, but it's not guaranteed/required\n// to be an `instanceof Error` either, so we have to use throw here to\n// preserve the \"error\" state outside of queryImpl.\nthrow error;}// Pick off the right state value to return\nif(result.actionData){return Object.values(result.actionData)[0];}if(result.loaderData){var _result$activeDeferre;let data=Object.values(result.loaderData)[0];if((_result$activeDeferre=result.activeDeferreds)!=null&&_result$activeDeferre[match.route.id]){data[UNSAFE_DEFERRED_SYMBOL]=result.activeDeferreds[match.route.id];}return data;}return undefined;}async function queryImpl(request,location,matches,requestContext,unstable_dataStrategy,skipLoaderErrorBubbling,routeMatch){invariant(request.signal,\"query()/queryRoute() requests must contain an AbortController signal\");try{if(isMutationMethod(request.method.toLowerCase())){let result=await submit(request,matches,routeMatch||getTargetMatch(matches,location),requestContext,unstable_dataStrategy,skipLoaderErrorBubbling,routeMatch!=null);return result;}let result=await loadRouteData(request,matches,requestContext,unstable_dataStrategy,skipLoaderErrorBubbling,routeMatch);return isResponse(result)?result:_extends({},result,{actionData:null,actionHeaders:{}});}catch(e){// If the user threw/returned a Response in callLoaderOrAction for a\n// `queryRoute` call, we throw the `HandlerResult` to bail out early\n// and then return or throw the raw Response here accordingly\nif(isHandlerResult(e)&&isResponse(e.result)){if(e.type===ResultType.error){throw e.result;}return e.result;}// Redirects are always returned since they don't propagate to catch\n// boundaries\nif(isRedirectResponse(e)){return e;}throw e;}}async function submit(request,matches,actionMatch,requestContext,unstable_dataStrategy,skipLoaderErrorBubbling,isRouteRequest){let result;if(!actionMatch.route.action&&!actionMatch.route.lazy){let error=getInternalRouterError(405,{method:request.method,pathname:new URL(request.url).pathname,routeId:actionMatch.route.id});if(isRouteRequest){throw error;}result={type:ResultType.error,error};}else{let results=await callDataStrategy(\"action\",request,[actionMatch],matches,isRouteRequest,requestContext,unstable_dataStrategy);result=results[0];if(request.signal.aborted){throwStaticHandlerAbortedError(request,isRouteRequest,future);}}if(isRedirectResult(result)){// Uhhhh - this should never happen, we should always throw these from\n// callLoaderOrAction, but the type narrowing here keeps TS happy and we\n// can get back on the \"throw all redirect responses\" train here should\n// this ever happen :/\nthrow new Response(null,{status:result.response.status,headers:{Location:result.response.headers.get(\"Location\")}});}if(isDeferredResult(result)){let error=getInternalRouterError(400,{type:\"defer-action\"});if(isRouteRequest){throw error;}result={type:ResultType.error,error};}if(isRouteRequest){// Note: This should only be non-Response values if we get here, since\n// isRouteRequest should throw any Response received in callLoaderOrAction\nif(isErrorResult(result)){throw result.error;}return{matches:[actionMatch],loaderData:{},actionData:{[actionMatch.route.id]:result.data},errors:null,// Note: statusCode + headers are unused here since queryRoute will\n// return the raw Response or value\nstatusCode:200,loaderHeaders:{},actionHeaders:{},activeDeferreds:null};}// Create a GET request for the loaders\nlet loaderRequest=new Request(request.url,{headers:request.headers,redirect:request.redirect,signal:request.signal});if(isErrorResult(result)){// Store off the pending error - we use it to determine which loaders\n// to call and will commit it when we complete the navigation\nlet boundaryMatch=skipLoaderErrorBubbling?actionMatch:findNearestBoundary(matches,actionMatch.route.id);let context=await loadRouteData(loaderRequest,matches,requestContext,unstable_dataStrategy,skipLoaderErrorBubbling,null,[boundaryMatch.route.id,result]);// action status codes take precedence over loader status codes\nreturn _extends({},context,{statusCode:isRouteErrorResponse(result.error)?result.error.status:result.statusCode!=null?result.statusCode:500,actionData:null,actionHeaders:_extends({},result.headers?{[actionMatch.route.id]:result.headers}:{})});}let context=await loadRouteData(loaderRequest,matches,requestContext,unstable_dataStrategy,skipLoaderErrorBubbling,null);return _extends({},context,{actionData:{[actionMatch.route.id]:result.data}},result.statusCode?{statusCode:result.statusCode}:{},{actionHeaders:result.headers?{[actionMatch.route.id]:result.headers}:{}});}async function loadRouteData(request,matches,requestContext,unstable_dataStrategy,skipLoaderErrorBubbling,routeMatch,pendingActionResult){let isRouteRequest=routeMatch!=null;// Short circuit if we have no loaders to run (queryRoute())\nif(isRouteRequest&&!(routeMatch!=null&&routeMatch.route.loader)&&!(routeMatch!=null&&routeMatch.route.lazy)){throw getInternalRouterError(400,{method:request.method,pathname:new URL(request.url).pathname,routeId:routeMatch==null?void 0:routeMatch.route.id});}let requestMatches=routeMatch?[routeMatch]:pendingActionResult&&isErrorResult(pendingActionResult[1])?getLoaderMatchesUntilBoundary(matches,pendingActionResult[0]):matches;let matchesToLoad=requestMatches.filter(m=>m.route.loader||m.route.lazy);// Short circuit if we have no loaders to run (query())\nif(matchesToLoad.length===0){return{matches,// Add a null for all matched routes for proper revalidation on the client\nloaderData:matches.reduce((acc,m)=>Object.assign(acc,{[m.route.id]:null}),{}),errors:pendingActionResult&&isErrorResult(pendingActionResult[1])?{[pendingActionResult[0]]:pendingActionResult[1].error}:null,statusCode:200,loaderHeaders:{},activeDeferreds:null};}let results=await callDataStrategy(\"loader\",request,matchesToLoad,matches,isRouteRequest,requestContext,unstable_dataStrategy);if(request.signal.aborted){throwStaticHandlerAbortedError(request,isRouteRequest,future);}// Process and commit output from loaders\nlet activeDeferreds=new Map();let context=processRouteLoaderData(matches,matchesToLoad,results,pendingActionResult,activeDeferreds,skipLoaderErrorBubbling);// Add a null for any non-loader matches for proper revalidation on the client\nlet executedLoaders=new Set(matchesToLoad.map(match=>match.route.id));matches.forEach(match=>{if(!executedLoaders.has(match.route.id)){context.loaderData[match.route.id]=null;}});return _extends({},context,{matches,activeDeferreds:activeDeferreds.size>0?Object.fromEntries(activeDeferreds.entries()):null});}// Utility wrapper for calling dataStrategy server-side without having to\n// pass around the manifest, mapRouteProperties, etc.\nasync function callDataStrategy(type,request,matchesToLoad,matches,isRouteRequest,requestContext,unstable_dataStrategy){let results=await callDataStrategyImpl(unstable_dataStrategy||defaultDataStrategy,type,request,matchesToLoad,matches,manifest,mapRouteProperties,requestContext);return await Promise.all(results.map((result,i)=>{if(isRedirectHandlerResult(result)){let response=result.result;// Throw redirects and let the server handle them with an HTTP redirect\nthrow normalizeRelativeRoutingRedirectResponse(response,request,matchesToLoad[i].route.id,matches,basename,future.v7_relativeSplatPath);}if(isResponse(result.result)&&isRouteRequest){// For SSR single-route requests, we want to hand Responses back\n// directly without unwrapping\nthrow result;}return convertHandlerResultToDataResult(result);}));}return{dataRoutes,query,queryRoute};}//#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */function getStaticContextFromError(routes,context,error){let newContext=_extends({},context,{statusCode:isRouteErrorResponse(error)?error.status:500,errors:{[context._deepestRenderedBoundaryId||routes[0].id]:error}});return newContext;}function throwStaticHandlerAbortedError(request,isRouteRequest,future){if(future.v7_throwAbortReason&&request.signal.reason!==undefined){throw request.signal.reason;}let method=isRouteRequest?\"queryRoute\":\"query\";throw new Error(method+\"() call aborted: \"+request.method+\" \"+request.url);}function isSubmissionNavigation(opts){return opts!=null&&(\"formData\"in opts&&opts.formData!=null||\"body\"in opts&&opts.body!==undefined);}function normalizeTo(location,matches,basename,prependBasename,to,v7_relativeSplatPath,fromRouteId,relative){let contextualMatches;let activeRouteMatch;if(fromRouteId){// Grab matches up to the calling route so our route-relative logic is\n// relative to the correct source route\ncontextualMatches=[];for(let match of matches){contextualMatches.push(match);if(match.route.id===fromRouteId){activeRouteMatch=match;break;}}}else{contextualMatches=matches;activeRouteMatch=matches[matches.length-1];}// Resolve the relative path\nlet path=resolveTo(to?to:\".\",getResolveToMatches(contextualMatches,v7_relativeSplatPath),stripBasename(location.pathname,basename)||location.pathname,relative===\"path\");// When `to` is not specified we inherit search/hash from the current\n// location, unlike when to=\".\" and we just inherit the path.\n// See https://github.com/remix-run/remix/issues/927\nif(to==null){path.search=location.search;path.hash=location.hash;}// Add an ?index param for matched index routes if we don't already have one\nif((to==null||to===\"\"||to===\".\")&&activeRouteMatch&&activeRouteMatch.route.index&&!hasNakedIndexQuery(path.search)){path.search=path.search?path.search.replace(/^\\?/,\"?index&\"):\"?index\";}// If we're operating within a basename, prepend it to the pathname.  If\n// this is a root navigation, then just use the raw basename which allows\n// the basename to have full control over the presence of a trailing slash\n// on root actions\nif(prependBasename&&basename!==\"/\"){path.pathname=path.pathname===\"/\"?basename:joinPaths([basename,path.pathname]);}return createPath(path);}// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(normalizeFormMethod,isFetcher,path,opts){// Return location verbatim on non-submission navigations\nif(!opts||!isSubmissionNavigation(opts)){return{path};}if(opts.formMethod&&!isValidMethod(opts.formMethod)){return{path,error:getInternalRouterError(405,{method:opts.formMethod})};}let getInvalidBodyError=()=>({path,error:getInternalRouterError(400,{type:\"invalid-body\"})});// Create a Submission on non-GET navigations\nlet rawFormMethod=opts.formMethod||\"get\";let formMethod=normalizeFormMethod?rawFormMethod.toUpperCase():rawFormMethod.toLowerCase();let formAction=stripHashFromPath(path);if(opts.body!==undefined){if(opts.formEncType===\"text/plain\"){// text only support POST/PUT/PATCH/DELETE submissions\nif(!isMutationMethod(formMethod)){return getInvalidBodyError();}let text=typeof opts.body===\"string\"?opts.body:opts.body instanceof FormData||opts.body instanceof URLSearchParams?// https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\nArray.from(opts.body.entries()).reduce((acc,_ref5)=>{let[name,value]=_ref5;return\"\"+acc+name+\"=\"+value+\"\\n\";},\"\"):String(opts.body);return{path,submission:{formMethod,formAction,formEncType:opts.formEncType,formData:undefined,json:undefined,text}};}else if(opts.formEncType===\"application/json\"){// json only supports POST/PUT/PATCH/DELETE submissions\nif(!isMutationMethod(formMethod)){return getInvalidBodyError();}try{let json=typeof opts.body===\"string\"?JSON.parse(opts.body):opts.body;return{path,submission:{formMethod,formAction,formEncType:opts.formEncType,formData:undefined,json,text:undefined}};}catch(e){return getInvalidBodyError();}}}invariant(typeof FormData===\"function\",\"FormData is not available in this environment\");let searchParams;let formData;if(opts.formData){searchParams=convertFormDataToSearchParams(opts.formData);formData=opts.formData;}else if(opts.body instanceof FormData){searchParams=convertFormDataToSearchParams(opts.body);formData=opts.body;}else if(opts.body instanceof URLSearchParams){searchParams=opts.body;formData=convertSearchParamsToFormData(searchParams);}else if(opts.body==null){searchParams=new URLSearchParams();formData=new FormData();}else{try{searchParams=new URLSearchParams(opts.body);formData=convertSearchParamsToFormData(searchParams);}catch(e){return getInvalidBodyError();}}let submission={formMethod,formAction,formEncType:opts&&opts.formEncType||\"application/x-www-form-urlencoded\",formData,json:undefined,text:undefined};if(isMutationMethod(submission.formMethod)){return{path,submission};}// Flatten submission onto URLSearchParams for GET submissions\nlet parsedPath=parsePath(path);// On GET navigation submissions we can drop the ?index param from the\n// resulting location since all loaders will run.  But fetcher GET submissions\n// only run a single loader so we need to preserve any incoming ?index params\nif(isFetcher&&parsedPath.search&&hasNakedIndexQuery(parsedPath.search)){searchParams.append(\"index\",\"\");}parsedPath.search=\"?\"+searchParams;return{path:createPath(parsedPath),submission};}// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(matches,boundaryId){let boundaryMatches=matches;if(boundaryId){let index=matches.findIndex(m=>m.route.id===boundaryId);if(index>=0){boundaryMatches=matches.slice(0,index);}}return boundaryMatches;}function getMatchesToLoad(history,state,matches,submission,location,isInitialLoad,skipActionErrorRevalidation,isRevalidationRequired,cancelledDeferredRoutes,cancelledFetcherLoads,deletedFetchers,fetchLoadMatches,fetchRedirectIds,routesToUse,basename,pendingActionResult){let actionResult=pendingActionResult?isErrorResult(pendingActionResult[1])?pendingActionResult[1].error:pendingActionResult[1].data:undefined;let currentUrl=history.createURL(state.location);let nextUrl=history.createURL(location);// Pick navigation matches that are net-new or qualify for revalidation\nlet boundaryId=pendingActionResult&&isErrorResult(pendingActionResult[1])?pendingActionResult[0]:undefined;let boundaryMatches=boundaryId?getLoaderMatchesUntilBoundary(matches,boundaryId):matches;// Don't revalidate loaders by default after action 4xx/5xx responses\n// when the flag is enabled.  They can still opt-into revalidation via\n// `shouldRevalidate` via `actionResult`\nlet actionStatus=pendingActionResult?pendingActionResult[1].statusCode:undefined;let shouldSkipRevalidation=skipActionErrorRevalidation&&actionStatus&&actionStatus>=400;let navigationMatches=boundaryMatches.filter((match,index)=>{let{route}=match;if(route.lazy){// We haven't loaded this route yet so we don't know if it's got a loader!\nreturn true;}if(route.loader==null){return false;}if(isInitialLoad){if(typeof route.loader!==\"function\"||route.loader.hydrate){return true;}return state.loaderData[route.id]===undefined&&(// Don't re-run if the loader ran and threw an error\n!state.errors||state.errors[route.id]===undefined);}// Always call the loader on new route instances and pending defer cancellations\nif(isNewLoader(state.loaderData,state.matches[index],match)||cancelledDeferredRoutes.some(id=>id===match.route.id)){return true;}// This is the default implementation for when we revalidate.  If the route\n// provides it's own implementation, then we give them full control but\n// provide this value so they can leverage it if needed after they check\n// their own specific use cases\nlet currentRouteMatch=state.matches[index];let nextRouteMatch=match;return shouldRevalidateLoader(match,_extends({currentUrl,currentParams:currentRouteMatch.params,nextUrl,nextParams:nextRouteMatch.params},submission,{actionResult,unstable_actionStatus:actionStatus,defaultShouldRevalidate:shouldSkipRevalidation?false:// Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\nisRevalidationRequired||currentUrl.pathname+currentUrl.search===nextUrl.pathname+nextUrl.search||// Search params affect all loaders\ncurrentUrl.search!==nextUrl.search||isNewRouteInstance(currentRouteMatch,nextRouteMatch)}));});// Pick fetcher.loads that need to be revalidated\nlet revalidatingFetchers=[];fetchLoadMatches.forEach((f,key)=>{// Don't revalidate:\n//  - on initial load (shouldn't be any fetchers then anyway)\n//  - if fetcher won't be present in the subsequent render\n//    - no longer matches the URL (v7_fetcherPersist=false)\n//    - was unmounted but persisted due to v7_fetcherPersist=true\nif(isInitialLoad||!matches.some(m=>m.route.id===f.routeId)||deletedFetchers.has(key)){return;}let fetcherMatches=matchRoutes(routesToUse,f.path,basename);// If the fetcher path no longer matches, push it in with null matches so\n// we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n// currently only a use-case for Remix HMR where the route tree can change\n// at runtime and remove a route previously loaded via a fetcher\nif(!fetcherMatches){revalidatingFetchers.push({key,routeId:f.routeId,path:f.path,matches:null,match:null,controller:null});return;}// Revalidating fetchers are decoupled from the route matches since they\n// load from a static href.  They revalidate based on explicit revalidation\n// (submission, useRevalidator, or X-Remix-Revalidate)\nlet fetcher=state.fetchers.get(key);let fetcherMatch=getTargetMatch(fetcherMatches,f.path);let shouldRevalidate=false;if(fetchRedirectIds.has(key)){// Never trigger a revalidation of an actively redirecting fetcher\nshouldRevalidate=false;}else if(cancelledFetcherLoads.includes(key)){// Always revalidate if the fetcher was cancelled\nshouldRevalidate=true;}else if(fetcher&&fetcher.state!==\"idle\"&&fetcher.data===undefined){// If the fetcher hasn't ever completed loading yet, then this isn't a\n// revalidation, it would just be a brand new load if an explicit\n// revalidation is required\nshouldRevalidate=isRevalidationRequired;}else{// Otherwise fall back on any user-defined shouldRevalidate, defaulting\n// to explicit revalidations only\nshouldRevalidate=shouldRevalidateLoader(fetcherMatch,_extends({currentUrl,currentParams:state.matches[state.matches.length-1].params,nextUrl,nextParams:matches[matches.length-1].params},submission,{actionResult,unstable_actionStatus:actionStatus,defaultShouldRevalidate:shouldSkipRevalidation?false:isRevalidationRequired}));}if(shouldRevalidate){revalidatingFetchers.push({key,routeId:f.routeId,path:f.path,matches:fetcherMatches,match:fetcherMatch,controller:new AbortController()});}});return[navigationMatches,revalidatingFetchers];}function isNewLoader(currentLoaderData,currentMatch,match){let isNew=// [a] -> [a, b]\n!currentMatch||// [a, b] -> [a, c]\nmatch.route.id!==currentMatch.route.id;// Handle the case that we don't have data for a re-used route, potentially\n// from a prior error or from a cancelled pending deferred\nlet isMissingData=currentLoaderData[match.route.id]===undefined;// Always load if this is a net-new route or we don't yet have data\nreturn isNew||isMissingData;}function isNewRouteInstance(currentMatch,match){let currentPath=currentMatch.route.path;return(// param change for this match, /users/123 -> /users/456\ncurrentMatch.pathname!==match.pathname||// splat param changed, which is not present in match.path\n// e.g. /files/images/avatar.jpg -> files/finances.xls\ncurrentPath!=null&&currentPath.endsWith(\"*\")&&currentMatch.params[\"*\"]!==match.params[\"*\"]);}function shouldRevalidateLoader(loaderMatch,arg){if(loaderMatch.route.shouldRevalidate){let routeChoice=loaderMatch.route.shouldRevalidate(arg);if(typeof routeChoice===\"boolean\"){return routeChoice;}}return arg.defaultShouldRevalidate;}/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */async function loadLazyRouteModule(route,mapRouteProperties,manifest){if(!route.lazy){return;}let lazyRoute=await route.lazy();// If the lazy route function was executed and removed by another parallel\n// call then we can return - first lazy() to finish wins because the return\n// value of lazy is expected to be static\nif(!route.lazy){return;}let routeToUpdate=manifest[route.id];invariant(routeToUpdate,\"No route found in manifest\");// Update the route in place.  This should be safe because there's no way\n// we could yet be sitting on this route as we can't get there without\n// resolving lazy() first.\n//\n// This is different than the HMR \"update\" use-case where we may actively be\n// on the route being updated.  The main concern boils down to \"does this\n// mutation affect any ongoing navigations or any current state.matches\n// values?\".  If not, it should be safe to update in place.\nlet routeUpdates={};for(let lazyRouteProperty in lazyRoute){let staticRouteValue=routeToUpdate[lazyRouteProperty];let isPropertyStaticallyDefined=staticRouteValue!==undefined&&// This property isn't static since it should always be updated based\n// on the route updates\nlazyRouteProperty!==\"hasErrorBoundary\";warning(!isPropertyStaticallyDefined,\"Route \\\"\"+routeToUpdate.id+\"\\\" has a static property \\\"\"+lazyRouteProperty+\"\\\" \"+\"defined but its lazy function is also returning a value for this property. \"+(\"The lazy route property \\\"\"+lazyRouteProperty+\"\\\" will be ignored.\"));if(!isPropertyStaticallyDefined&&!immutableRouteKeys.has(lazyRouteProperty)){routeUpdates[lazyRouteProperty]=lazyRoute[lazyRouteProperty];}}// Mutate the route with the provided updates.  Do this first so we pass\n// the updated version to mapRouteProperties\nObject.assign(routeToUpdate,routeUpdates);// Mutate the `hasErrorBoundary` property on the route based on the route\n// updates and remove the `lazy` function so we don't resolve the lazy\n// route again.\nObject.assign(routeToUpdate,_extends({},mapRouteProperties(routeToUpdate),{lazy:undefined}));}// Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction defaultDataStrategy(opts){return Promise.all(opts.matches.map(m=>m.resolve()));}async function callDataStrategyImpl(dataStrategyImpl,type,request,matchesToLoad,matches,manifest,mapRouteProperties,requestContext){let routeIdsToLoad=matchesToLoad.reduce((acc,m)=>acc.add(m.route.id),new Set());let loadedMatches=new Set();// Send all matches here to allow for a middleware-type implementation.\n// handler will be a no-op for unneeded routes and we filter those results\n// back out below.\nlet results=await dataStrategyImpl({matches:matches.map(match=>{let shouldLoad=routeIdsToLoad.has(match.route.id);// `resolve` encapsulates the route.lazy, executing the\n// loader/action, and mapping return values/thrown errors to a\n// HandlerResult.  Users can pass a callback to take fine-grained control\n// over the execution of the loader/action\nlet resolve=handlerOverride=>{loadedMatches.add(match.route.id);return shouldLoad?callLoaderOrAction(type,request,match,manifest,mapRouteProperties,handlerOverride,requestContext):Promise.resolve({type:ResultType.data,result:undefined});};return _extends({},match,{shouldLoad,resolve});}),request,params:matches[0].params,context:requestContext});// Throw if any loadRoute implementations not called since they are what\n// ensures a route is fully loaded\nmatches.forEach(m=>invariant(loadedMatches.has(m.route.id),\"`match.resolve()` was not called for route id \\\"\"+m.route.id+\"\\\". \"+\"You must call `match.resolve()` on every match passed to \"+\"`dataStrategy` to ensure all routes are properly loaded.\"));// Filter out any middleware-only matches for which we didn't need to run handlers\nreturn results.filter((_,i)=>routeIdsToLoad.has(matches[i].route.id));}// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(type,request,match,manifest,mapRouteProperties,handlerOverride,staticContext){let result;let onReject;let runHandler=handler=>{// Setup a promise we can race against so that abort signals short circuit\nlet reject;// This will never resolve so safe to type it as Promise<HandlerResult> to\n// satisfy the function return value\nlet abortPromise=new Promise((_,r)=>reject=r);onReject=()=>reject();request.signal.addEventListener(\"abort\",onReject);let actualHandler=ctx=>{if(typeof handler!==\"function\"){return Promise.reject(new Error(\"You cannot call the handler for a route which defines a boolean \"+(\"\\\"\"+type+\"\\\" [routeId: \"+match.route.id+\"]\")));}return handler({request,params:match.params,context:staticContext},...(ctx!==undefined?[ctx]:[]));};let handlerPromise;if(handlerOverride){handlerPromise=handlerOverride(ctx=>actualHandler(ctx));}else{handlerPromise=(async()=>{try{let val=await actualHandler();return{type:\"data\",result:val};}catch(e){return{type:\"error\",result:e};}})();}return Promise.race([handlerPromise,abortPromise]);};try{let handler=match.route[type];if(match.route.lazy){if(handler){// Run statically defined handler in parallel with lazy()\nlet handlerError;let[value]=await Promise.all([// If the handler throws, don't let it immediately bubble out,\n// since we need to let the lazy() execution finish so we know if this\n// route has a boundary that can handle the error\nrunHandler(handler).catch(e=>{handlerError=e;}),loadLazyRouteModule(match.route,mapRouteProperties,manifest)]);if(handlerError!==undefined){throw handlerError;}result=value;}else{// Load lazy route module, then run any returned handler\nawait loadLazyRouteModule(match.route,mapRouteProperties,manifest);handler=match.route[type];if(handler){// Handler still runs even if we got interrupted to maintain consistency\n// with un-abortable behavior of handler execution on non-lazy or\n// previously-lazy-loaded routes\nresult=await runHandler(handler);}else if(type===\"action\"){let url=new URL(request.url);let pathname=url.pathname+url.search;throw getInternalRouterError(405,{method:request.method,pathname,routeId:match.route.id});}else{// lazy() route has no loader to run.  Short circuit here so we don't\n// hit the invariant below that errors on returning undefined.\nreturn{type:ResultType.data,result:undefined};}}}else if(!handler){let url=new URL(request.url);let pathname=url.pathname+url.search;throw getInternalRouterError(404,{pathname});}else{result=await runHandler(handler);}invariant(result.result!==undefined,\"You defined \"+(type===\"action\"?\"an action\":\"a loader\")+\" for route \"+(\"\\\"\"+match.route.id+\"\\\" but didn't return anything from your `\"+type+\"` \")+\"function. Please return a value or `null`.\");}catch(e){// We should already be catching and converting normal handler executions to\n// HandlerResults and returning them, so anything that throws here is an\n// unexpected error we still need to wrap\nreturn{type:ResultType.error,result:e};}finally{if(onReject){request.signal.removeEventListener(\"abort\",onReject);}}return result;}async function convertHandlerResultToDataResult(handlerResult){let{result,type,status}=handlerResult;if(isResponse(result)){let data;try{let contentType=result.headers.get(\"Content-Type\");// Check between word boundaries instead of startsWith() due to the last\n// paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\nif(contentType&&/\\bapplication\\/json\\b/.test(contentType)){if(result.body==null){data=null;}else{data=await result.json();}}else{data=await result.text();}}catch(e){return{type:ResultType.error,error:e};}if(type===ResultType.error){return{type:ResultType.error,error:new ErrorResponseImpl(result.status,result.statusText,data),statusCode:result.status,headers:result.headers};}return{type:ResultType.data,data,statusCode:result.status,headers:result.headers};}if(type===ResultType.error){return{type:ResultType.error,error:result,statusCode:isRouteErrorResponse(result)?result.status:status};}if(isDeferredData(result)){var _result$init,_result$init2;return{type:ResultType.deferred,deferredData:result,statusCode:(_result$init=result.init)==null?void 0:_result$init.status,headers:((_result$init2=result.init)==null?void 0:_result$init2.headers)&&new Headers(result.init.headers)};}return{type:ResultType.data,data:result,statusCode:status};}// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(response,request,routeId,matches,basename,v7_relativeSplatPath){let location=response.headers.get(\"Location\");invariant(location,\"Redirects returned/thrown from loaders/actions must have a Location header\");if(!ABSOLUTE_URL_REGEX.test(location)){let trimmedMatches=matches.slice(0,matches.findIndex(m=>m.route.id===routeId)+1);location=normalizeTo(new URL(request.url),trimmedMatches,basename,true,location,v7_relativeSplatPath);response.headers.set(\"Location\",location);}return response;}function normalizeRedirectLocation(location,currentUrl,basename){if(ABSOLUTE_URL_REGEX.test(location)){// Strip off the protocol+origin for same-origin + same-basename absolute redirects\nlet normalizedLocation=location;let url=normalizedLocation.startsWith(\"//\")?new URL(currentUrl.protocol+normalizedLocation):new URL(normalizedLocation);let isSameBasename=stripBasename(url.pathname,basename)!=null;if(url.origin===currentUrl.origin&&isSameBasename){return url.pathname+url.search+url.hash;}}return location;}// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(history,location,signal,submission){let url=history.createURL(stripHashFromPath(location)).toString();let init={signal};if(submission&&isMutationMethod(submission.formMethod)){let{formMethod,formEncType}=submission;// Didn't think we needed this but it turns out unlike other methods, patch\n// won't be properly normalized to uppercase and results in a 405 error.\n// See: https://fetch.spec.whatwg.org/#concept-method\ninit.method=formMethod.toUpperCase();if(formEncType===\"application/json\"){init.headers=new Headers({\"Content-Type\":formEncType});init.body=JSON.stringify(submission.json);}else if(formEncType===\"text/plain\"){// Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\ninit.body=submission.text;}else if(formEncType===\"application/x-www-form-urlencoded\"&&submission.formData){// Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\ninit.body=convertFormDataToSearchParams(submission.formData);}else{// Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\ninit.body=submission.formData;}}return new Request(url,init);}function convertFormDataToSearchParams(formData){let searchParams=new URLSearchParams();for(let[key,value]of formData.entries()){// https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\nsearchParams.append(key,typeof value===\"string\"?value:value.name);}return searchParams;}function convertSearchParamsToFormData(searchParams){let formData=new FormData();for(let[key,value]of searchParams.entries()){formData.append(key,value);}return formData;}function processRouteLoaderData(matches,matchesToLoad,results,pendingActionResult,activeDeferreds,skipLoaderErrorBubbling){// Fill in loaderData/errors from our loaders\nlet loaderData={};let errors=null;let statusCode;let foundError=false;let loaderHeaders={};let pendingError=pendingActionResult&&isErrorResult(pendingActionResult[1])?pendingActionResult[1].error:undefined;// Process loader results into state.loaderData/state.errors\nresults.forEach((result,index)=>{let id=matchesToLoad[index].route.id;invariant(!isRedirectResult(result),\"Cannot handle redirect results in processLoaderData\");if(isErrorResult(result)){let error=result.error;// If we have a pending action error, we report it at the highest-route\n// that throws a loader error, and then clear it out to indicate that\n// it was consumed\nif(pendingError!==undefined){error=pendingError;pendingError=undefined;}errors=errors||{};if(skipLoaderErrorBubbling){errors[id]=error;}else{// Look upwards from the matched route for the closest ancestor error\n// boundary, defaulting to the root match.  Prefer higher error values\n// if lower errors bubble to the same boundary\nlet boundaryMatch=findNearestBoundary(matches,id);if(errors[boundaryMatch.route.id]==null){errors[boundaryMatch.route.id]=error;}}// Clear our any prior loaderData for the throwing route\nloaderData[id]=undefined;// Once we find our first (highest) error, we set the status code and\n// prevent deeper status codes from overriding\nif(!foundError){foundError=true;statusCode=isRouteErrorResponse(result.error)?result.error.status:500;}if(result.headers){loaderHeaders[id]=result.headers;}}else{if(isDeferredResult(result)){activeDeferreds.set(id,result.deferredData);loaderData[id]=result.deferredData.data;// Error status codes always override success status codes, but if all\n// loaders are successful we take the deepest status code.\nif(result.statusCode!=null&&result.statusCode!==200&&!foundError){statusCode=result.statusCode;}if(result.headers){loaderHeaders[id]=result.headers;}}else{loaderData[id]=result.data;// Error status codes always override success status codes, but if all\n// loaders are successful we take the deepest status code.\nif(result.statusCode&&result.statusCode!==200&&!foundError){statusCode=result.statusCode;}if(result.headers){loaderHeaders[id]=result.headers;}}}});// If we didn't consume the pending action error (i.e., all loaders\n// resolved), then consume it here.  Also clear out any loaderData for the\n// throwing route\nif(pendingError!==undefined&&pendingActionResult){errors={[pendingActionResult[0]]:pendingError};loaderData[pendingActionResult[0]]=undefined;}return{loaderData,errors,statusCode:statusCode||200,loaderHeaders};}function processLoaderData(state,matches,matchesToLoad,results,pendingActionResult,revalidatingFetchers,fetcherResults,activeDeferreds){let{loaderData,errors}=processRouteLoaderData(matches,matchesToLoad,results,pendingActionResult,activeDeferreds,false// This method is only called client side so we always want to bubble\n);// Process results from our revalidating fetchers\nfor(let index=0;index<revalidatingFetchers.length;index++){let{key,match,controller}=revalidatingFetchers[index];invariant(fetcherResults!==undefined&&fetcherResults[index]!==undefined,\"Did not find corresponding fetcher result\");let result=fetcherResults[index];// Process fetcher non-redirect errors\nif(controller&&controller.signal.aborted){// Nothing to do for aborted fetchers\ncontinue;}else if(isErrorResult(result)){let boundaryMatch=findNearestBoundary(state.matches,match==null?void 0:match.route.id);if(!(errors&&errors[boundaryMatch.route.id])){errors=_extends({},errors,{[boundaryMatch.route.id]:result.error});}state.fetchers.delete(key);}else if(isRedirectResult(result)){// Should never get here, redirects should get processed above, but we\n// keep this to type narrow to a success result in the else\ninvariant(false,\"Unhandled fetcher revalidation redirect\");}else if(isDeferredResult(result)){// Should never get here, deferred data should be awaited for fetchers\n// in resolveDeferredResults\ninvariant(false,\"Unhandled fetcher deferred data\");}else{let doneFetcher=getDoneFetcher(result.data);state.fetchers.set(key,doneFetcher);}}return{loaderData,errors};}function mergeLoaderData(loaderData,newLoaderData,matches,errors){let mergedLoaderData=_extends({},newLoaderData);for(let match of matches){let id=match.route.id;if(newLoaderData.hasOwnProperty(id)){if(newLoaderData[id]!==undefined){mergedLoaderData[id]=newLoaderData[id];}}else if(loaderData[id]!==undefined&&match.route.loader){// Preserve existing keys not included in newLoaderData and where a loader\n// wasn't removed by HMR\nmergedLoaderData[id]=loaderData[id];}if(errors&&errors.hasOwnProperty(id)){// Don't keep any loader data below the boundary\nbreak;}}return mergedLoaderData;}function getActionDataForCommit(pendingActionResult){if(!pendingActionResult){return{};}return isErrorResult(pendingActionResult[1])?{// Clear out prior actionData on errors\nactionData:{}}:{actionData:{[pendingActionResult[0]]:pendingActionResult[1].data}};}// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(matches,routeId){let eligibleMatches=routeId?matches.slice(0,matches.findIndex(m=>m.route.id===routeId)+1):[...matches];return eligibleMatches.reverse().find(m=>m.route.hasErrorBoundary===true)||matches[0];}function getShortCircuitMatches(routes){// Prefer a root layout route if present, otherwise shim in a route object\nlet route=routes.length===1?routes[0]:routes.find(r=>r.index||!r.path||r.path===\"/\")||{id:\"__shim-error-route__\"};return{matches:[{params:{},pathname:\"\",pathnameBase:\"\",route}],route};}function getInternalRouterError(status,_temp5){let{pathname,routeId,method,type}=_temp5===void 0?{}:_temp5;let statusText=\"Unknown Server Error\";let errorMessage=\"Unknown @remix-run/router error\";if(status===400){statusText=\"Bad Request\";if(method&&pathname&&routeId){errorMessage=\"You made a \"+method+\" request to \\\"\"+pathname+\"\\\" but \"+(\"did not provide a `loader` for route \\\"\"+routeId+\"\\\", \")+\"so there is no way to handle the request.\";}else if(type===\"defer-action\"){errorMessage=\"defer() is not supported in actions\";}else if(type===\"invalid-body\"){errorMessage=\"Unable to encode submission body\";}}else if(status===403){statusText=\"Forbidden\";errorMessage=\"Route \\\"\"+routeId+\"\\\" does not match URL \\\"\"+pathname+\"\\\"\";}else if(status===404){statusText=\"Not Found\";errorMessage=\"No route matches URL \\\"\"+pathname+\"\\\"\";}else if(status===405){statusText=\"Method Not Allowed\";if(method&&pathname&&routeId){errorMessage=\"You made a \"+method.toUpperCase()+\" request to \\\"\"+pathname+\"\\\" but \"+(\"did not provide an `action` for route \\\"\"+routeId+\"\\\", \")+\"so there is no way to handle the request.\";}else if(method){errorMessage=\"Invalid request method \\\"\"+method.toUpperCase()+\"\\\"\";}}return new ErrorResponseImpl(status||500,statusText,new Error(errorMessage),true);}// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results){for(let i=results.length-1;i>=0;i--){let result=results[i];if(isRedirectResult(result)){return{result,idx:i};}}}function stripHashFromPath(path){let parsedPath=typeof path===\"string\"?parsePath(path):path;return createPath(_extends({},parsedPath,{hash:\"\"}));}function isHashChangeOnly(a,b){if(a.pathname!==b.pathname||a.search!==b.search){return false;}if(a.hash===\"\"){// /page -> /page#hash\nreturn b.hash!==\"\";}else if(a.hash===b.hash){// /page#hash -> /page#hash\nreturn true;}else if(b.hash!==\"\"){// /page#hash -> /page#other\nreturn true;}// If the hash is removed the browser will re-perform a request to the server\n// /page#hash -> /page\nreturn false;}function isHandlerResult(result){return result!=null&&typeof result===\"object\"&&\"type\"in result&&\"result\"in result&&(result.type===ResultType.data||result.type===ResultType.error);}function isRedirectHandlerResult(result){return isResponse(result.result)&&redirectStatusCodes.has(result.result.status);}function isDeferredResult(result){return result.type===ResultType.deferred;}function isErrorResult(result){return result.type===ResultType.error;}function isRedirectResult(result){return(result&&result.type)===ResultType.redirect;}function isDeferredData(value){let deferred=value;return deferred&&typeof deferred===\"object\"&&typeof deferred.data===\"object\"&&typeof deferred.subscribe===\"function\"&&typeof deferred.cancel===\"function\"&&typeof deferred.resolveData===\"function\";}function isResponse(value){return value!=null&&typeof value.status===\"number\"&&typeof value.statusText===\"string\"&&typeof value.headers===\"object\"&&typeof value.body!==\"undefined\";}function isRedirectResponse(result){if(!isResponse(result)){return false;}let status=result.status;let location=result.headers.get(\"Location\");return status>=300&&status<=399&&location!=null;}function isValidMethod(method){return validRequestMethods.has(method.toLowerCase());}function isMutationMethod(method){return validMutationMethods.has(method.toLowerCase());}async function resolveDeferredResults(currentMatches,matchesToLoad,results,signals,isFetcher,currentLoaderData){for(let index=0;index<results.length;index++){let result=results[index];let match=matchesToLoad[index];// If we don't have a match, then we can have a deferred result to do\n// anything with.  This is for revalidating fetchers where the route was\n// removed during HMR\nif(!match){continue;}let currentMatch=currentMatches.find(m=>m.route.id===match.route.id);let isRevalidatingLoader=currentMatch!=null&&!isNewRouteInstance(currentMatch,match)&&(currentLoaderData&&currentLoaderData[match.route.id])!==undefined;if(isDeferredResult(result)&&(isFetcher||isRevalidatingLoader)){// Note: we do not have to touch activeDeferreds here since we race them\n// against the signal in resolveDeferredData and they'll get aborted\n// there if needed\nlet signal=signals[index];invariant(signal,\"Expected an AbortSignal for revalidating fetcher deferred result\");await resolveDeferredData(result,signal,isFetcher).then(result=>{if(result){results[index]=result||results[index];}});}}}async function resolveDeferredData(result,signal,unwrap){if(unwrap===void 0){unwrap=false;}let aborted=await result.deferredData.resolveData(signal);if(aborted){return;}if(unwrap){try{return{type:ResultType.data,data:result.deferredData.unwrappedData};}catch(e){// Handle any TrackedPromise._error values encountered while unwrapping\nreturn{type:ResultType.error,error:e};}}return{type:ResultType.data,data:result.deferredData.data};}function hasNakedIndexQuery(search){return new URLSearchParams(search).getAll(\"index\").some(v=>v===\"\");}function getTargetMatch(matches,location){let search=typeof location===\"string\"?parsePath(location).search:location.search;if(matches[matches.length-1].route.index&&hasNakedIndexQuery(search||\"\")){// Return the leaf index route when index is present\nreturn matches[matches.length-1];}// Otherwise grab the deepest \"path contributing\" match (ignoring index and\n// pathless layout routes)\nlet pathMatches=getPathContributingMatches(matches);return pathMatches[pathMatches.length-1];}function getSubmissionFromNavigation(navigation){let{formMethod,formAction,formEncType,text,formData,json}=navigation;if(!formMethod||!formAction||!formEncType){return;}if(text!=null){return{formMethod,formAction,formEncType,formData:undefined,json:undefined,text};}else if(formData!=null){return{formMethod,formAction,formEncType,formData,json:undefined,text:undefined};}else if(json!==undefined){return{formMethod,formAction,formEncType,formData:undefined,json,text:undefined};}}function getLoadingNavigation(location,submission){if(submission){let navigation={state:\"loading\",location,formMethod:submission.formMethod,formAction:submission.formAction,formEncType:submission.formEncType,formData:submission.formData,json:submission.json,text:submission.text};return navigation;}else{let navigation={state:\"loading\",location,formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined,json:undefined,text:undefined};return navigation;}}function getSubmittingNavigation(location,submission){let navigation={state:\"submitting\",location,formMethod:submission.formMethod,formAction:submission.formAction,formEncType:submission.formEncType,formData:submission.formData,json:submission.json,text:submission.text};return navigation;}function getLoadingFetcher(submission,data){if(submission){let fetcher={state:\"loading\",formMethod:submission.formMethod,formAction:submission.formAction,formEncType:submission.formEncType,formData:submission.formData,json:submission.json,text:submission.text,data};return fetcher;}else{let fetcher={state:\"loading\",formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined,json:undefined,text:undefined,data};return fetcher;}}function getSubmittingFetcher(submission,existingFetcher){let fetcher={state:\"submitting\",formMethod:submission.formMethod,formAction:submission.formAction,formEncType:submission.formEncType,formData:submission.formData,json:submission.json,text:submission.text,data:existingFetcher?existingFetcher.data:undefined};return fetcher;}function getDoneFetcher(data){let fetcher={state:\"idle\",formMethod:undefined,formAction:undefined,formEncType:undefined,formData:undefined,json:undefined,text:undefined,data};return fetcher;}function restoreAppliedTransitions(_window,transitions){try{let sessionPositions=_window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);if(sessionPositions){let json=JSON.parse(sessionPositions);for(let[k,v]of Object.entries(json||{})){if(v&&Array.isArray(v)){transitions.set(k,new Set(v||[]));}}}}catch(e){// no-op, use default empty object\n}}function persistAppliedTransitions(_window,transitions){if(transitions.size>0){let json={};for(let[k,v]of transitions){json[k]=[...v];}try{_window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY,JSON.stringify(json));}catch(error){warning(false,\"Failed to save applied view transitions in sessionStorage (\"+error+\").\");}}}//#endregion\nexport{AbortedDeferredError,Action,IDLE_BLOCKER,IDLE_FETCHER,IDLE_NAVIGATION,UNSAFE_DEFERRED_SYMBOL,DeferredData as UNSAFE_DeferredData,ErrorResponseImpl as UNSAFE_ErrorResponseImpl,convertRouteMatchToUiMatch as UNSAFE_convertRouteMatchToUiMatch,convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes,getResolveToMatches as UNSAFE_getResolveToMatches,invariant as UNSAFE_invariant,warning as UNSAFE_warning,createBrowserHistory,createHashHistory,createMemoryHistory,createPath,createRouter,createStaticHandler,defer,generatePath,getStaticContextFromError,getToPathname,isDeferredData,isRouteErrorResponse,joinPaths,json,matchPath,matchRoutes,normalizePathname,parsePath,redirect,redirectDocument,resolvePath,resolveTo,stripBasename};","map":{"version":3,"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","createHref","createPath","history","createURL","URL","encodeLocation","path","parsePath","search","hash","push","Push","nextLocation","splice","delta","replace","Replace","go","nextIndex","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","substr","startsWith","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","invariant","value","message","Error","cond","console","warn","e","createKey","random","toString","getHistoryState","idx","current","_extends","_ref","parsedPath","searchIndex","getLocation","validateLocation","defaultView","getIndex","replaceState","handlePop","historyState","pushState","error","DOMException","name","assign","origin","addEventListener","removeEventListener","ResultType","immutableRouteKeys","Set","isIndexRoute","route","convertRoutesToDataRoutes","routes","mapRouteProperties","parentPath","manifest","treePath","id","join","children","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","decoded","decodePath","matchRouteBranch","convertRouteMatchToUiMatch","match","loaderData","params","data","handle","parentsMeta","flattenRoute","relativePath","meta","caseSensitive","childrenIndex","joinPaths","routesMeta","concat","score","computeScore","forEach","_route$path","includes","exploded","explodeOptionalSegments","segments","split","first","rest","isOptional","endsWith","required","restExploded","result","subpath","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","matchPath","Object","pathnameBase","normalizePathname","generatePath","originalPath","prefix","p","String","array","isLastSegment","star","keyMatch","optional","param","pattern","matcher","compiledParams","compilePath","captureGroups","memo","paramName","splatValue","regexpSource","_","RegExp","v","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","getResolveToMatches","v7_relativeSplatPath","pathMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","init","responseInit","status","headers","Headers","has","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeysSet","subscribers","deferredKeys","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","_ref2","trackPromise","done","add","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","undefinedError","emit","settledKey","subscriber","subscribe","cancel","abort","k","resolveData","resolve","size","unwrappedData","_ref3","unwrapTrackedPromise","pendingKeys","isTrackedPromise","_tracked","_error","_data","defer","redirect","redirectDocument","response","ErrorResponseImpl","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","text","IDLE_FETCHER","IDLE_BLOCKER","proceed","reset","ABSOLUTE_URL_REGEX","defaultMapRouteProperties","hasErrorBoundary","Boolean","TRANSITIONS_STORAGE_KEY","createRouter","routerWindow","isBrowser","createElement","isServer","detectErrorBoundary","dataRoutes","inFlightDataRoutes","dataStrategyImpl","unstable_dataStrategy","defaultDataStrategy","future","v7_fetcherPersist","v7_normalizeFormMethod","v7_partialHydration","v7_prependBasename","unstable_skipActionErrorRevalidation","unlistenHistory","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","initialized","hasLazyRoutes","m","lazy","hasLoaders","loader","errors","isRouteInitialized","hydrate","findIndex","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","actionData","fetchers","Map","blockers","pendingAction","pendingPreventScrollReset","pendingNavigationController","pendingViewTransitionEnabled","appliedViewTransitions","removePageHideEventListener","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeFetchers","deletedFetchers","activeDeferreds","blockerFunctions","ignoreNextHistoryUpdate","initialize","blockerKey","shouldBlockNavigation","currentLocation","updateBlocker","updateState","startNavigation","restoreAppliedTransitions","_saveAppliedTransitions","persistAppliedTransitions","initialHydration","dispose","clear","deleteFetcher","deleteBlocker","newState","opts","completedFetchers","deletedFetchersKeys","fetcher","unstable_viewTransitionOpts","viewTransitionOpts","unstable_flushSync","flushSync","completeNavigation","_temp","_location$state","_location$state2","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","priorPaths","toPaths","getSavedScrollPosition","navigate","normalizedPath","normalizeTo","fromRouteId","relative","submission","normalizeNavigateOptions","userReplace","pendingError","enableViewTransition","unstable_viewTransition","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","routesToUse","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createClientSideRequest","pendingActionResult","findNearestBoundary","type","actionResult","handleAction","shortCircuited","getLoadingNavigation","handleLoaders","fetcherSubmission","getActionDataForCommit","getSubmittingNavigation","actionMatch","getTargetMatch","method","routeId","results","callDataStrategy","isRedirectResult","normalizeRedirectLocation","startRedirectNavigation","isDeferredResult","isErrorResult","boundaryMatch","activeSubmission","getSubmissionFromNavigation","matchesToLoad","revalidatingFetchers","getMatchesToLoad","updatedFetchers","markFetchRedirectsDone","rf","revalidatingFetcher","getLoadingFetcher","abortFetcher","abortPendingFetchRevalidations","f","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","fetcherKey","processLoaderData","deferredData","didAbortFetchLoads","abortStaleFetchLoads","shouldUpdateFetchers","fetch","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","updateFetcherState","getSubmittingFetcher","abortController","fetchRequest","originatingLoadId","actionResults","getDoneFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","_temp2","redirectLocation","isDocumentReload","redirectHistoryAction","callDataStrategyImpl","all","isRedirectHandlerResult","normalizeRelativeRoutingRedirectResponse","convertHandlerResultToDataResult","currentMatches","fetchersToLoad","fetcherRequest","resolveDeferredResults","getFetcher","deleteFetcherAndUpdateState","count","markFetchersDone","doneKeys","landedId","yeetedKeys","getBlocker","blocker","newBlocker","_ref4","blockerFunction","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","getScrollKey","_internalSetRoutes","newRoutes","_internalFetchControllers","_internalActiveDeferreds","UNSAFE_DEFERRED_SYMBOL","Symbol","createStaticHandler","v7_throwAbortReason","query","_temp3","requestContext","skipLoaderErrorBubbling","isValidMethod","methodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","isResponse","queryRoute","_temp4","find","values","_result$activeDeferre","routeMatch","submit","loadRouteData","isHandlerResult","isRedirectResponse","isRouteRequest","throwStaticHandlerAbortedError","Location","loaderRequest","Request","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","executedLoaders","fromEntries","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","reason","isSubmissionNavigation","body","prependBasename","contextualMatches","activeRouteMatch","hasNakedIndexQuery","normalizeFormMethod","isFetcher","getInvalidBodyError","rawFormMethod","toUpperCase","stripHashFromPath","FormData","URLSearchParams","_ref5","parse","searchParams","convertFormDataToSearchParams","convertSearchParamsToFormData","append","boundaryId","boundaryMatches","isInitialLoad","skipActionErrorRevalidation","currentUrl","nextUrl","actionStatus","shouldSkipRevalidation","navigationMatches","isNewLoader","currentRouteMatch","nextRouteMatch","shouldRevalidateLoader","currentParams","nextParams","unstable_actionStatus","defaultShouldRevalidate","isNewRouteInstance","fetcherMatches","fetcherMatch","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","currentPath","loaderMatch","arg","routeChoice","loadLazyRouteModule","lazyRoute","routeToUpdate","routeUpdates","lazyRouteProperty","staticRouteValue","isPropertyStaticallyDefined","routeIdsToLoad","loadedMatches","shouldLoad","handlerOverride","callLoaderOrAction","staticContext","onReject","runHandler","handler","actualHandler","ctx","handlerPromise","val","handlerError","handlerResult","contentType","isDeferredData","_result$init","_result$init2","deferred","trimmedMatches","normalizedLocation","protocol","isSameBasename","foundError","newLoaderData","mergedLoaderData","hasOwnProperty","eligibleMatches","reverse","_temp5","errorMessage","signals","isRevalidatingLoader","unwrap","getAll","_window","transitions","sessionPositions","sessionStorage","getItem","setItem"],"sources":["/Users/theodiloreto/Desktop/examen 5 3/jo/src/node_modules/@remix-run/router/history.ts","/Users/theodiloreto/Desktop/examen 5 3/jo/src/node_modules/@remix-run/router/utils.ts","/Users/theodiloreto/Desktop/examen 5 3/jo/src/node_modules/@remix-run/router/router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n// TODO: (v7) Change the Location generic default from `any` to `unknown` and\n// remove Remix `useLocation` wrapper.\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location<State = any> extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: State;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n\n  /**\n   * The delta between this location and the former location in the history stack\n   */\n  delta: number | null;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. This may be either a URL or the pieces\n * of a URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Returns a URL for the given `to` value\n   *\n   * @param to - The destination URL\n   */\n  createURL(to: To): URL;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n  idx: number;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  function createHref(to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref,\n    createURL(to) {\n      return new URL(createHref(to), \"http://localhost\");\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 1 });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation, delta: 0 });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      let nextIndex = clampIndex(index + delta);\n      let nextLocation = entries[nextIndex];\n      index = nextIndex;\n      if (listener) {\n        listener({ action, location: nextLocation, delta });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n\n    // Hash URL should always have a leading / just like window.location.pathname\n    // does, so if an app ends up at a route like /#something then we add a\n    // leading slash so all of our path-matching behaves the same as if it would\n    // in a browser router.  This is particularly important when there exists a\n    // root splat route (<Route path=\"*\">) since that matches internally against\n    // \"/*\" and we'd expect /#something to 404 in a hash router app.\n    if (!pathname.startsWith(\"/\") && !pathname.startsWith(\".\")) {\n      pathname = \"/\" + pathname;\n    }\n\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nexport function warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience, so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location, index: number): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n    idx: index,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  let index = getIndex()!;\n  // Index should only be null when we initialize. If not, it's because the\n  // user called history.pushState or history.replaceState directly, in which\n  // case we should log a warning as it will result in bugs.\n  if (index == null) {\n    index = 0;\n    globalHistory.replaceState({ ...globalHistory.state, idx: index }, \"\");\n  }\n\n  function getIndex(): number {\n    let state = globalHistory.state || { idx: null };\n    return state.idx;\n  }\n\n  function handlePop() {\n    action = Action.Pop;\n    let nextIndex = getIndex();\n    let delta = nextIndex == null ? null : nextIndex - index;\n    index = nextIndex;\n    if (listener) {\n      listener({ action, location: history.location, delta });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex() + 1;\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // If the exception is because `state` can't be serialized, let that throw\n      // outwards just like a replace call would so the dev knows the cause\n      // https://html.spec.whatwg.org/multipage/nav-history-apis.html#shared-history-push/replace-state-steps\n      // https://html.spec.whatwg.org/multipage/structured-data.html#structuredserializeinternal\n      if (error instanceof DOMException && error.name === \"DataCloneError\") {\n        throw error;\n      }\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 1 });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    index = getIndex();\n    let historyState = getHistoryState(location, index);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location, delta: 0 });\n    }\n  }\n\n  function createURL(to: To): URL {\n    // window.location.origin is \"null\" (the literal string value) in Firefox\n    // under certain conditions, notably when serving from a local HTML file\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n    let base =\n      window.location.origin !== \"null\"\n        ? window.location.origin\n        : window.location.href;\n\n    let href = typeof to === \"string\" ? to : createPath(to);\n    // Treating this as a full URL will strip any trailing spaces so we need to\n    // pre-encode them since they might be part of a matching splat param from\n    // an ancestor route\n    href = href.replace(/ $/, \"%20\");\n    invariant(\n      base,\n      `No window.location.(origin|href) available to create URL for href: ${href}`\n    );\n    return new URL(href, base);\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    createURL,\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createURL(to);\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath, warning } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  // We keep the raw Response for redirects so we can return it verbatim\n  response: Response;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: unknown;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\n/**\n * Result from a loader or action called via dataStrategy\n */\nexport interface HandlerResult {\n  type: \"data\" | \"error\";\n  result: unknown; // data, Error, Response, DeferredData\n  status?: number;\n}\n\ntype LowerCaseFormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\ntype UpperCaseFormMethod = Uppercase<LowerCaseFormMethod>;\n\n/**\n * Users can specify either lowercase or uppercase form methods on `<Form>`,\n * useSubmit(), `<fetcher.Form>`, etc.\n */\nexport type HTMLFormMethod = LowerCaseFormMethod | UpperCaseFormMethod;\n\n/**\n * Active navigation/fetcher form methods are exposed in lowercase on the\n * RouterState\n */\nexport type FormMethod = LowerCaseFormMethod;\nexport type MutationFormMethod = Exclude<FormMethod, \"get\">;\n\n/**\n * In v7, active navigation/fetcher form methods are exposed in uppercase on the\n * RouterState.  This is to align with the normalization done via fetch().\n */\nexport type V7_FormMethod = UpperCaseFormMethod;\nexport type V7_MutationFormMethod = Exclude<V7_FormMethod, \"GET\">;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\"\n  | \"application/json\"\n  | \"text/plain\";\n\n// Thanks https://github.com/sindresorhus/type-fest!\ntype JsonObject = { [Key in string]: JsonValue } & {\n  [Key in string]?: JsonValue | undefined;\n};\ntype JsonArray = JsonValue[] | readonly JsonValue[];\ntype JsonPrimitive = string | number | boolean | null;\ntype JsonValue = JsonPrimitive | JsonObject | JsonArray;\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport type Submission =\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: FormData;\n      json: undefined;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: JsonValue;\n      text: undefined;\n    }\n  | {\n      formMethod: FormMethod | V7_FormMethod;\n      formAction: string;\n      formEncType: FormEncType;\n      formData: undefined;\n      json: undefined;\n      text: string;\n    };\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs<Context> {\n  request: Request;\n  params: Params;\n  context?: Context;\n}\n\n// TODO: (v7) Change the defaults from any to unknown in and remove Remix wrappers:\n//   ActionFunction, ActionFunctionArgs, LoaderFunction, LoaderFunctionArgs\n//   Also, make them a type alias instead of an interface\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {}\n\n/**\n * Loaders and actions can return anything except `undefined` (`null` is a\n * valid return value if there is no data to return).  Responses are preferred\n * and will ease any future migration to Remix\n */\ntype DataFunctionValue = Response | NonNullable<unknown> | null;\n\ntype DataFunctionReturnValue = Promise<DataFunctionValue> | DataFunctionValue;\n\n/**\n * Route loader function signature\n */\nexport type LoaderFunction<Context = any> = {\n  (\n    args: LoaderFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n} & { hydrate?: boolean };\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction<Context = any> {\n  (\n    args: ActionFunctionArgs<Context>,\n    handlerCtx?: unknown\n  ): DataFunctionReturnValue;\n}\n\n/**\n * Arguments passed to shouldRevalidate function\n */\nexport interface ShouldRevalidateFunctionArgs {\n  currentUrl: URL;\n  currentParams: AgnosticDataRouteMatch[\"params\"];\n  nextUrl: URL;\n  nextParams: AgnosticDataRouteMatch[\"params\"];\n  formMethod?: Submission[\"formMethod\"];\n  formAction?: Submission[\"formAction\"];\n  formEncType?: Submission[\"formEncType\"];\n  text?: Submission[\"text\"];\n  formData?: Submission[\"formData\"];\n  json?: Submission[\"json\"];\n  unstable_actionStatus?: number;\n  actionResult?: any;\n  defaultShouldRevalidate: boolean;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: ShouldRevalidateFunctionArgs): boolean;\n}\n\n/**\n * Function provided by the framework-aware layers to set `hasErrorBoundary`\n * from the framework-aware `errorElement` prop\n *\n * @deprecated Use `mapRouteProperties` instead\n */\nexport interface DetectErrorBoundaryFunction {\n  (route: AgnosticRouteObject): boolean;\n}\n\nexport interface DataStrategyMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {\n  shouldLoad: boolean;\n  resolve: (\n    handlerOverride?: (\n      handler: (ctx?: unknown) => DataFunctionReturnValue\n    ) => Promise<HandlerResult>\n  ) => Promise<HandlerResult>;\n}\n\nexport interface DataStrategyFunctionArgs<Context = any>\n  extends DataFunctionArgs<Context> {\n  matches: DataStrategyMatch[];\n}\n\nexport interface DataStrategyFunction {\n  (args: DataStrategyFunctionArgs): Promise<HandlerResult[]>;\n}\n\n/**\n * Function provided by the framework-aware layers to set any framework-specific\n * properties from framework-agnostic properties\n */\nexport interface MapRoutePropertiesFunction {\n  (route: AgnosticRouteObject): {\n    hasErrorBoundary: boolean;\n  } & Record<string, any>;\n}\n\n/**\n * Keys we cannot change from within a lazy() function. We spread all other keys\n * onto the route. Either they're meaningful to the router, or they'll get\n * ignored.\n */\nexport type ImmutableRouteKey =\n  | \"lazy\"\n  | \"caseSensitive\"\n  | \"path\"\n  | \"id\"\n  | \"index\"\n  | \"children\";\n\nexport const immutableRouteKeys = new Set<ImmutableRouteKey>([\n  \"lazy\",\n  \"caseSensitive\",\n  \"path\",\n  \"id\",\n  \"index\",\n  \"children\",\n]);\n\ntype RequireOne<T, Key = keyof T> = Exclude<\n  {\n    [K in keyof T]: K extends Key ? Omit<T, K> & Required<Pick<T, K>> : never;\n  }[keyof T],\n  undefined\n>;\n\n/**\n * lazy() function to load a route definition, which can add non-matching\n * related properties to a route\n */\nexport interface LazyRouteFunction<R extends AgnosticRouteObject> {\n  (): Promise<RequireOne<Omit<R, ImmutableRouteKey>>>;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction | boolean;\n  action?: ActionFunction | boolean;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n  lazy?: LazyRouteFunction<AgnosticBaseRouteObject>;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\nexport type RouteManifest = Record<string, AgnosticDataRouteObject | undefined>;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param extends `${infer Optional}?`\n      ? Optional\n      : Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\nexport type PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\" | \"/*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise, return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if you could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary, so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  mapRouteProperties: MapRoutePropertiesFunction,\n  parentPath: number[] = [],\n  manifest: RouteManifest = {}\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !manifest[id],\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n      };\n      manifest[id] = indexRoute;\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        ...mapRouteProperties(route),\n        id,\n        children: undefined,\n      };\n      manifest[id] = pathOrLayoutRoute;\n\n      if (route.children) {\n        pathOrLayoutRoute.children = convertRoutesToDataRoutes(\n          route.children,\n          mapRouteProperties,\n          treePath,\n          manifest\n        );\n      }\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    // Incoming pathnames are generally encoded from either window.location\n    // or from router.navigate, but we want to match against the unencoded\n    // paths in the route definitions.  Memory router locations won't be\n    // encoded here but there also shouldn't be anything to decode so this\n    // should be a safe operation.  This avoids needing matchRoutes to be\n    // history-aware.\n    let decoded = decodePath(pathname);\n    matches = matchRouteBranch<string, RouteObjectType>(branches[i], decoded);\n  }\n\n  return matches;\n}\n\nexport interface UIMatch<Data = unknown, Handle = unknown> {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: Data;\n  handle: Handle;\n}\n\nexport function convertRouteMatchToUiMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UIMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle,\n  };\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array, so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children, so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explode _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then, if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:[\\w-]+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string | null;\n  } = {} as any\n): string {\n  let path: string = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  // ensure `/` is added at the beginning if the path is absolute\n  const prefix = path.startsWith(\"/\") ? \"/\" : \"\";\n\n  const stringify = (p: any) =>\n    p == null ? \"\" : typeof p === \"string\" ? p : String(p);\n\n  const segments = path\n    .split(/\\/+/)\n    .map((segment, index, array) => {\n      const isLastSegment = index === array.length - 1;\n\n      // only apply the splat if it's the last segment\n      if (isLastSegment && segment === \"*\") {\n        const star = \"*\" as PathParam<Path>;\n        // Apply the splat\n        return stringify(params[star]);\n      }\n\n      const keyMatch = segment.match(/^:([\\w-]+)(\\??)$/);\n      if (keyMatch) {\n        const [, key, optional] = keyMatch;\n        let param = params[key as PathParam<Path>];\n        invariant(optional === \"?\" || param != null, `Missing \":${key}\" param`);\n        return stringify(param);\n      }\n\n      // Remove any optional markers from optional static segments\n      return segment.replace(/\\?$/g, \"\");\n    })\n    // Remove empty segments\n    .filter((segment) => !!segment);\n\n  return prefix + segments.join(\"/\");\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, compiledParams] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = compiledParams.reduce<Mutable<Params>>(\n    (memo, { paramName, isOptional }, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      const value = captureGroups[index];\n      if (isOptional && !value) {\n        memo[paramName] = undefined;\n      } else {\n        memo[paramName] = (value || \"\").replace(/%2F/g, \"/\");\n      }\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\ntype CompiledPathParam = { paramName: string; isOptional?: boolean };\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, CompiledPathParam[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let params: CompiledPathParam[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^${}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(\n        /\\/:([\\w-]+)(\\?)?/g,\n        (_: string, paramName: string, isOptional) => {\n          params.push({ paramName, isOptional: isOptional != null });\n          return isOptional ? \"/?([^\\\\/]+)?\" : \"/([^\\\\/]+)\";\n        }\n      );\n\n  if (path.endsWith(\"*\")) {\n    params.push({ paramName: \"*\" });\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex, so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, params];\n}\n\nfunction decodePath(value: string) {\n  try {\n    return value\n      .split(\"/\")\n      .map((v) => decodeURIComponent(v).replace(/\\//g, \"%2F\"))\n      .join(\"/\");\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n// Return the array of pathnames for the current route matches - used to\n// generate the routePathnames input for resolveTo()\nexport function getResolveToMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[], v7_relativeSplatPath: boolean) {\n  let pathMatches = getPathContributingMatches(matches);\n\n  // When v7_relativeSplatPath is enabled, use the full pathname for the leaf\n  // match so we include splat values for \".\" links.  See:\n  // https://github.com/remix-run/react-router/issues/11052#issuecomment-1836589329\n  if (v7_relativeSplatPath) {\n    return pathMatches.map((match, idx) =>\n      idx === matches.length - 1 ? match.pathname : match.pathnameBase\n    );\n  }\n\n  return pathMatches.map((match) => match.pathnameBase);\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    // With relative=\"route\" (the default), each leading .. segment means\n    // \"go up one route\" instead of \"go up one URL segment\".  This is a key\n    // difference from how <a href> works and a major reason we call this a\n    // \"to\" value instead of a \"href\".\n    if (!isPathRelative && toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeysSet: Set<string> = new Set<string>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscribers: Set<(aborted: boolean, settledKey?: string) => void> =\n    new Set();\n  data: Record<string, unknown>;\n  init?: ResponseInit;\n  deferredKeys: string[] = [];\n\n  constructor(data: Record<string, unknown>, responseInit?: ResponseInit) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n\n    if (this.done) {\n      // All incoming values were resolved\n      this.unlistenAbortSignal();\n    }\n\n    this.init = responseInit;\n  }\n\n  private trackPromise(\n    key: string,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.deferredKeys.push(key);\n    this.pendingKeysSet.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, undefined, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeysSet.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    // If the promise was resolved/rejected with undefined, we'll throw an error as you\n    // should always resolve with a value or null\n    if (error === undefined && data === undefined) {\n      let undefinedError = new Error(\n        `Deferred data for key \"${key}\" resolved/rejected with \\`undefined\\`, ` +\n          `you must resolve/reject with a value or \\`null\\`.`\n      );\n      Object.defineProperty(promise, \"_error\", { get: () => undefinedError });\n      this.emit(false, key);\n      return Promise.reject(undefinedError);\n    }\n\n    if (data === undefined) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      this.emit(false, key);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    this.emit(false, key);\n    return data;\n  }\n\n  private emit(aborted: boolean, settledKey?: string) {\n    this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));\n  }\n\n  subscribe(fn: (aborted: boolean, settledKey?: string) => void) {\n    this.subscribers.add(fn);\n    return () => this.subscribers.delete(fn);\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeysSet.forEach((v, k) => this.pendingKeysSet.delete(k));\n    this.emit(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeysSet.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n\n  get pendingKeys() {\n    return Array.from(this.pendingKeysSet);\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport type DeferFunction = (\n  data: Record<string, unknown>,\n  init?: number | ResponseInit\n) => DeferredData;\n\nexport const defer: DeferFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  return new DeferredData(data, responseInit);\n};\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * A redirect response that will force a document reload to the new location.\n * Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirectDocument: RedirectFunction = (url, init) => {\n  let response = redirect(url, init);\n  response.headers.set(\"X-Remix-Reload-Document\", \"true\");\n  return response;\n};\n\nexport type ErrorResponse = {\n  status: number;\n  statusText: string;\n  data: any;\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n *\n * We don't export the class for public use since it's an implementation\n * detail, but we export the interface above so folks can build their own\n * abstractions around instances via isRouteErrorResponse()\n */\nexport class ErrorResponseImpl implements ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  private error?: Error;\n  private internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response thrown from an action/loader\n */\nexport function isRouteErrorResponse(error: any): error is ErrorResponse {\n  return (\n    error != null &&\n    typeof error.status === \"number\" &&\n    typeof error.statusText === \"string\" &&\n    typeof error.internal === \"boolean\" &&\n    \"data\" in error\n  );\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  invariant,\n  parsePath,\n  warning,\n} from \"./history\";\nimport type {\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DataStrategyMatch,\n  AgnosticRouteObject,\n  DataResult,\n  DataStrategyFunction,\n  DataStrategyFunctionArgs,\n  DeferredData,\n  DeferredResult,\n  DetectErrorBoundaryFunction,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  HTMLFormMethod,\n  HandlerResult,\n  ImmutableRouteKey,\n  MapRoutePropertiesFunction,\n  MutationFormMethod,\n  RedirectResult,\n  RouteData,\n  RouteManifest,\n  ShouldRevalidateFunctionArgs,\n  Submission,\n  SuccessResult,\n  UIMatch,\n  V7_FormMethod,\n  V7_MutationFormMethod,\n} from \"./utils\";\nimport {\n  ErrorResponseImpl,\n  ResultType,\n  convertRouteMatchToUiMatch,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  getResolveToMatches,\n  immutableRouteKeys,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n  stripBasename,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the future config for the router\n   */\n  get future(): FutureConfig;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the window associated with the router\n   */\n  get window(): RouterInit[\"window\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): Promise<void>;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To | null, opts?: RouterNavigateOptions): Promise<void>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get a navigation blocker\n   * @param key The identifier for the blocker\n   * @param fn The blocker function implementation\n   */\n  getBlocker(key: string, fn: BlockerFunction): Blocker;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete a navigation blocker\n   * @param key The identifier for the blocker\n   */\n  deleteBlocker(key: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * HMR needs to pass in-flight route updates to React Router\n   * TODO: Replace this with granular route update APIs (addRoute, updateRoute, deleteRoute)\n   */\n  _internalSetRoutes(routes: AgnosticRouteObject[]): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n\n  /**\n   * Map of current blockers\n   */\n  blockers: Map<string, Blocker>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface FutureConfig {\n  v7_fetcherPersist: boolean;\n  v7_normalizeFormMethod: boolean;\n  v7_partialHydration: boolean;\n  v7_prependBasename: boolean;\n  v7_relativeSplatPath: boolean;\n  unstable_skipActionErrorRevalidation: boolean;\n}\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  routes: AgnosticRouteObject[];\n  history: History;\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<FutureConfig>;\n  hydrationData?: HydrationState;\n  window?: Window;\n  unstable_dataStrategy?: DataStrategyFunction;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  activeDeferreds: Record<string, DeferredData> | null;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: {\n      routeId?: string;\n      requestContext?: unknown;\n      unstable_dataStrategy?: DataStrategyFunction;\n    }\n  ): Promise<any>;\n}\n\ntype ViewTransitionOpts = {\n  currentLocation: Location;\n  nextLocation: Location;\n};\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (\n    state: RouterState,\n    opts: {\n      deletedFetchers: string[];\n      unstable_viewTransitionOpts?: ViewTransitionOpts;\n      unstable_flushSync: boolean;\n    }\n  ): void;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UIMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\n// Allowed for any navigation or fetch\ntype BaseNavigateOrFetchOptions = {\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  unstable_flushSync?: boolean;\n};\n\n// Only allowed for navigations\ntype BaseNavigateOptions = BaseNavigateOrFetchOptions & {\n  replace?: boolean;\n  state?: any;\n  fromRouteId?: string;\n  unstable_viewTransition?: boolean;\n};\n\n// Only allowed for submission navigations\ntype BaseSubmissionOptions = {\n  formMethod?: HTMLFormMethod;\n  formEncType?: FormEncType;\n} & (\n  | { formData: FormData; body?: undefined }\n  | { formData?: undefined; body: any }\n);\n\n/**\n * Options for a navigate() call for a normal (non-submission) navigation\n */\ntype LinkNavigateOptions = BaseNavigateOptions;\n\n/**\n * Options for a navigate() call for a submission navigation\n */\ntype SubmissionNavigateOptions = BaseNavigateOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to navigate() for a navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options for a fetch() load\n */\ntype LoadFetchOptions = BaseNavigateOrFetchOptions;\n\n/**\n * Options for a fetch() submission\n */\ntype SubmitFetchOptions = BaseNavigateOrFetchOptions & BaseSubmissionOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions = LoadFetchOptions | SubmitFetchOptions;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    json: undefined;\n    text: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    text: Submission[\"text\"];\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    text: undefined;\n    formData: undefined;\n    json: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: Submission[\"formMethod\"] | undefined;\n    formAction: Submission[\"formAction\"] | undefined;\n    formEncType: Submission[\"formEncType\"] | undefined;\n    text: Submission[\"text\"] | undefined;\n    formData: Submission[\"formData\"] | undefined;\n    json: Submission[\"json\"] | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: Submission[\"formMethod\"];\n    formAction: Submission[\"formAction\"];\n    formEncType: Submission[\"formEncType\"];\n    text: Submission[\"text\"];\n    formData: Submission[\"formData\"];\n    json: Submission[\"json\"];\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface BlockerBlocked {\n  state: \"blocked\";\n  reset(): void;\n  proceed(): void;\n  location: Location;\n}\n\ninterface BlockerUnblocked {\n  state: \"unblocked\";\n  reset: undefined;\n  proceed: undefined;\n  location: undefined;\n}\n\ninterface BlockerProceeding {\n  state: \"proceeding\";\n  reset: undefined;\n  proceed: undefined;\n  location: Location;\n}\n\nexport type Blocker = BlockerUnblocked | BlockerBlocked | BlockerProceeding;\n\nexport type BlockerFunction = (args: {\n  currentLocation: Location;\n  nextLocation: Location;\n  historyAction: HistoryAction;\n}) => boolean;\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ntype PendingActionResult = [string, SuccessResult | ErrorResult];\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Tuple for the returned or thrown value from the current action.  The routeId\n   * is the action route for success and the bubbled boundary route for errors.\n   */\n  pendingActionResult?: PendingActionResult;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Cached info for active fetcher.load() instances so they can participate\n * in revalidation\n */\ninterface FetchLoadMatch {\n  routeId: string;\n  path: string;\n}\n\n/**\n * Identified fetcher.load() calls that need to be revalidated\n */\ninterface RevalidatingFetcher extends FetchLoadMatch {\n  key: string;\n  match: AgnosticDataRouteMatch | null;\n  matches: AgnosticDataRouteMatch[] | null;\n  controller: AbortController | null;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n  json: undefined,\n  text: undefined,\n};\n\nexport const IDLE_BLOCKER: BlockerUnblocked = {\n  state: \"unblocked\",\n  proceed: undefined,\n  reset: undefined,\n  location: undefined,\n};\n\nconst ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\\/\\/)/i;\n\nconst defaultMapRouteProperties: MapRoutePropertiesFunction = (route) => ({\n  hasErrorBoundary: Boolean(route.hasErrorBoundary),\n});\n\nconst TRANSITIONS_STORAGE_KEY = \"remix-router-transitions\";\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  const routerWindow = init.window\n    ? init.window\n    : typeof window !== \"undefined\"\n    ? window\n    : undefined;\n  const isBrowser =\n    typeof routerWindow !== \"undefined\" &&\n    typeof routerWindow.document !== \"undefined\" &&\n    typeof routerWindow.document.createElement !== \"undefined\";\n  const isServer = !isBrowser;\n\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (init.mapRouteProperties) {\n    mapRouteProperties = init.mapRouteProperties;\n  } else if (init.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = init.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n\n  // Routes keyed by ID\n  let manifest: RouteManifest = {};\n  // Routes in tree format for matching\n  let dataRoutes = convertRoutesToDataRoutes(\n    init.routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n  let inFlightDataRoutes: AgnosticDataRouteObject[] | undefined;\n  let basename = init.basename || \"/\";\n  let dataStrategyImpl = init.unstable_dataStrategy || defaultDataStrategy;\n  // Config driven behavior flags\n  let future: FutureConfig = {\n    v7_fetcherPersist: false,\n    v7_normalizeFormMethod: false,\n    v7_partialHydration: false,\n    v7_prependBasename: false,\n    v7_relativeSplatPath: false,\n    unstable_skipActionErrorRevalidation: false,\n    ...init.future,\n  };\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized: boolean;\n  let hasLazyRoutes = initialMatches.some((m) => m.route.lazy);\n  let hasLoaders = initialMatches.some((m) => m.route.loader);\n  if (hasLazyRoutes) {\n    // All initialMatches need to be loaded before we're ready.  If we have lazy\n    // functions around still then we'll need to run them in initialize()\n    initialized = false;\n  } else if (!hasLoaders) {\n    // If we've got no loaders to run, then we're good to go\n    initialized = true;\n  } else if (future.v7_partialHydration) {\n    // If partial hydration is enabled, we're initialized so long as we were\n    // provided with hydrationData for every route with a loader, and no loaders\n    // were marked for explicit hydration\n    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;\n    let errors = init.hydrationData ? init.hydrationData.errors : null;\n    let isRouteInitialized = (m: AgnosticDataRouteMatch) => {\n      // No loader, nothing to initialize\n      if (!m.route.loader) {\n        return true;\n      }\n      // Explicitly opting-in to running on hydration\n      if (\n        typeof m.route.loader === \"function\" &&\n        m.route.loader.hydrate === true\n      ) {\n        return false;\n      }\n      // Otherwise, initialized if hydrated with data or an error\n      return (\n        (loaderData && loaderData[m.route.id] !== undefined) ||\n        (errors && errors[m.route.id] !== undefined)\n      );\n    };\n\n    // If errors exist, don't consider routes below the boundary\n    if (errors) {\n      let idx = initialMatches.findIndex(\n        (m) => errors![m.route.id] !== undefined\n      );\n      initialized = initialMatches.slice(0, idx + 1).every(isRouteInitialized);\n    } else {\n      initialized = initialMatches.every(isRouteInitialized);\n    }\n  } else {\n    // Without partial hydration - we're initialized if we were provided any\n    // hydrationData - which is expected to be complete\n    initialized = init.hydrationData != null;\n  }\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n    blockers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n\n  // Should the current navigation enable document.startViewTransition?\n  let pendingViewTransitionEnabled = false;\n\n  // Store applied view transitions so we can apply them on POP\n  let appliedViewTransitions: Map<string, Set<string>> = new Map<\n    string,\n    Set<string>\n  >();\n\n  // Cleanup function for persisting applied transitions to sessionStorage\n  let removePageHideEventListener: (() => void) | null = null;\n\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidator()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n\n  // Fetchers that triggered redirect navigations\n  let fetchRedirectIds = new Set<string>();\n\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n\n  // Ref-count mounted fetchers so we know when it's ok to clean them up\n  let activeFetchers = new Map<string, number>();\n\n  // Fetchers that have requested a delete when using v7_fetcherPersist,\n  // they'll be officially removed after they return to idle\n  let deletedFetchers = new Set<string>();\n\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Store blocker functions in a separate Map outside of router state since\n  // we don't need to update UI state if they change\n  let blockerFunctions = new Map<string, BlockerFunction>();\n\n  // Flag to ignore the next history update, so we can revert the URL change on\n  // a POP navigation that was blocked by the user without touching router state\n  let ignoreNextHistoryUpdate = false;\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location, delta }) => {\n        // Ignore this event if it was just us resetting the URL from a\n        // blocked POP navigation\n        if (ignoreNextHistoryUpdate) {\n          ignoreNextHistoryUpdate = false;\n          return;\n        }\n\n        warning(\n          blockerFunctions.size === 0 || delta != null,\n          \"You are trying to use a blocker on a POP navigation to a location \" +\n            \"that was not created by @remix-run/router. This will fail silently in \" +\n            \"production. This can happen if you are navigating outside the router \" +\n            \"via `window.history.pushState`/`window.location.hash` instead of using \" +\n            \"router navigation APIs.  This can also happen if you are using \" +\n            \"createHashRouter and the user manually changes the URL.\"\n        );\n\n        let blockerKey = shouldBlockNavigation({\n          currentLocation: state.location,\n          nextLocation: location,\n          historyAction,\n        });\n\n        if (blockerKey && delta != null) {\n          // Restore the URL to match the current UI, but don't update router state\n          ignoreNextHistoryUpdate = true;\n          init.history.go(delta * -1);\n\n          // Put the blocker into a blocked state\n          updateBlocker(blockerKey, {\n            state: \"blocked\",\n            location,\n            proceed() {\n              updateBlocker(blockerKey!, {\n                state: \"proceeding\",\n                proceed: undefined,\n                reset: undefined,\n                location,\n              });\n              // Re-do the same POP navigation we just blocked\n              init.history.go(delta);\n            },\n            reset() {\n              let blockers = new Map(state.blockers);\n              blockers.set(blockerKey!, IDLE_BLOCKER);\n              updateState({ blockers });\n            },\n          });\n          return;\n        }\n\n        return startNavigation(historyAction, location);\n      }\n    );\n\n    if (isBrowser) {\n      // FIXME: This feels gross.  How can we cleanup the lines between\n      // scrollRestoration/appliedTransitions persistance?\n      restoreAppliedTransitions(routerWindow, appliedViewTransitions);\n      let _saveAppliedTransitions = () =>\n        persistAppliedTransitions(routerWindow, appliedViewTransitions);\n      routerWindow.addEventListener(\"pagehide\", _saveAppliedTransitions);\n      removePageHideEventListener = () =>\n        routerWindow.removeEventListener(\"pagehide\", _saveAppliedTransitions);\n    }\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    // Note we don't do any handling of lazy here.  For SPA's it'll get handled\n    // in the normal navigation flow.  For SSR it's expected that lazy modules are\n    // resolved prior to router creation since we can't go into a fallbackElement\n    // UI for SSR'd apps\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location, {\n        initialHydration: true,\n      });\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    if (removePageHideEventListener) {\n      removePageHideEventListener();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n    state.blockers.forEach((_, key) => deleteBlocker(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(\n    newState: Partial<RouterState>,\n    opts: {\n      flushSync?: boolean;\n      viewTransitionOpts?: ViewTransitionOpts;\n    } = {}\n  ): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n\n    // Prep fetcher cleanup so we can tell the UI which fetcher data entries\n    // can be removed\n    let completedFetchers: string[] = [];\n    let deletedFetchersKeys: string[] = [];\n\n    if (future.v7_fetcherPersist) {\n      state.fetchers.forEach((fetcher, key) => {\n        if (fetcher.state === \"idle\") {\n          if (deletedFetchers.has(key)) {\n            // Unmounted from the UI and can be totally removed\n            deletedFetchersKeys.push(key);\n          } else {\n            // Returned to idle but still mounted in the UI, so semi-remains for\n            // revalidations and such\n            completedFetchers.push(key);\n          }\n        }\n      });\n    }\n\n    // Iterate over a local copy so that if flushSync is used and we end up\n    // removing and adding a new subscriber due to the useCallback dependencies,\n    // we don't get ourselves into a loop calling the new subscriber immediately\n    [...subscribers].forEach((subscriber) =>\n      subscriber(state, {\n        deletedFetchers: deletedFetchersKeys,\n        unstable_viewTransitionOpts: opts.viewTransitionOpts,\n        unstable_flushSync: opts.flushSync === true,\n      })\n    );\n\n    // Remove idle fetchers from state since we only care about in-flight fetchers.\n    if (future.v7_fetcherPersist) {\n      completedFetchers.forEach((key) => state.fetchers.delete(key));\n      deletedFetchersKeys.forEach((key) => deleteFetcher(key));\n    }\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>,\n    { flushSync }: { flushSync?: boolean } = {}\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    // On a successful navigation we can assume we got through all blockers\n    // so we can start fresh\n    let blockers = state.blockers;\n    if (blockers.size > 0) {\n      blockers = new Map(blockers);\n      blockers.forEach((_, k) => blockers.set(k, IDLE_BLOCKER));\n    }\n\n    // Always respect the user flag.  Otherwise don't reset on mutation\n    // submission navigations unless they redirect\n    let preventScrollReset =\n      pendingPreventScrollReset === true ||\n      (state.navigation.formMethod != null &&\n        isMutationMethod(state.navigation.formMethod) &&\n        location.state?._isRedirect !== true);\n\n    if (inFlightDataRoutes) {\n      dataRoutes = inFlightDataRoutes;\n      inFlightDataRoutes = undefined;\n    }\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    let viewTransitionOpts: ViewTransitionOpts | undefined;\n\n    // On POP, enable transitions if they were enabled on the original navigation\n    if (pendingAction === HistoryAction.Pop) {\n      // Forward takes precedence so they behave like the original navigation\n      let priorPaths = appliedViewTransitions.get(state.location.pathname);\n      if (priorPaths && priorPaths.has(location.pathname)) {\n        viewTransitionOpts = {\n          currentLocation: state.location,\n          nextLocation: location,\n        };\n      } else if (appliedViewTransitions.has(location.pathname)) {\n        // If we don't have a previous forward nav, assume we're popping back to\n        // the new location and enable if that location previously enabled\n        viewTransitionOpts = {\n          currentLocation: location,\n          nextLocation: state.location,\n        };\n      }\n    } else if (pendingViewTransitionEnabled) {\n      // Store the applied transition on PUSH/REPLACE\n      let toPaths = appliedViewTransitions.get(state.location.pathname);\n      if (toPaths) {\n        toPaths.add(location.pathname);\n      } else {\n        toPaths = new Set<string>([location.pathname]);\n        appliedViewTransitions.set(state.location.pathname, toPaths);\n      }\n      viewTransitionOpts = {\n        currentLocation: state.location,\n        nextLocation: location,\n      };\n    }\n\n    updateState(\n      {\n        ...newState, // matches, errors, fetchers go through as-is\n        actionData,\n        loaderData,\n        historyAction: pendingAction,\n        location,\n        initialized: true,\n        navigation: IDLE_NAVIGATION,\n        revalidation: \"idle\",\n        restoreScrollPosition: getSavedScrollPosition(\n          location,\n          newState.matches || state.matches\n        ),\n        preventScrollReset,\n        blockers,\n      },\n      {\n        viewTransitionOpts,\n        flushSync: flushSync === true,\n      }\n    );\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    pendingViewTransitionEnabled = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To | null,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      to,\n      future.v7_relativeSplatPath,\n      opts?.fromRouteId,\n      opts?.relative\n    );\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      false,\n      normalizedPath,\n      opts\n    );\n\n    let currentLocation = state.location;\n    let nextLocation = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    nextLocation = {\n      ...nextLocation,\n      ...init.history.encodeLocation(nextLocation),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let blockerKey = shouldBlockNavigation({\n      currentLocation,\n      nextLocation,\n      historyAction,\n    });\n\n    if (blockerKey) {\n      // Put the blocker into a blocked state\n      updateBlocker(blockerKey, {\n        state: \"blocked\",\n        location: nextLocation,\n        proceed() {\n          updateBlocker(blockerKey!, {\n            state: \"proceeding\",\n            proceed: undefined,\n            reset: undefined,\n            location: nextLocation,\n          });\n          // Send the same navigation through\n          navigate(to, opts);\n        },\n        reset() {\n          let blockers = new Map(state.blockers);\n          blockers.set(blockerKey!, IDLE_BLOCKER);\n          updateState({ blockers });\n        },\n      });\n      return;\n    }\n\n    return await startNavigation(historyAction, nextLocation, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n      enableViewTransition: opts && opts.unstable_viewTransition,\n      flushSync,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      initialHydration?: boolean;\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponseImpl;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n      enableViewTransition?: boolean;\n      flushSync?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(routesToUse, location, basename);\n    let flushSync = (opts && opts.flushSync) === true;\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(routesToUse);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(\n        location,\n        {\n          matches: notFoundMatches,\n          loaderData: {},\n          errors: {\n            [route.id]: error,\n          },\n        },\n        { flushSync }\n      );\n      return;\n    }\n\n    // Short circuit if it's only a hash change and not a revalidation or\n    // mutation submission.\n    //\n    // Ignore on initial page loads because since the initial load will always\n    // be \"same hash\".  For example, on /page#hash and submit a <Form method=\"post\">\n    // which will default to a navigation to /page\n    if (\n      state.initialized &&\n      !isRevalidationRequired &&\n      isHashChangeOnly(state.location, location) &&\n      !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))\n    ) {\n      completeNavigation(location, { matches }, { flushSync });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      init.history,\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionResult: PendingActionResult | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingActionResult = [\n        findNearestBoundary(matches).route.id,\n        { type: ResultType.error, error: opts.pendingError },\n      ];\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionResult = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace, flushSync }\n      );\n\n      if (actionResult.shortCircuited) {\n        return;\n      }\n\n      pendingActionResult = actionResult.pendingActionResult;\n      loadingNavigation = getLoadingNavigation(location, opts.submission);\n      flushSync = false;\n\n      // Create a GET request for the loaders\n      request = createClientSideRequest(\n        init.history,\n        request.url,\n        request.signal\n      );\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.fetcherSubmission,\n      opts && opts.replace,\n      opts && opts.initialHydration === true,\n      flushSync,\n      pendingActionResult\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...getActionDataForCommit(pendingActionResult),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts: { replace?: boolean; flushSync?: boolean } = {}\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation = getSubmittingNavigation(location, submission);\n    updateState({ navigation }, { flushSync: opts.flushSync === true });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        let location = normalizeRedirectLocation(\n          result.response.headers.get(\"Location\")!,\n          new URL(request.url),\n          basename\n        );\n        replace = location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(request, result, {\n        submission,\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    if (isDeferredResult(result)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionResult: [boundaryMatch.route.id, result],\n      };\n    }\n\n    return {\n      pendingActionResult: [actionMatch.route.id, result],\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    fetcherSubmission?: Submission,\n    replace?: boolean,\n    initialHydration?: boolean,\n    flushSync?: boolean,\n    pendingActionResult?: PendingActionResult\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation =\n      overrideNavigation || getLoadingNavigation(location, submission);\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission =\n      submission ||\n      fetcherSubmission ||\n      getSubmissionFromNavigation(loadingNavigation);\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      activeSubmission,\n      location,\n      future.v7_partialHydration && initialHydration === true,\n      future.unstable_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      pendingActionResult\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      let updatedFetchers = markFetchRedirectsDone();\n      completeNavigation(\n        location,\n        {\n          matches,\n          loaderData: {},\n          // Commit pending error if we're short circuiting\n          errors:\n            pendingActionResult && isErrorResult(pendingActionResult[1])\n              ? { [pendingActionResult[0]]: pendingActionResult[1].error }\n              : null,\n          ...getActionDataForCommit(pendingActionResult),\n          ...(updatedFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n        },\n        { flushSync }\n      );\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    // If we have partialHydration enabled, then don't update the state for the\n    // initial data load since it's not a \"navigation\"\n    if (\n      !isUninterruptedRevalidation &&\n      (!future.v7_partialHydration || !initialHydration)\n    ) {\n      revalidatingFetchers.forEach((rf) => {\n        let fetcher = state.fetchers.get(rf.key);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          fetcher ? fetcher.data : undefined\n        );\n        state.fetchers.set(rf.key, revalidatingFetcher);\n      });\n\n      let actionData: Record<string, RouteData> | null | undefined;\n      if (pendingActionResult && !isErrorResult(pendingActionResult[1])) {\n        // This is cast to `any` currently because `RouteData`uses any and it\n        // would be a breaking change to use any.\n        // TODO: v7 - change `RouteData` to use `unknown` instead of `any`\n        actionData = {\n          [pendingActionResult[0]]: pendingActionResult[1].data as any,\n        };\n      } else if (state.actionData) {\n        if (Object.keys(state.actionData).length === 0) {\n          actionData = null;\n        } else {\n          actionData = state.actionData;\n        }\n      }\n\n      updateState(\n        {\n          navigation: loadingNavigation,\n          ...(actionData !== undefined ? { actionData } : {}),\n          ...(revalidatingFetchers.length > 0\n            ? { fetchers: new Map(state.fetchers) }\n            : {}),\n        },\n        {\n          flushSync,\n        }\n      );\n    }\n\n    revalidatingFetchers.forEach((rf) => {\n      if (fetchControllers.has(rf.key)) {\n        abortFetcher(rf.key);\n      }\n      if (rf.controller) {\n        // Fetchers use an independent AbortController so that aborting a fetcher\n        // (via deleteFetcher) does not abort the triggering navigation that\n        // triggered the revalidation\n        fetchControllers.set(rf.key, rf.controller);\n      }\n    });\n\n    // Proxy navigation abort through to revalidation fetchers\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((f) => abortFetcher(f.key));\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.addEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    if (pendingNavigationController) {\n      pendingNavigationController.signal.removeEventListener(\n        \"abort\",\n        abortPendingFetchRevalidations\n      );\n    }\n    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      await startRedirectNavigation(request, redirect.result, {\n        replace,\n      });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingActionResult,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    // During partial hydration, preserve SSR errors for routes that don't re-run\n    if (future.v7_partialHydration && initialHydration && state.errors) {\n      Object.entries(state.errors)\n        .filter(([id]) => !matchesToLoad.some((m) => m.route.id === id))\n        .forEach(([routeId, error]) => {\n          errors = Object.assign(errors || {}, { [routeId]: error });\n        });\n    }\n\n    let updatedFetchers = markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    let shouldUpdateFetchers =\n      updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;\n\n    return {\n      loaderData,\n      errors,\n      ...(shouldUpdateFetchers ? { fetchers: new Map(state.fetchers) } : {}),\n    };\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string | null,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let flushSync = (opts && opts.unstable_flushSync) === true;\n\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let normalizedPath = normalizeTo(\n      state.location,\n      state.matches,\n      basename,\n      future.v7_prependBasename,\n      href,\n      future.v7_relativeSplatPath,\n      routeId,\n      opts?.relative\n    );\n    let matches = matchRoutes(routesToUse, normalizedPath, basename);\n\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: normalizedPath }),\n        { flushSync }\n      );\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(\n      future.v7_normalizeFormMethod,\n      true,\n      normalizedPath,\n      opts\n    );\n\n    if (error) {\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    let match = getTargetMatch(matches, path);\n\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(\n        key,\n        routeId,\n        path,\n        match,\n        matches,\n        flushSync,\n        submission\n      );\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, { routeId, path });\n    handleFetcherLoader(\n      key,\n      routeId,\n      path,\n      match,\n      matches,\n      flushSync,\n      submission\n    );\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action && !match.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error, { flushSync });\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {\n      flushSync,\n    });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let actionResults = await callDataStrategy(\n      \"action\",\n      fetchRequest,\n      [match],\n      requestMatches\n    );\n    let actionResult = actionResults[0];\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    // When using v7_fetcherPersist, we don't want errors bubbling up to the UI\n    // or redirects processed for unmounted fetchers so we just revert them to\n    // idle\n    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {\n      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      }\n      // Let SuccessResult's fall through for revalidation\n    } else {\n      if (isRedirectResult(actionResult)) {\n        fetchControllers.delete(key);\n        if (pendingNavigationLoadId > originatingLoadId) {\n          // A new navigation was kicked off after our action started, so that\n          // should take precedence over this redirect navigation.  We already\n          // set isRevalidationRequired so all loaders for the new route should\n          // fire unless opted out via shouldRevalidate\n          updateFetcherState(key, getDoneFetcher(undefined));\n          return;\n        } else {\n          fetchRedirectIds.add(key);\n          updateFetcherState(key, getLoadingFetcher(submission));\n          return startRedirectNavigation(fetchRequest, actionResult, {\n            fetcherSubmission: submission,\n          });\n        }\n      }\n\n      // Process any non-redirect errors thrown\n      if (isErrorResult(actionResult)) {\n        setFetcherError(key, routeId, actionResult.error);\n        return;\n      }\n    }\n\n    if (isDeferredResult(actionResult)) {\n      throw getInternalRouterError(400, { type: \"defer-action\" });\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      init.history,\n      nextLocation,\n      abortController.signal\n    );\n    let routesToUse = inFlightDataRoutes || dataRoutes;\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(routesToUse, state.navigation.location, basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = getLoadingFetcher(submission, actionResult.data);\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      init.history,\n      state,\n      matches,\n      submission,\n      nextLocation,\n      false,\n      future.unstable_skipActionErrorRevalidation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      deletedFetchers,\n      fetchLoadMatches,\n      fetchRedirectIds,\n      routesToUse,\n      basename,\n      [match.route.id, actionResult]\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter((rf) => rf.key !== key)\n      .forEach((rf) => {\n        let staleKey = rf.key;\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher = getLoadingFetcher(\n          undefined,\n          existingFetcher ? existingFetcher.data : undefined\n        );\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        if (fetchControllers.has(staleKey)) {\n          abortFetcher(staleKey);\n        }\n        if (rf.controller) {\n          fetchControllers.set(staleKey, rf.controller);\n        }\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let abortPendingFetchRevalidations = () =>\n      revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));\n\n    abortController.signal.addEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    let { loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    abortController.signal.removeEventListener(\n      \"abort\",\n      abortPendingFetchRevalidations\n    );\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach((r) => fetchControllers.delete(r.key));\n\n    let redirect = findRedirect([...loaderResults, ...fetcherResults]);\n    if (redirect) {\n      if (redirect.idx >= matchesToLoad.length) {\n        // If this redirect came from a fetcher make sure we mark it in\n        // fetchRedirectIds so it doesn't get revalidated on the next set of\n        // loader executions\n        let fetcherKey =\n          revalidatingFetchers[redirect.idx - matchesToLoad.length].key;\n        fetchRedirectIds.add(fetcherKey);\n      }\n      return startRedirectNavigation(revalidationRequest, redirect.result);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Since we let revalidations complete even if the submitting fetcher was\n    // deleted, only put it back to idle if it hasn't been deleted\n    if (state.fetchers.has(key)) {\n      let doneFetcher = getDoneFetcher(actionResult.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n\n    abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        fetchers: new Map(state.fetchers),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    flushSync: boolean,\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    updateFetcherState(\n      key,\n      getLoadingFetcher(\n        submission,\n        existingFetcher ? existingFetcher.data : undefined\n      ),\n      { flushSync }\n    );\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      init.history,\n      path,\n      abortController.signal\n    );\n    fetchControllers.set(key, abortController);\n\n    let originatingLoadId = incrementingLoadId;\n    let results = await callDataStrategy(\n      \"loader\",\n      fetchRequest,\n      [match],\n      matches\n    );\n    let result = results[0];\n\n    // Deferred isn't supported for fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by our our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // We don't want errors bubbling up or redirects followed for unmounted\n    // fetchers, so short circuit here if it was removed from the UI\n    if (deletedFetchers.has(key)) {\n      updateFetcherState(key, getDoneFetcher(undefined));\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      if (pendingNavigationLoadId > originatingLoadId) {\n        // A new navigation was kicked off after our loader started, so that\n        // should take precedence over this redirect navigation\n        updateFetcherState(key, getDoneFetcher(undefined));\n        return;\n      } else {\n        fetchRedirectIds.add(key);\n        await startRedirectNavigation(fetchRequest, result);\n        return;\n      }\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      setFetcherError(key, routeId, result.error);\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    updateFetcherState(key, getDoneFetcher(result.data));\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    request: Request,\n    redirect: RedirectResult,\n    {\n      submission,\n      fetcherSubmission,\n      replace,\n    }: {\n      submission?: Submission;\n      fetcherSubmission?: Submission;\n      replace?: boolean;\n    } = {}\n  ) {\n    if (redirect.response.headers.has(\"X-Remix-Revalidate\")) {\n      isRevalidationRequired = true;\n    }\n\n    let location = redirect.response.headers.get(\"Location\");\n    invariant(location, \"Expected a Location header on the redirect Response\");\n    location = normalizeRedirectLocation(\n      location,\n      new URL(request.url),\n      basename\n    );\n    let redirectLocation = createLocation(state.location, location, {\n      _isRedirect: true,\n    });\n\n    if (isBrowser) {\n      let isDocumentReload = false;\n\n      if (redirect.response.headers.has(\"X-Remix-Reload-Document\")) {\n        // Hard reload if the response contained X-Remix-Reload-Document\n        isDocumentReload = true;\n      } else if (ABSOLUTE_URL_REGEX.test(location)) {\n        const url = init.history.createURL(location);\n        isDocumentReload =\n          // Hard reload if it's an absolute URL to a new origin\n          url.origin !== routerWindow.location.origin ||\n          // Hard reload if it's an absolute URL that does not match our basename\n          stripBasename(url.pathname, basename) == null;\n      }\n\n      if (isDocumentReload) {\n        if (replace) {\n          routerWindow.location.replace(location);\n        } else {\n          routerWindow.location.assign(location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType } = state.navigation;\n    if (\n      !submission &&\n      !fetcherSubmission &&\n      formMethod &&\n      formAction &&\n      formEncType\n    ) {\n      submission = getSubmissionFromNavigation(state.navigation);\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    let activeSubmission = submission || fetcherSubmission;\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.response.status) &&\n      activeSubmission &&\n      isMutationMethod(activeSubmission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...activeSubmission,\n          formAction: location,\n        },\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    } else {\n      // If we have a navigation submission, we will preserve it through the\n      // redirect navigation\n      let overrideNavigation = getLoadingNavigation(\n        redirectLocation,\n        submission\n      );\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation,\n        // Send fetcher submissions through for shouldRevalidate\n        fetcherSubmission,\n        // Preserve this flag across redirects\n        preventScrollReset: pendingPreventScrollReset,\n      });\n    }\n  }\n\n  // Utility wrapper for calling dataStrategy client-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[]\n  ): Promise<DataResult[]> {\n    try {\n      let results = await callDataStrategyImpl(\n        dataStrategyImpl,\n        type,\n        request,\n        matchesToLoad,\n        matches,\n        manifest,\n        mapRouteProperties\n      );\n\n      return await Promise.all(\n        results.map((result, i) => {\n          if (isRedirectHandlerResult(result)) {\n            let response = result.result as Response;\n            return {\n              type: ResultType.redirect,\n              response: normalizeRelativeRoutingRedirectResponse(\n                response,\n                request,\n                matchesToLoad[i].route.id,\n                matches,\n                basename,\n                future.v7_relativeSplatPath\n              ),\n            };\n          }\n\n          return convertHandlerResultToDataResult(result);\n        })\n      );\n    } catch (e) {\n      // If the outer dataStrategy method throws, just return the error for all\n      // matches - and it'll naturally bubble to the root\n      return matchesToLoad.map(() => ({\n        type: ResultType.error,\n        error: e,\n      }));\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    let [loaderResults, ...fetcherResults] = await Promise.all([\n      matchesToLoad.length\n        ? callDataStrategy(\"loader\", request, matchesToLoad, matches)\n        : [],\n      ...fetchersToLoad.map((f) => {\n        if (f.matches && f.match && f.controller) {\n          let fetcherRequest = createClientSideRequest(\n            init.history,\n            f.path,\n            f.controller.signal\n          );\n          return callDataStrategy(\n            \"loader\",\n            fetcherRequest,\n            [f.match],\n            f.matches\n          ).then((r) => r[0]);\n        } else {\n          return Promise.resolve<DataResult>({\n            type: ResultType.error,\n            error: getInternalRouterError(404, {\n              pathname: f.path,\n            }),\n          });\n        }\n      }),\n    ]);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        loaderResults.map(() => request.signal),\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map((f) => f.match),\n        fetcherResults,\n        fetchersToLoad.map((f) => (f.controller ? f.controller.signal : null)),\n        true\n      ),\n    ]);\n\n    return {\n      loaderResults,\n      fetcherResults,\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function updateFetcherState(\n    key: string,\n    fetcher: Fetcher,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    state.fetchers.set(key, fetcher);\n    updateState(\n      { fetchers: new Map(state.fetchers) },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function setFetcherError(\n    key: string,\n    routeId: string,\n    error: any,\n    opts: { flushSync?: boolean } = {}\n  ) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState(\n      {\n        errors: {\n          [boundaryMatch.route.id]: error,\n        },\n        fetchers: new Map(state.fetchers),\n      },\n      { flushSync: (opts && opts.flushSync) === true }\n    );\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    if (future.v7_fetcherPersist) {\n      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);\n      // If this fetcher was previously marked for deletion, unmark it since we\n      // have a new instance\n      if (deletedFetchers.has(key)) {\n        deletedFetchers.delete(key);\n      }\n    }\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  function deleteFetcher(key: string): void {\n    let fetcher = state.fetchers.get(key);\n    // Don't abort the controller if this is a deletion of a fetcher.submit()\n    // in it's loading phase since - we don't want to abort the corresponding\n    // revalidation and want them to complete and land\n    if (\n      fetchControllers.has(key) &&\n      !(fetcher && fetcher.state === \"loading\" && fetchReloadIds.has(key))\n    ) {\n      abortFetcher(key);\n    }\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    deletedFetchers.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function deleteFetcherAndUpdateState(key: string): void {\n    if (future.v7_fetcherPersist) {\n      let count = (activeFetchers.get(key) || 0) - 1;\n      if (count <= 0) {\n        activeFetchers.delete(key);\n        deletedFetchers.add(key);\n      } else {\n        activeFetchers.set(key, count);\n      }\n    } else {\n      deleteFetcher(key);\n    }\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = getDoneFetcher(fetcher.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): boolean {\n    let doneKeys = [];\n    let updatedFetchers = false;\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n        updatedFetchers = true;\n      }\n    }\n    markFetchersDone(doneKeys);\n    return updatedFetchers;\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function getBlocker(key: string, fn: BlockerFunction) {\n    let blocker: Blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    if (blockerFunctions.get(key) !== fn) {\n      blockerFunctions.set(key, fn);\n    }\n\n    return blocker;\n  }\n\n  function deleteBlocker(key: string) {\n    state.blockers.delete(key);\n    blockerFunctions.delete(key);\n  }\n\n  // Utility function to update blockers, ensuring valid state transitions\n  function updateBlocker(key: string, newBlocker: Blocker) {\n    let blocker = state.blockers.get(key) || IDLE_BLOCKER;\n\n    // Poor mans state machine :)\n    // https://mermaid.live/edit#pako:eNqVkc9OwzAMxl8l8nnjAYrEtDIOHEBIgwvKJTReGy3_lDpIqO27k6awMG0XcrLlnz87nwdonESogKXXBuE79rq75XZO3-yHds0RJVuv70YrPlUrCEe2HfrORS3rubqZfuhtpg5C9wk5tZ4VKcRUq88q9Z8RS0-48cE1iHJkL0ugbHuFLus9L6spZy8nX9MP2CNdomVaposqu3fGayT8T8-jJQwhepo_UtpgBQaDEUom04dZhAN1aJBDlUKJBxE1ceB2Smj0Mln-IBW5AFU2dwUiktt_2Qaq2dBfaKdEup85UV7Yd-dKjlnkabl2Pvr0DTkTreM\n    invariant(\n      (blocker.state === \"unblocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"blocked\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"proceeding\") ||\n        (blocker.state === \"blocked\" && newBlocker.state === \"unblocked\") ||\n        (blocker.state === \"proceeding\" && newBlocker.state === \"unblocked\"),\n      `Invalid blocker state transition: ${blocker.state} -> ${newBlocker.state}`\n    );\n\n    let blockers = new Map(state.blockers);\n    blockers.set(key, newBlocker);\n    updateState({ blockers });\n  }\n\n  function shouldBlockNavigation({\n    currentLocation,\n    nextLocation,\n    historyAction,\n  }: {\n    currentLocation: Location;\n    nextLocation: Location;\n    historyAction: HistoryAction;\n  }): string | undefined {\n    if (blockerFunctions.size === 0) {\n      return;\n    }\n\n    // We ony support a single active blocker at the moment since we don't have\n    // any compelling use cases for multi-blocker yet\n    if (blockerFunctions.size > 1) {\n      warning(false, \"A router only supports one blocker at a time\");\n    }\n\n    let entries = Array.from(blockerFunctions.entries());\n    let [blockerKey, blockerFunction] = entries[entries.length - 1];\n    let blocker = state.blockers.get(blockerKey);\n\n    if (blocker && blocker.state === \"proceeding\") {\n      // If the blocker is currently proceeding, we don't need to re-check\n      // it and can let this navigation continue\n      return;\n    }\n\n    // At this point, we know we're unblocked/blocked so we need to check the\n    // user-provided blocker function\n    if (blockerFunction({ currentLocation, nextLocation, historyAction })) {\n      return blockerKey;\n    }\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || null;\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function getScrollKey(location: Location, matches: AgnosticDataRouteMatch[]) {\n    if (getScrollRestorationKey) {\n      let key = getScrollRestorationKey(\n        location,\n        matches.map((m) => convertRouteMatchToUiMatch(m, state.loaderData))\n      );\n      return key || location.key;\n    }\n    return location.key;\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollPosition) {\n      let key = getScrollKey(location, matches);\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions) {\n      let key = getScrollKey(location, matches);\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  function _internalSetRoutes(newRoutes: AgnosticDataRouteObject[]) {\n    manifest = {};\n    inFlightDataRoutes = convertRoutesToDataRoutes(\n      newRoutes,\n      mapRouteProperties,\n      undefined,\n      manifest\n    );\n  }\n\n  router = {\n    get basename() {\n      return basename;\n    },\n    get future() {\n      return future;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    get window() {\n      return routerWindow;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher: deleteFetcherAndUpdateState,\n    dispose,\n    getBlocker,\n    deleteBlocker,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n    // TODO: Remove setRoutes, it's temporary to avoid dealing with\n    // updating the tree while validating the update algorithm.\n    _internalSetRoutes,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport const UNSAFE_DEFERRED_SYMBOL = Symbol(\"deferred\");\n\n/**\n * Future flags to toggle new feature behavior\n */\nexport interface StaticHandlerFutureConfig {\n  v7_relativeSplatPath: boolean;\n  v7_throwAbortReason: boolean;\n}\n\nexport interface CreateStaticHandlerOptions {\n  basename?: string;\n  /**\n   * @deprecated Use `mapRouteProperties` instead\n   */\n  detectErrorBoundary?: DetectErrorBoundaryFunction;\n  mapRouteProperties?: MapRoutePropertiesFunction;\n  future?: Partial<StaticHandlerFutureConfig>;\n}\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: CreateStaticHandlerOptions\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let manifest: RouteManifest = {};\n  let basename = (opts ? opts.basename : null) || \"/\";\n  let mapRouteProperties: MapRoutePropertiesFunction;\n  if (opts?.mapRouteProperties) {\n    mapRouteProperties = opts.mapRouteProperties;\n  } else if (opts?.detectErrorBoundary) {\n    // If they are still using the deprecated version, wrap it with the new API\n    let detectErrorBoundary = opts.detectErrorBoundary;\n    mapRouteProperties = (route) => ({\n      hasErrorBoundary: detectErrorBoundary(route),\n    });\n  } else {\n    mapRouteProperties = defaultMapRouteProperties;\n  }\n  // Config driven behavior flags\n  let future: StaticHandlerFutureConfig = {\n    v7_relativeSplatPath: false,\n    v7_throwAbortReason: false,\n    ...(opts ? opts.future : null),\n  };\n\n  let dataRoutes = convertRoutesToDataRoutes(\n    routes,\n    mapRouteProperties,\n    undefined,\n    manifest\n  );\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   *\n   * - `opts.requestContext` is an optional server context that will be passed\n   *   to actions/loaders in the `context` parameter\n   * - `opts.skipLoaderErrorBubbling` is an optional parameter that will prevent\n   *   the bubbling of errors which allows single-fetch-type implementations\n   *   where the client will handle the bubbling and we may need to return data\n   *   for the handling route\n   */\n  async function query(\n    request: Request,\n    {\n      requestContext,\n      skipLoaderErrorBubbling,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      skipLoaderErrorBubbling?: boolean;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      skipLoaderErrorBubbling === true,\n      null\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   *\n   * - `opts.routeId` allows you to specify the specific route handler to call.\n   *   If not provided the handler will determine the proper route by matching\n   *   against `request.url`\n   * - `opts.requestContext` is an optional server context that will be passed\n   *    to actions/loaders in the `context` parameter\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n      unstable_dataStrategy,\n    }: {\n      requestContext?: unknown;\n      routeId?: string;\n      unstable_dataStrategy?: DataStrategyFunction;\n    } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method;\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"HEAD\" && method !== \"OPTIONS\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      unstable_dataStrategy || null,\n      false,\n      match\n    );\n\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    if (result.actionData) {\n      return Object.values(result.actionData)[0];\n    }\n\n    if (result.loaderData) {\n      let data = Object.values(result.loaderData)[0];\n      if (result.activeDeferreds?.[match.route.id]) {\n        data[UNSAFE_DEFERRED_SYMBOL] = result.activeDeferreds[match.route.id];\n      }\n      return data;\n    }\n\n    return undefined;\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          unstable_dataStrategy,\n          skipLoaderErrorBubbling,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction for a\n      // `queryRoute` call, we throw the `HandlerResult` to bail out early\n      // and then return or throw the raw Response here accordingly\n      if (isHandlerResult(e) && isResponse(e.result)) {\n        if (e.type === ResultType.error) {\n          throw e.result;\n        }\n        return e.result;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action && !actionMatch.route.lazy) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      let results = await callDataStrategy(\n        \"action\",\n        request,\n        [actionMatch],\n        matches,\n        isRouteRequest,\n        requestContext,\n        unstable_dataStrategy\n      );\n      result = results[0];\n\n      if (request.signal.aborted) {\n        throwStaticHandlerAbortedError(request, isRouteRequest, future);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.response.status,\n        headers: {\n          Location: result.response.headers.get(\"Location\")!,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      let error = getInternalRouterError(400, { type: \"defer-action\" });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = skipLoaderErrorBubbling\n        ? actionMatch\n        : findNearestBoundary(matches, actionMatch.route.id);\n\n      let context = await loadRouteData(\n        loaderRequest,\n        matches,\n        requestContext,\n        unstable_dataStrategy,\n        skipLoaderErrorBubbling,\n        null,\n        [boundaryMatch.route.id, result]\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : result.statusCode != null\n          ? result.statusCode\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(\n      loaderRequest,\n      matches,\n      requestContext,\n      unstable_dataStrategy,\n      skipLoaderErrorBubbling,\n      null\n    );\n\n    return {\n      ...context,\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionHeaders: result.headers\n        ? { [actionMatch.route.id]: result.headers }\n        : {},\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null,\n    skipLoaderErrorBubbling: boolean,\n    routeMatch: AgnosticDataRouteMatch | null,\n    pendingActionResult?: PendingActionResult\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (\n      isRouteRequest &&\n      !routeMatch?.route.loader &&\n      !routeMatch?.route.lazy\n    ) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? getLoaderMatchesUntilBoundary(matches, pendingActionResult[0])\n      : matches;\n    let matchesToLoad = requestMatches.filter(\n      (m) => m.route.loader || m.route.lazy\n    );\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors:\n          pendingActionResult && isErrorResult(pendingActionResult[1])\n            ? {\n                [pendingActionResult[0]]: pendingActionResult[1].error,\n              }\n            : null,\n        statusCode: 200,\n        loaderHeaders: {},\n        activeDeferreds: null,\n      };\n    }\n\n    let results = await callDataStrategy(\n      \"loader\",\n      request,\n      matchesToLoad,\n      matches,\n      isRouteRequest,\n      requestContext,\n      unstable_dataStrategy\n    );\n\n    if (request.signal.aborted) {\n      throwStaticHandlerAbortedError(request, isRouteRequest, future);\n    }\n\n    // Process and commit output from loaders\n    let activeDeferreds = new Map<string, DeferredData>();\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionResult,\n      activeDeferreds,\n      skipLoaderErrorBubbling\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    let executedLoaders = new Set<string>(\n      matchesToLoad.map((match) => match.route.id)\n    );\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n      activeDeferreds:\n        activeDeferreds.size > 0\n          ? Object.fromEntries(activeDeferreds.entries())\n          : null,\n    };\n  }\n\n  // Utility wrapper for calling dataStrategy server-side without having to\n  // pass around the manifest, mapRouteProperties, etc.\n  async function callDataStrategy(\n    type: \"loader\" | \"action\",\n    request: Request,\n    matchesToLoad: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    isRouteRequest: boolean,\n    requestContext: unknown,\n    unstable_dataStrategy: DataStrategyFunction | null\n  ): Promise<DataResult[]> {\n    let results = await callDataStrategyImpl(\n      unstable_dataStrategy || defaultDataStrategy,\n      type,\n      request,\n      matchesToLoad,\n      matches,\n      manifest,\n      mapRouteProperties,\n      requestContext\n    );\n\n    return await Promise.all(\n      results.map((result, i) => {\n        if (isRedirectHandlerResult(result)) {\n          let response = result.result as Response;\n          // Throw redirects and let the server handle them with an HTTP redirect\n          throw normalizeRelativeRoutingRedirectResponse(\n            response,\n            request,\n            matchesToLoad[i].route.id,\n            matches,\n            basename,\n            future.v7_relativeSplatPath\n          );\n        }\n        if (isResponse(result.result) && isRouteRequest) {\n          // For SSR single-route requests, we want to hand Responses back\n          // directly without unwrapping\n          throw result;\n        }\n\n        return convertHandlerResultToDataResult(result);\n      })\n    );\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: isRouteErrorResponse(error) ? error.status : 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction throwStaticHandlerAbortedError(\n  request: Request,\n  isRouteRequest: boolean,\n  future: StaticHandlerFutureConfig\n) {\n  if (future.v7_throwAbortReason && request.signal.reason !== undefined) {\n    throw request.signal.reason;\n  }\n\n  let method = isRouteRequest ? \"queryRoute\" : \"query\";\n  throw new Error(`${method}() call aborted: ${request.method} ${request.url}`);\n}\n\nfunction isSubmissionNavigation(\n  opts: BaseNavigateOrFetchOptions\n): opts is SubmissionNavigateOptions {\n  return (\n    opts != null &&\n    ((\"formData\" in opts && opts.formData != null) ||\n      (\"body\" in opts && opts.body !== undefined))\n  );\n}\n\nfunction normalizeTo(\n  location: Path,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  prependBasename: boolean,\n  to: To | null,\n  v7_relativeSplatPath: boolean,\n  fromRouteId?: string,\n  relative?: RelativeRoutingType\n) {\n  let contextualMatches: AgnosticDataRouteMatch[];\n  let activeRouteMatch: AgnosticDataRouteMatch | undefined;\n  if (fromRouteId) {\n    // Grab matches up to the calling route so our route-relative logic is\n    // relative to the correct source route\n    contextualMatches = [];\n    for (let match of matches) {\n      contextualMatches.push(match);\n      if (match.route.id === fromRouteId) {\n        activeRouteMatch = match;\n        break;\n      }\n    }\n  } else {\n    contextualMatches = matches;\n    activeRouteMatch = matches[matches.length - 1];\n  }\n\n  // Resolve the relative path\n  let path = resolveTo(\n    to ? to : \".\",\n    getResolveToMatches(contextualMatches, v7_relativeSplatPath),\n    stripBasename(location.pathname, basename) || location.pathname,\n    relative === \"path\"\n  );\n\n  // When `to` is not specified we inherit search/hash from the current\n  // location, unlike when to=\".\" and we just inherit the path.\n  // See https://github.com/remix-run/remix/issues/927\n  if (to == null) {\n    path.search = location.search;\n    path.hash = location.hash;\n  }\n\n  // Add an ?index param for matched index routes if we don't already have one\n  if (\n    (to == null || to === \"\" || to === \".\") &&\n    activeRouteMatch &&\n    activeRouteMatch.route.index &&\n    !hasNakedIndexQuery(path.search)\n  ) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname.  If\n  // this is a root navigation, then just use the raw basename which allows\n  // the basename to have full control over the presence of a trailing slash\n  // on root actions\n  if (prependBasename && basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  normalizeFormMethod: boolean,\n  isFetcher: boolean,\n  path: string,\n  opts?: BaseNavigateOrFetchOptions\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponseImpl;\n} {\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  let getInvalidBodyError = () => ({\n    path,\n    error: getInternalRouterError(400, { type: \"invalid-body\" }),\n  });\n\n  // Create a Submission on non-GET navigations\n  let rawFormMethod = opts.formMethod || \"get\";\n  let formMethod = normalizeFormMethod\n    ? (rawFormMethod.toUpperCase() as V7_FormMethod)\n    : (rawFormMethod.toLowerCase() as FormMethod);\n  let formAction = stripHashFromPath(path);\n\n  if (opts.body !== undefined) {\n    if (opts.formEncType === \"text/plain\") {\n      // text only support POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      let text =\n        typeof opts.body === \"string\"\n          ? opts.body\n          : opts.body instanceof FormData ||\n            opts.body instanceof URLSearchParams\n          ? // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data\n            Array.from(opts.body.entries()).reduce(\n              (acc, [name, value]) => `${acc}${name}=${value}\\n`,\n              \"\"\n            )\n          : String(opts.body);\n\n      return {\n        path,\n        submission: {\n          formMethod,\n          formAction,\n          formEncType: opts.formEncType,\n          formData: undefined,\n          json: undefined,\n          text,\n        },\n      };\n    } else if (opts.formEncType === \"application/json\") {\n      // json only supports POST/PUT/PATCH/DELETE submissions\n      if (!isMutationMethod(formMethod)) {\n        return getInvalidBodyError();\n      }\n\n      try {\n        let json =\n          typeof opts.body === \"string\" ? JSON.parse(opts.body) : opts.body;\n\n        return {\n          path,\n          submission: {\n            formMethod,\n            formAction,\n            formEncType: opts.formEncType,\n            formData: undefined,\n            json,\n            text: undefined,\n          },\n        };\n      } catch (e) {\n        return getInvalidBodyError();\n      }\n    }\n  }\n\n  invariant(\n    typeof FormData === \"function\",\n    \"FormData is not available in this environment\"\n  );\n\n  let searchParams: URLSearchParams;\n  let formData: FormData;\n\n  if (opts.formData) {\n    searchParams = convertFormDataToSearchParams(opts.formData);\n    formData = opts.formData;\n  } else if (opts.body instanceof FormData) {\n    searchParams = convertFormDataToSearchParams(opts.body);\n    formData = opts.body;\n  } else if (opts.body instanceof URLSearchParams) {\n    searchParams = opts.body;\n    formData = convertSearchParamsToFormData(searchParams);\n  } else if (opts.body == null) {\n    searchParams = new URLSearchParams();\n    formData = new FormData();\n  } else {\n    try {\n      searchParams = new URLSearchParams(opts.body);\n      formData = convertSearchParamsToFormData(searchParams);\n    } catch (e) {\n      return getInvalidBodyError();\n    }\n  }\n\n  let submission: Submission = {\n    formMethod,\n    formAction,\n    formEncType:\n      (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n    formData,\n    json: undefined,\n    text: undefined,\n  };\n\n  if (isMutationMethod(submission.formMethod)) {\n    return { path, submission };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  // On GET navigation submissions we can drop the ?index param from the\n  // resulting location since all loaders will run.  But fetcher GET submissions\n  // only run a single loader so we need to preserve any incoming ?index params\n  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n    searchParams.append(\"index\", \"\");\n  }\n  parsedPath.search = `?${searchParams}`;\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  history: History,\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isInitialLoad: boolean,\n  skipActionErrorRevalidation: boolean,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  deletedFetchers: Set<string>,\n  fetchLoadMatches: Map<string, FetchLoadMatch>,\n  fetchRedirectIds: Set<string>,\n  routesToUse: AgnosticDataRouteObject[],\n  basename: string | undefined,\n  pendingActionResult?: PendingActionResult\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingActionResult\n    ? isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : pendingActionResult[1].data\n    : undefined;\n  let currentUrl = history.createURL(state.location);\n  let nextUrl = history.createURL(location);\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[0]\n      : undefined;\n  let boundaryMatches = boundaryId\n    ? getLoaderMatchesUntilBoundary(matches, boundaryId)\n    : matches;\n\n  // Don't revalidate loaders by default after action 4xx/5xx responses\n  // when the flag is enabled.  They can still opt-into revalidation via\n  // `shouldRevalidate` via `actionResult`\n  let actionStatus = pendingActionResult\n    ? pendingActionResult[1].statusCode\n    : undefined;\n  let shouldSkipRevalidation =\n    skipActionErrorRevalidation && actionStatus && actionStatus >= 400;\n\n  let navigationMatches = boundaryMatches.filter((match, index) => {\n    let { route } = match;\n    if (route.lazy) {\n      // We haven't loaded this route yet so we don't know if it's got a loader!\n      return true;\n    }\n\n    if (route.loader == null) {\n      return false;\n    }\n\n    if (isInitialLoad) {\n      if (typeof route.loader !== \"function\" || route.loader.hydrate) {\n        return true;\n      }\n      return (\n        state.loaderData[route.id] === undefined &&\n        // Don't re-run if the loader ran and threw an error\n        (!state.errors || state.errors[route.id] === undefined)\n      );\n    }\n\n    // Always call the loader on new route instances and pending defer cancellations\n    if (\n      isNewLoader(state.loaderData, state.matches[index], match) ||\n      cancelledDeferredRoutes.some((id) => id === match.route.id)\n    ) {\n      return true;\n    }\n\n    // This is the default implementation for when we revalidate.  If the route\n    // provides it's own implementation, then we give them full control but\n    // provide this value so they can leverage it if needed after they check\n    // their own specific use cases\n    let currentRouteMatch = state.matches[index];\n    let nextRouteMatch = match;\n\n    return shouldRevalidateLoader(match, {\n      currentUrl,\n      currentParams: currentRouteMatch.params,\n      nextUrl,\n      nextParams: nextRouteMatch.params,\n      ...submission,\n      actionResult,\n      unstable_actionStatus: actionStatus,\n      defaultShouldRevalidate: shouldSkipRevalidation\n        ? false\n        : // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate\n          isRevalidationRequired ||\n          currentUrl.pathname + currentUrl.search ===\n            nextUrl.pathname + nextUrl.search ||\n          // Search params affect all loaders\n          currentUrl.search !== nextUrl.search ||\n          isNewRouteInstance(currentRouteMatch, nextRouteMatch),\n    });\n  });\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches.forEach((f, key) => {\n    // Don't revalidate:\n    //  - on initial load (shouldn't be any fetchers then anyway)\n    //  - if fetcher won't be present in the subsequent render\n    //    - no longer matches the URL (v7_fetcherPersist=false)\n    //    - was unmounted but persisted due to v7_fetcherPersist=true\n    if (\n      isInitialLoad ||\n      !matches.some((m) => m.route.id === f.routeId) ||\n      deletedFetchers.has(key)\n    ) {\n      return;\n    }\n\n    let fetcherMatches = matchRoutes(routesToUse, f.path, basename);\n\n    // If the fetcher path no longer matches, push it in with null matches so\n    // we can trigger a 404 in callLoadersAndMaybeResolveData.  Note this is\n    // currently only a use-case for Remix HMR where the route tree can change\n    // at runtime and remove a route previously loaded via a fetcher\n    if (!fetcherMatches) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: null,\n        match: null,\n        controller: null,\n      });\n      return;\n    }\n\n    // Revalidating fetchers are decoupled from the route matches since they\n    // load from a static href.  They revalidate based on explicit revalidation\n    // (submission, useRevalidator, or X-Remix-Revalidate)\n    let fetcher = state.fetchers.get(key);\n    let fetcherMatch = getTargetMatch(fetcherMatches, f.path);\n\n    let shouldRevalidate = false;\n    if (fetchRedirectIds.has(key)) {\n      // Never trigger a revalidation of an actively redirecting fetcher\n      shouldRevalidate = false;\n    } else if (cancelledFetcherLoads.includes(key)) {\n      // Always revalidate if the fetcher was cancelled\n      shouldRevalidate = true;\n    } else if (\n      fetcher &&\n      fetcher.state !== \"idle\" &&\n      fetcher.data === undefined\n    ) {\n      // If the fetcher hasn't ever completed loading yet, then this isn't a\n      // revalidation, it would just be a brand new load if an explicit\n      // revalidation is required\n      shouldRevalidate = isRevalidationRequired;\n    } else {\n      // Otherwise fall back on any user-defined shouldRevalidate, defaulting\n      // to explicit revalidations only\n      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, {\n        currentUrl,\n        currentParams: state.matches[state.matches.length - 1].params,\n        nextUrl,\n        nextParams: matches[matches.length - 1].params,\n        ...submission,\n        actionResult,\n        unstable_actionStatus: actionStatus,\n        defaultShouldRevalidate: shouldSkipRevalidation\n          ? false\n          : isRevalidationRequired,\n      });\n    }\n\n    if (shouldRevalidate) {\n      revalidatingFetchers.push({\n        key,\n        routeId: f.routeId,\n        path: f.path,\n        matches: fetcherMatches,\n        match: fetcherMatch,\n        controller: new AbortController(),\n      });\n    }\n  });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath != null &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  loaderMatch: AgnosticDataRouteMatch,\n  arg: ShouldRevalidateFunctionArgs\n) {\n  if (loaderMatch.route.shouldRevalidate) {\n    let routeChoice = loaderMatch.route.shouldRevalidate(arg);\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return arg.defaultShouldRevalidate;\n}\n\n/**\n * Execute route.lazy() methods to lazily load route modules (loader, action,\n * shouldRevalidate) and update the routeManifest in place which shares objects\n * with dataRoutes so those get updated as well.\n */\nasync function loadLazyRouteModule(\n  route: AgnosticDataRouteObject,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  manifest: RouteManifest\n) {\n  if (!route.lazy) {\n    return;\n  }\n\n  let lazyRoute = await route.lazy();\n\n  // If the lazy route function was executed and removed by another parallel\n  // call then we can return - first lazy() to finish wins because the return\n  // value of lazy is expected to be static\n  if (!route.lazy) {\n    return;\n  }\n\n  let routeToUpdate = manifest[route.id];\n  invariant(routeToUpdate, \"No route found in manifest\");\n\n  // Update the route in place.  This should be safe because there's no way\n  // we could yet be sitting on this route as we can't get there without\n  // resolving lazy() first.\n  //\n  // This is different than the HMR \"update\" use-case where we may actively be\n  // on the route being updated.  The main concern boils down to \"does this\n  // mutation affect any ongoing navigations or any current state.matches\n  // values?\".  If not, it should be safe to update in place.\n  let routeUpdates: Record<string, any> = {};\n  for (let lazyRouteProperty in lazyRoute) {\n    let staticRouteValue =\n      routeToUpdate[lazyRouteProperty as keyof typeof routeToUpdate];\n\n    let isPropertyStaticallyDefined =\n      staticRouteValue !== undefined &&\n      // This property isn't static since it should always be updated based\n      // on the route updates\n      lazyRouteProperty !== \"hasErrorBoundary\";\n\n    warning(\n      !isPropertyStaticallyDefined,\n      `Route \"${routeToUpdate.id}\" has a static property \"${lazyRouteProperty}\" ` +\n        `defined but its lazy function is also returning a value for this property. ` +\n        `The lazy route property \"${lazyRouteProperty}\" will be ignored.`\n    );\n\n    if (\n      !isPropertyStaticallyDefined &&\n      !immutableRouteKeys.has(lazyRouteProperty as ImmutableRouteKey)\n    ) {\n      routeUpdates[lazyRouteProperty] =\n        lazyRoute[lazyRouteProperty as keyof typeof lazyRoute];\n    }\n  }\n\n  // Mutate the route with the provided updates.  Do this first so we pass\n  // the updated version to mapRouteProperties\n  Object.assign(routeToUpdate, routeUpdates);\n\n  // Mutate the `hasErrorBoundary` property on the route based on the route\n  // updates and remove the `lazy` function so we don't resolve the lazy\n  // route again.\n  Object.assign(routeToUpdate, {\n    // To keep things framework agnostic, we use the provided\n    // `mapRouteProperties` (or wrapped `detectErrorBoundary`) function to\n    // set the framework-aware properties (`element`/`hasErrorBoundary`) since\n    // the logic will differ between frameworks.\n    ...mapRouteProperties(routeToUpdate),\n    lazy: undefined,\n  });\n}\n\n// Default implementation of `dataStrategy` which fetches all loaders in parallel\nfunction defaultDataStrategy(\n  opts: DataStrategyFunctionArgs\n): ReturnType<DataStrategyFunction> {\n  return Promise.all(opts.matches.map((m) => m.resolve()));\n}\n\nasync function callDataStrategyImpl(\n  dataStrategyImpl: DataStrategyFunction,\n  type: \"loader\" | \"action\",\n  request: Request,\n  matchesToLoad: AgnosticDataRouteMatch[],\n  matches: AgnosticDataRouteMatch[],\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  requestContext?: unknown\n): Promise<HandlerResult[]> {\n  let routeIdsToLoad = matchesToLoad.reduce(\n    (acc, m) => acc.add(m.route.id),\n    new Set<string>()\n  );\n  let loadedMatches = new Set<string>();\n\n  // Send all matches here to allow for a middleware-type implementation.\n  // handler will be a no-op for unneeded routes and we filter those results\n  // back out below.\n  let results = await dataStrategyImpl({\n    matches: matches.map((match) => {\n      let shouldLoad = routeIdsToLoad.has(match.route.id);\n      // `resolve` encapsulates the route.lazy, executing the\n      // loader/action, and mapping return values/thrown errors to a\n      // HandlerResult.  Users can pass a callback to take fine-grained control\n      // over the execution of the loader/action\n      let resolve: DataStrategyMatch[\"resolve\"] = (handlerOverride) => {\n        loadedMatches.add(match.route.id);\n        return shouldLoad\n          ? callLoaderOrAction(\n              type,\n              request,\n              match,\n              manifest,\n              mapRouteProperties,\n              handlerOverride,\n              requestContext\n            )\n          : Promise.resolve({ type: ResultType.data, result: undefined });\n      };\n\n      return {\n        ...match,\n        shouldLoad,\n        resolve,\n      };\n    }),\n    request,\n    params: matches[0].params,\n    context: requestContext,\n  });\n\n  // Throw if any loadRoute implementations not called since they are what\n  // ensures a route is fully loaded\n  matches.forEach((m) =>\n    invariant(\n      loadedMatches.has(m.route.id),\n      `\\`match.resolve()\\` was not called for route id \"${m.route.id}\". ` +\n        \"You must call `match.resolve()` on every match passed to \" +\n        \"`dataStrategy` to ensure all routes are properly loaded.\"\n    )\n  );\n\n  // Filter out any middleware-only matches for which we didn't need to run handlers\n  return results.filter((_, i) => routeIdsToLoad.has(matches[i].route.id));\n}\n\n// Default logic for calling a loader/action is the user has no specified a dataStrategy\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  manifest: RouteManifest,\n  mapRouteProperties: MapRoutePropertiesFunction,\n  handlerOverride: Parameters<DataStrategyMatch[\"resolve\"]>[0],\n  staticContext?: unknown\n): Promise<HandlerResult> {\n  let result: HandlerResult;\n  let onReject: (() => void) | undefined;\n\n  let runHandler = (\n    handler: AgnosticRouteObject[\"loader\"] | AgnosticRouteObject[\"action\"]\n  ): Promise<HandlerResult> => {\n    // Setup a promise we can race against so that abort signals short circuit\n    let reject: () => void;\n    // This will never resolve so safe to type it as Promise<HandlerResult> to\n    // satisfy the function return value\n    let abortPromise = new Promise<HandlerResult>((_, r) => (reject = r));\n    onReject = () => reject();\n    request.signal.addEventListener(\"abort\", onReject);\n\n    let actualHandler = (ctx?: unknown) => {\n      if (typeof handler !== \"function\") {\n        return Promise.reject(\n          new Error(\n            `You cannot call the handler for a route which defines a boolean ` +\n              `\"${type}\" [routeId: ${match.route.id}]`\n          )\n        );\n      }\n      return handler(\n        {\n          request,\n          params: match.params,\n          context: staticContext,\n        },\n        ...(ctx !== undefined ? [ctx] : [])\n      );\n    };\n\n    let handlerPromise: Promise<HandlerResult>;\n    if (handlerOverride) {\n      handlerPromise = handlerOverride((ctx: unknown) => actualHandler(ctx));\n    } else {\n      handlerPromise = (async () => {\n        try {\n          let val = await actualHandler();\n          return { type: \"data\", result: val };\n        } catch (e) {\n          return { type: \"error\", result: e };\n        }\n      })();\n    }\n\n    return Promise.race([handlerPromise, abortPromise]);\n  };\n\n  try {\n    let handler = match.route[type];\n\n    if (match.route.lazy) {\n      if (handler) {\n        // Run statically defined handler in parallel with lazy()\n        let handlerError;\n        let [value] = await Promise.all([\n          // If the handler throws, don't let it immediately bubble out,\n          // since we need to let the lazy() execution finish so we know if this\n          // route has a boundary that can handle the error\n          runHandler(handler).catch((e) => {\n            handlerError = e;\n          }),\n          loadLazyRouteModule(match.route, mapRouteProperties, manifest),\n        ]);\n        if (handlerError !== undefined) {\n          throw handlerError;\n        }\n        result = value!;\n      } else {\n        // Load lazy route module, then run any returned handler\n        await loadLazyRouteModule(match.route, mapRouteProperties, manifest);\n\n        handler = match.route[type];\n        if (handler) {\n          // Handler still runs even if we got interrupted to maintain consistency\n          // with un-abortable behavior of handler execution on non-lazy or\n          // previously-lazy-loaded routes\n          result = await runHandler(handler);\n        } else if (type === \"action\") {\n          let url = new URL(request.url);\n          let pathname = url.pathname + url.search;\n          throw getInternalRouterError(405, {\n            method: request.method,\n            pathname,\n            routeId: match.route.id,\n          });\n        } else {\n          // lazy() route has no loader to run.  Short circuit here so we don't\n          // hit the invariant below that errors on returning undefined.\n          return { type: ResultType.data, result: undefined };\n        }\n      }\n    } else if (!handler) {\n      let url = new URL(request.url);\n      let pathname = url.pathname + url.search;\n      throw getInternalRouterError(404, {\n        pathname,\n      });\n    } else {\n      result = await runHandler(handler);\n    }\n\n    invariant(\n      result.result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    // We should already be catching and converting normal handler executions to\n    // HandlerResults and returning them, so anything that throws here is an\n    // unexpected error we still need to wrap\n    return { type: ResultType.error, result: e };\n  } finally {\n    if (onReject) {\n      request.signal.removeEventListener(\"abort\", onReject);\n    }\n  }\n\n  return result;\n}\n\nasync function convertHandlerResultToDataResult(\n  handlerResult: HandlerResult\n): Promise<DataResult> {\n  let { result, type, status } = handlerResult;\n\n  if (isResponse(result)) {\n    let data: any;\n\n    try {\n      let contentType = result.headers.get(\"Content-Type\");\n      // Check between word boundaries instead of startsWith() due to the last\n      // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n      if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n        if (result.body == null) {\n          data = null;\n        } else {\n          data = await result.json();\n        }\n      } else {\n        data = await result.text();\n      }\n    } catch (e) {\n      return { type: ResultType.error, error: e };\n    }\n\n    if (type === ResultType.error) {\n      return {\n        type: ResultType.error,\n        error: new ErrorResponseImpl(result.status, result.statusText, data),\n        statusCode: result.status,\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (type === ResultType.error) {\n    return {\n      type: ResultType.error,\n      error: result,\n      statusCode: isRouteErrorResponse(result) ? result.status : status,\n    };\n  }\n\n  if (isDeferredData(result)) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result,\n      statusCode: result.init?.status,\n      headers: result.init?.headers && new Headers(result.init.headers),\n    };\n  }\n\n  return { type: ResultType.data, data: result, statusCode: status };\n}\n\n// Support relative routing in internal redirects\nfunction normalizeRelativeRoutingRedirectResponse(\n  response: Response,\n  request: Request,\n  routeId: string,\n  matches: AgnosticDataRouteMatch[],\n  basename: string,\n  v7_relativeSplatPath: boolean\n) {\n  let location = response.headers.get(\"Location\");\n  invariant(\n    location,\n    \"Redirects returned/thrown from loaders/actions must have a Location header\"\n  );\n\n  if (!ABSOLUTE_URL_REGEX.test(location)) {\n    let trimmedMatches = matches.slice(\n      0,\n      matches.findIndex((m) => m.route.id === routeId) + 1\n    );\n    location = normalizeTo(\n      new URL(request.url),\n      trimmedMatches,\n      basename,\n      true,\n      location,\n      v7_relativeSplatPath\n    );\n    response.headers.set(\"Location\", location);\n  }\n\n  return response;\n}\n\nfunction normalizeRedirectLocation(\n  location: string,\n  currentUrl: URL,\n  basename: string\n): string {\n  if (ABSOLUTE_URL_REGEX.test(location)) {\n    // Strip off the protocol+origin for same-origin + same-basename absolute redirects\n    let normalizedLocation = location;\n    let url = normalizedLocation.startsWith(\"//\")\n      ? new URL(currentUrl.protocol + normalizedLocation)\n      : new URL(normalizedLocation);\n    let isSameBasename = stripBasename(url.pathname, basename) != null;\n    if (url.origin === currentUrl.origin && isSameBasename) {\n      return url.pathname + url.search + url.hash;\n    }\n  }\n  return location;\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  history: History,\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = history.createURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType } = submission;\n    // Didn't think we needed this but it turns out unlike other methods, patch\n    // won't be properly normalized to uppercase and results in a 405 error.\n    // See: https://fetch.spec.whatwg.org/#concept-method\n    init.method = formMethod.toUpperCase();\n\n    if (formEncType === \"application/json\") {\n      init.headers = new Headers({ \"Content-Type\": formEncType });\n      init.body = JSON.stringify(submission.json);\n    } else if (formEncType === \"text/plain\") {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.text;\n    } else if (\n      formEncType === \"application/x-www-form-urlencoded\" &&\n      submission.formData\n    ) {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = convertFormDataToSearchParams(submission.formData);\n    } else {\n      // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n      init.body = submission.formData;\n    }\n  }\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#converting-an-entry-list-to-a-list-of-name-value-pairs\n    searchParams.append(key, typeof value === \"string\" ? value : value.name);\n  }\n\n  return searchParams;\n}\n\nfunction convertSearchParamsToFormData(\n  searchParams: URLSearchParams\n): FormData {\n  let formData = new FormData();\n  for (let [key, value] of searchParams.entries()) {\n    formData.append(key, value);\n  }\n  return formData;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  activeDeferreds: Map<string, DeferredData>,\n  skipLoaderErrorBubbling: boolean\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n  let pendingError =\n    pendingActionResult && isErrorResult(pendingActionResult[1])\n      ? pendingActionResult[1].error\n      : undefined;\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError !== undefined) {\n        error = pendingError;\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      if (skipLoaderErrorBubbling) {\n        errors[id] = error;\n      } else {\n        // Look upwards from the matched route for the closest ancestor error\n        // boundary, defaulting to the root match.  Prefer higher error values\n        // if lower errors bubble to the same boundary\n        let boundaryMatch = findNearestBoundary(matches, id);\n        if (errors[boundaryMatch.route.id] == null) {\n          errors[boundaryMatch.route.id] = error;\n        }\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else {\n      if (isDeferredResult(result)) {\n        activeDeferreds.set(id, result.deferredData);\n        loaderData[id] = result.deferredData.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (\n          result.statusCode != null &&\n          result.statusCode !== 200 &&\n          !foundError\n        ) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      } else {\n        loaderData[id] = result.data;\n        // Error status codes always override success status codes, but if all\n        // loaders are successful we take the deepest status code.\n        if (result.statusCode && result.statusCode !== 200 && !foundError) {\n          statusCode = result.statusCode;\n        }\n        if (result.headers) {\n          loaderHeaders[id] = result.headers;\n        }\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError !== undefined && pendingActionResult) {\n    errors = { [pendingActionResult[0]]: pendingError };\n    loaderData[pendingActionResult[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingActionResult: PendingActionResult | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingActionResult,\n    activeDeferreds,\n    false // This method is only called client side so we always want to bubble\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let { key, match, controller } = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (controller && controller.signal.aborted) {\n      // Nothing to do for aborted fetchers\n      continue;\n    } else if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match?.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      invariant(false, \"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      invariant(false, \"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = getDoneFetcher(result.data);\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined && match.route.loader) {\n      // Preserve existing keys not included in newLoaderData and where a loader\n      // wasn't removed by HMR\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\nfunction getActionDataForCommit(\n  pendingActionResult: PendingActionResult | undefined\n) {\n  if (!pendingActionResult) {\n    return {};\n  }\n  return isErrorResult(pendingActionResult[1])\n    ? {\n        // Clear out prior actionData on errors\n        actionData: {},\n      }\n    : {\n        actionData: {\n          [pendingActionResult[0]]: pendingActionResult[1].data,\n        },\n      };\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route =\n    routes.length === 1\n      ? routes[0]\n      : routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n          id: `__shim-error-route__`,\n        };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n    type,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n    type?: \"defer-action\" | \"invalid-body\";\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (type === \"defer-action\") {\n      errorMessage = \"defer() is not supported in actions\";\n    } else if (type === \"invalid-body\") {\n      errorMessage = \"Unable to encode submission body\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponseImpl(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(\n  results: DataResult[]\n): { result: RedirectResult; idx: number } | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return { result, idx: i };\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  if (a.pathname !== b.pathname || a.search !== b.search) {\n    return false;\n  }\n\n  if (a.hash === \"\") {\n    // /page -> /page#hash\n    return b.hash !== \"\";\n  } else if (a.hash === b.hash) {\n    // /page#hash -> /page#hash\n    return true;\n  } else if (b.hash !== \"\") {\n    // /page#hash -> /page#other\n    return true;\n  }\n\n  // If the hash is removed the browser will re-perform a request to the server\n  // /page#hash -> /page\n  return false;\n}\n\nfunction isHandlerResult(result: unknown): result is HandlerResult {\n  return (\n    result != null &&\n    typeof result === \"object\" &&\n    \"type\" in result &&\n    \"result\" in result &&\n    (result.type === ResultType.data || result.type === ResultType.error)\n  );\n}\n\nfunction isRedirectHandlerResult(result: HandlerResult) {\n  return (\n    isResponse(result.result) && redirectStatusCodes.has(result.result.status)\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nexport function isDeferredData(value: any): value is DeferredData {\n  let deferred: DeferredData = value;\n  return (\n    deferred &&\n    typeof deferred === \"object\" &&\n    typeof deferred.data === \"object\" &&\n    typeof deferred.subscribe === \"function\" &&\n    typeof deferred.cancel === \"function\" &&\n    typeof deferred.resolveData === \"function\"\n  );\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isValidMethod(method: string): method is FormMethod | V7_FormMethod {\n  return validRequestMethods.has(method.toLowerCase() as FormMethod);\n}\n\nfunction isMutationMethod(\n  method: string\n): method is MutationFormMethod | V7_MutationFormMethod {\n  return validMutationMethods.has(method.toLowerCase() as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: (AgnosticDataRouteMatch | null)[],\n  results: DataResult[],\n  signals: (AbortSignal | null)[],\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    // If we don't have a match, then we can have a deferred result to do\n    // anything with.  This is for revalidating fetchers where the route was\n    // removed during HMR\n    if (!match) {\n      continue;\n    }\n\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match!.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      let signal = signals[index];\n      invariant(\n        signal,\n        \"Expected an AbortSignal for revalidating fetcher deferred result\"\n      );\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction getSubmissionFromNavigation(\n  navigation: Navigation\n): Submission | undefined {\n  let { formMethod, formAction, formEncType, text, formData, json } =\n    navigation;\n  if (!formMethod || !formAction || !formEncType) {\n    return;\n  }\n\n  if (text != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json: undefined,\n      text,\n    };\n  } else if (formData != null) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData,\n      json: undefined,\n      text: undefined,\n    };\n  } else if (json !== undefined) {\n    return {\n      formMethod,\n      formAction,\n      formEncType,\n      formData: undefined,\n      json,\n      text: undefined,\n    };\n  }\n}\n\nfunction getLoadingNavigation(\n  location: Location,\n  submission?: Submission\n): NavigationStates[\"Loading\"] {\n  if (submission) {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n    };\n    return navigation;\n  } else {\n    let navigation: NavigationStates[\"Loading\"] = {\n      state: \"loading\",\n      location,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n    };\n    return navigation;\n  }\n}\n\nfunction getSubmittingNavigation(\n  location: Location,\n  submission: Submission\n): NavigationStates[\"Submitting\"] {\n  let navigation: NavigationStates[\"Submitting\"] = {\n    state: \"submitting\",\n    location,\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n  };\n  return navigation;\n}\n\nfunction getLoadingFetcher(\n  submission?: Submission,\n  data?: Fetcher[\"data\"]\n): FetcherStates[\"Loading\"] {\n  if (submission) {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: submission.formMethod,\n      formAction: submission.formAction,\n      formEncType: submission.formEncType,\n      formData: submission.formData,\n      json: submission.json,\n      text: submission.text,\n      data,\n    };\n    return fetcher;\n  } else {\n    let fetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      json: undefined,\n      text: undefined,\n      data,\n    };\n    return fetcher;\n  }\n}\n\nfunction getSubmittingFetcher(\n  submission: Submission,\n  existingFetcher?: Fetcher\n): FetcherStates[\"Submitting\"] {\n  let fetcher: FetcherStates[\"Submitting\"] = {\n    state: \"submitting\",\n    formMethod: submission.formMethod,\n    formAction: submission.formAction,\n    formEncType: submission.formEncType,\n    formData: submission.formData,\n    json: submission.json,\n    text: submission.text,\n    data: existingFetcher ? existingFetcher.data : undefined,\n  };\n  return fetcher;\n}\n\nfunction getDoneFetcher(data: Fetcher[\"data\"]): FetcherStates[\"Idle\"] {\n  let fetcher: FetcherStates[\"Idle\"] = {\n    state: \"idle\",\n    formMethod: undefined,\n    formAction: undefined,\n    formEncType: undefined,\n    formData: undefined,\n    json: undefined,\n    text: undefined,\n    data,\n  };\n  return fetcher;\n}\n\nfunction restoreAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  try {\n    let sessionPositions = _window.sessionStorage.getItem(\n      TRANSITIONS_STORAGE_KEY\n    );\n    if (sessionPositions) {\n      let json = JSON.parse(sessionPositions);\n      for (let [k, v] of Object.entries(json || {})) {\n        if (v && Array.isArray(v)) {\n          transitions.set(k, new Set(v || []));\n        }\n      }\n    }\n  } catch (e) {\n    // no-op, use default empty object\n  }\n}\n\nfunction persistAppliedTransitions(\n  _window: Window,\n  transitions: Map<string, Set<string>>\n) {\n  if (transitions.size > 0) {\n    let json: Record<string, string[]> = {};\n    for (let [k, v] of transitions) {\n      json[k] = [...v];\n    }\n    try {\n      _window.sessionStorage.setItem(\n        TRANSITIONS_STORAGE_KEY,\n        JSON.stringify(json)\n      );\n    } catch (error) {\n      warning(\n        false,\n        `Failed to save applied view transitions in sessionStorage (${error}).`\n      );\n    }\n  }\n}\n\n//#endregion\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}